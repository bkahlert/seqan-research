2012-07-23T12:20:25.738+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:25.759+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:20:25.777+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	2551	784
2012-07-23T12:20:25.870+02:00	TYPING-search-s	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:25.909+02:00	TYPING-search-se	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:26.072+02:00	TYPING-search-set	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:26.168+02:00	TYPING-search-setq	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:26.206+02:00	TYPING-search-setqu	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:26.322+02:00	TYPING-search-setqua	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:26.456+02:00	TYPING-search-setqual	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:27.700+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.set_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:20:34.949+02:00	TYPING-search-setqualig	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:34.838+02:00	TYPING-search-setquali	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:36.536+02:00	TYPING-search-setqualige	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:36.614+02:00	TYPING-search-g	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:36.705+02:00	TYPING-search-ge	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:36.874+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:37.076+02:00	TYPING-search-getq	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:37.199+02:00	TYPING-search-getqu	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:37.312+02:00	TYPING-search-getqua	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:37.515+02:00	TYPING-search-getqual	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:38.810+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:20:42.058+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:42.061+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:20:42.942+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:20:44.849+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:22:54.955+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:22:55.639+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:23:28.630+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:26:39.164+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:26:39.454+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	784
2012-07-23T13:15:24.816+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	2551	784
2012-07-23T13:15:28.306+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:30.911+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:31.961+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:42.704+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsEclipse	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:44.630+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:45.728+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:47.240+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:55.252+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:01.209+02:00	READY	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:01.466+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:02.026+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:03.181+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:07.758+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:10.138+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:11.582+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	188	2215	1128
2012-07-23T13:16:13.931+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	1492	2215	1128
2012-07-23T13:16:29.695+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5334	2215	1128
2012-07-23T13:26:29.175+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5509	2215	1128
2012-07-23T13:36:05.926+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5509	2215	1128
2012-07-23T13:36:05.946+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5509	2215	1128
2012-07-23T14:37:03.009+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T14:55:34.114+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T14:55:34.115+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T14:56:21.333+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T14:56:21.334+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T15:25:59.191+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T15:25:59.193+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T16:17:14.564+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	982
2012-07-23T16:17:15.294+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	982
2012-07-23T16:17:16.067+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	2551	982
2012-07-23T16:17:16.070+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	982
2012-07-23T16:17:16.072+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	982
2012-07-23T16:55:34.878+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2151	1025
2012-07-25T13:45:35.810+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1260	1284
2012-07-25T13:45:36.078+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:45:36.174+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1260	1284
2012-07-25T13:45:36.309+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:37.702+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:37.735+02:00	TYPING-search-i	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:37.860+02:00	TYPING-search-it	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:37.946+02:00	TYPING-search-ite	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:37.962+02:00	TYPING-search-iter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:38.094+02:00	TYPING-search-itera	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:38.163+02:00	TYPING-search-iterat	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:38.263+02:00	TYPING-search-iterato	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:41.497+02:00	READY	http://docs.seqan.de/seqan/dev2/files/DEMO_Iterator+_Basics.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:45:47.446+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:47.448+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/DEMO_Iterator+_Basics.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:45:48.072+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:46:04.400+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	291	959	1284
2012-07-25T13:46:12.043+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	1008	959	1284
2012-07-25T13:46:17.192+02:00	LINK-http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html#	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	1008	959	1284
2012-07-25T13:46:20.420+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	1260	959	1284
2012-07-25T13:46:20.827+02:00	LINK-http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html#	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	1018	959	1284
2012-07-25T13:46:22.830+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	1018	959	1284
2012-07-25T13:46:43.804+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:47:57.836+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:47:57.839+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:47:58.325+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TAG_Iterator+_Spec.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:00.087+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:48:00.090+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TAG_Iterator+_Spec.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:00.465+02:00	READY	http://docs.seqan.de/seqan/dev2/files/DEMO_Rooted+_Iterators.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:06.200+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Iterator.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:14.738+02:00	READY	http://docs.seqan.de/seqan/dev2/files/DEMO_Rooted+_Iterators.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:22.617+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TAG_Iterator+_Spec.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:23.499+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:25.693+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:29.880+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Random_Access_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:35.754+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:49:01.126+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T14:08:55.727+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T14:08:55.794+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T14:18:05.693+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T14:18:07.038+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T14:20:10.051+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-31T11:34:19.296+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1574	1266
2012-07-31T11:34:19.311+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:34:19.783+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:19.989+02:00	TYPING-search-A	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.112+02:00	TYPING-search-Al	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.180+02:00	TYPING-search-Ali	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.258+02:00	TYPING-search-Alig	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.341+02:00	TYPING-search-Align	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.394+02:00	TYPING-search-Align	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.456+02:00	TYPING-search-AlignC	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.563+02:00	TYPING-search-AlignCo	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.630+02:00	TYPING-search-AlignCon	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.687+02:00	TYPING-search-AlignConf	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.776+02:00	TYPING-search-AlignConfi	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:21.970+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:34:22.400+02:00	TYPING-search-AlignConfig	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:46.005+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:43:41.920+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:43:42.022+02:00	TYPING-search-AlignConfig	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:43:42.089+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:43:46.000+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:44:01.727+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:44:51.232+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:44:54.989+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:44:54.990+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:45:00.090+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:48:54.954+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:49:40.048+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:51:58.175+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:51:58.350+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T17:32:50.956+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T17:32:50.977+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:32:50.992+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.532+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.595+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.763+02:00	TYPING-search-co	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.780+02:00	TYPING-search-con	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.866+02:00	TYPING-search-cons	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.928+02:00	TYPING-search-const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.300+02:00	TYPING-search-const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.323+02:00	TYPING-search-const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.469+02:00	TYPING-search-const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.581+02:00	TYPING-search-const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.683+02:00	TYPING-search-U	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.775+02:00	TYPING-search-Ut	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.863+02:00	TYPING-search-Ute	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.921+02:00	TYPING-search-Uter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:56.019+02:00	TYPING-search-Utera	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:56.098+02:00	TYPING-search-Uterat	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:56.167+02:00	TYPING-search-Uterati	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:56.999+02:00	TYPING-search-Uteratir	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.133+02:00	TYPING-search-Uterati	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.167+02:00	TYPING-search-Uterati	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.302+02:00	TYPING-search-Uterati	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.404+02:00	TYPING-search-Uterati	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.560+02:00	TYPING-search-I	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.686+02:00	TYPING-search-It	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.752+02:00	TYPING-search-Ite	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.850+02:00	TYPING-search-Iter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.933+02:00	TYPING-search-Itera	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:58.020+02:00	TYPING-search-Iterat	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:58.091+02:00	TYPING-search-Iterato	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:58.258+02:00	TYPING-search-Iterator	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:58.462+02:00	TYPING-search-Iterator	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.016+02:00	TYPING-search-IteratorC	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.034+02:00	TYPING-search-IteratorC	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.157+02:00	TYPING-search-IteratorC	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.249+02:00	TYPING-search-IteratorC	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.340+02:00	TYPING-search-C	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.451+02:00	TYPING-search-Co	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.518+02:00	TYPING-search-Con	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.608+02:00	TYPING-search-Cons	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.833+02:00	TYPING-search-Const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.935+02:00	TYPING-search-Const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:00.093+02:00	TYPING-search-ConstI	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:00.182+02:00	TYPING-search-ConstIt	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:00.273+02:00	TYPING-search-ConstIte	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:01.847+02:00	TYPING-search-ConstIter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:01.869+02:00	TYPING-search-ConstIter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.129+02:00	TYPING-search-ConstIter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.275+02:00	TYPING-search-ConstIter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.410+02:00	TYPING-search-I	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.465+02:00	TYPING-search-It	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.555+02:00	TYPING-search-Ite	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.673+02:00	TYPING-search-Iter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.742+02:00	TYPING-search-Itera	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:03.096+02:00	TYPING-search-Iterat	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:03.141+02:00	TYPING-search-Iterato	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:06.268+02:00	READY	http://docs.seqan.de/seqan/dev2/files/DEMO_Iterator+_Basics.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T17:33:07.338+02:00	TYPING-search-Iterator	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:07.399+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:07.394+02:00	TYPING-search-Iterator	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:10.327+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:10.329+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/DEMO_Iterator+_Basics.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T17:33:10.332+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:33:10.630+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:10.633+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/DEMO_Iterator+_Basics.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T17:33:10.636+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:33:22.950+02:00	READY	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:33:23.509+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:33:30.571+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:33:32.433+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:46:43.404+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:46:43.517+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:47:59.287+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:48:01.856+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:48:05.583+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:48:06.581+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:52:35.856+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:52:39.736+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:53:06.627+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:53:07.795+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:53:07.810+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:53:07.814+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:35.326+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:35.344+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1441	1304
2012-07-31T18:05:35.360+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T18:05:36.025+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.127+02:00	TYPING-search-g	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.214+02:00	TYPING-search-ge	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.299+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.413+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.801+02:00	TYPING-search-getQ	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.929+02:00	TYPING-search-getQu	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:37.013+02:00	TYPING-search-getQua	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:37.173+02:00	TYPING-search-getQual	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:37.274+02:00	TYPING-search-getQuali	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:38.015+02:00	TYPING-search-getQualit	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:38.342+02:00	TYPING-search-getQualit	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:38.689+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T18:05:40.328+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:14:31.609+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:14:33.965+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:14:33.966+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:14:34.175+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-08-06T17:17:37.777+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1585	1199
2012-08-06T17:17:38.028+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:17:38.047+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:38.870+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:38.927+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:39.112+02:00	TYPING-search-A	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:39.184+02:00	TYPING-search-Al	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:39.264+02:00	TYPING-search-Ali	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:39.319+02:00	TYPING-search-Alig	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:41.679+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:17:44.619+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	231	1284	1199
2012-08-06T17:17:47.222+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	305	1284	1199
2012-08-06T17:17:51.890+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	6	1284	1199
2012-08-06T17:18:02.431+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	17	1284	1199
2012-08-06T17:18:03.339+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:18:03.341+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	17	1284	1199
2012-08-06T17:18:03.758+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:18:06.310+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	17	1284	1199
2012-08-06T17:18:11.077+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:18:14.540+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:18:43.544+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:18:44.276+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:22:23.436+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-08T16:05:01.603+02:00	READY	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:05:33.333+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:05:33.598+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:43:21.845+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:43:21.876+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:43:22.989+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:43:24.635+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:43:28.658+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-10T15:39:37.163+02:00	READY	http://trac.seqan.de/ticket/90	141.42.200.12	-	0	367	1719	827
2012-08-10T15:39:40.056+02:00	READY	http://trac.seqan.de/ticket/90	141.42.200.12	-	0	844	1719	827
2012-08-10T15:39:42.586+02:00	SCROLL	http://trac.seqan.de/ticket/90	141.42.200.12	-	0	43	1719	827
2012-08-10T15:39:47.826+02:00	SCROLL	http://trac.seqan.de/ticket/90	141.42.200.12	-	0	432	1719	827
2012-08-10T15:39:52.277+02:00	READY	http://trac.seqan.de/browser/trunk/seqan/projects/benchmarks/find/src/iterator/myers.h?rev=5837	141.42.200.12	-	0	0	1719	827
2012-08-10T15:39:57.220+02:00	READY	http://trac.seqan.de/ticket/317	141.42.200.12	-	0	0	1719	827
2012-08-10T15:40:03.951+02:00	READY	http://trac.seqan.de/ticket/280	141.42.200.12	-	0	0	1719	827
2012-08-10T15:40:07.632+02:00	SCROLL	http://trac.seqan.de/ticket/280	141.42.200.12	-	0	177	1719	827
2012-08-10T15:40:10.034+02:00	BLUR	http://trac.seqan.de/ticket/280	141.42.200.12	-	0	177	1719	827
2012-08-10T15:40:12.337+02:00	FOCUS	http://trac.seqan.de/ticket/280	141.42.200.12	-	0	177	1719	827
2012-08-14T12:08:28.282+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:28.302+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:28.351+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:08:28.582+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:28.671+02:00	TYPING-search-s	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:28.813+02:00	TYPING-search-st	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:28.999+02:00	TYPING-search-str	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:29.075+02:00	TYPING-search-stri	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:29.189+02:00	TYPING-search-strin	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:34.127+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:08:39.431+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	1355	1359	1179
2012-08-14T12:08:42.216+02:00	TYPING-search-string	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:42.245+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:42.238+02:00	TYPING-search-string	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:42.747+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:42.876+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	639	1359	1179
2012-08-14T12:08:42.878+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:42.881+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:42.959+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:42.958+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	639	1359	1179
2012-08-14T12:08:42.962+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:43.028+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:43.027+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	639	1359	1179
2012-08-14T12:08:43.030+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:44.820+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:08:44.822+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:46.627+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:08:46.806+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:48.863+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:08:48.865+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:48.869+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:49.009+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:08:49.246+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:08:49.248+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:49.251+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:49.463+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:08:49.465+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:49.467+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:50.410+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:09:04.093+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move_Value.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:10.169+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:12.812+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move_Value.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:14.913+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:15.887+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.swap.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:27.353+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:30.042+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move_Value.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:30.943+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:09:34.685+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	1509	1359	1179
2012-08-14T12:09:38.573+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T12:09:48.200+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T12:12:50.076+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T12:12:50.349+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T13:42:16.479+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T13:42:16.527+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T13:42:37.371+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T13:42:37.434+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T13:52:10.318+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	141.42.200.12	-	0	572	1359	1179
2012-08-14T13:52:10.377+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	141.42.200.12	-	0	572	1359	1179
2012-08-14T13:52:27.942+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:04:02.194+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:04:02.196+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:05:39.752+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:05:39.809+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:15:47.345+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:15:47.409+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T17:44:16.520+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T17:44:16.575+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-16T10:57:00.628+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1314	1343
2012-08-16T10:57:01.097+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1314	1343
2012-08-16T10:57:01.148+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:57:01.294+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:08.829+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:08.903+02:00	TYPING-search-r	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:09.007+02:00	TYPING-search-ro	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:09.075+02:00	TYPING-search-roo	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:09.177+02:00	TYPING-search-root	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:09.300+02:00	TYPING-search-roote	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:12.079+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:57:20.090+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	968	1013	1343
2012-08-16T10:57:22.994+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:22.996+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	968	1013	1343
2012-08-16T10:57:23.328+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Dna5_Iterator.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:57:30.042+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:57:32.961+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	970	1013	1343
2012-08-16T10:57:38.597+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Dna5_Iterator.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:57:39.790+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:57:42.728+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	970	1013	1343
2012-08-16T10:57:50.295+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Peptide_Iterator.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:57:55.743+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Peptide.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:58:00.809+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Peptide_Iterator.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:58:01.276+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:58:04.059+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	970	1013	1343
2012-08-16T10:58:15.691+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Char_Iterator.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:58:18.595+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:58:19.302+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:58:58.743+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:58:59.494+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:59:58.676+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:59:58.765+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:01:39.315+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:01:40.219+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:02:06.159+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:02:06.849+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:04:40.754+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:04:41.747+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:04:51.348+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:04:52.178+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T13:32:41.613+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1369
2012-08-16T13:32:41.681+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1511	1369
2012-08-16T13:32:41.752+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1812	1369
2012-08-20T10:50:35.949+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:50:38.636+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:50:42.599+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:50:46.204+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	517	1748	1206
2012-08-20T10:50:53.596+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	600	1748	1206
2012-08-20T10:50:54.813+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	600	1748	1206
2012-08-20T10:51:26.893+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	600	1748	1206
2012-08-20T10:51:30.355+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:51:30.429+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:51:31.696+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:51:34.419+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:51:39.192+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:51:48.753+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:57:01.002+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:57:01.277+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:57:03.581+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:57:04.106+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:57:04.284+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:05.903+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:05.959+02:00	TYPING-search-v	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:06.082+02:00	TYPING-search-va	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:06.218+02:00	TYPING-search-val	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:06.274+02:00	TYPING-search-valu	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:17.200+02:00	TYPING-search-value	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:20.193+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:08.916+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:10.865+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:21.194+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:21.201+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:21.547+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:21.942+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:58:22.001+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:24.105+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:24.179+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:55.520+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:58.228+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:59:43.388+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:59:43.528+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:59:43.627+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T11:18:19.577+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T11:18:19.739+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T11:18:19.950+02:00	UNLOAD	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T15:54:56.046+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	2203	1265
2012-08-20T15:54:56.166+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	2203	1265
2012-08-20T15:54:56.356+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1265
2012-08-20T15:54:56.970+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1265
2012-08-20T15:54:57.023+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	2203	1265
2012-09-04T11:14:50.679+02:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	129	1276	706
2012-09-04T11:14:52.426+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:14:54.332+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:14:55.434+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:01.321+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:07.846+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	215	1276	706
2012-09-04T11:15:12.099+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:25.519+02:00	READY	https://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:28.889+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	69	1276	706
2012-09-04T11:15:33.847+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:44.233+02:00	TYPING-text-= Getting Started =\n\nThis chapter gives you the necessary steps to get started with SeqAn:\n\n * Necessary Prerequisites\n * Installing SeqAn from Subversion\n * Creating a first build.\n * Creating your own first application.\n\nUse the following links to select your target operating system and IDE/build system.\nThe bold items show the recommended build system for the given platforms.\n\n{{{#!th style="align:center; text-align:top; width:200px"\n[[Image(/static/Tutorial/GettingStarted/Linux.png,width=80px,height=80px,link=)]] [[br]] Linux\n}}}\n{{{#!th style="align:center; text-align:top; width:200px"\n[[Image(/static/Tutorial/GettingStarted/MacOsX.png,width=80px,height=80pxlink=)]] [[br]] Mac Os X\n}}}\n{{{#!th style="align:center; text-align:top; width:200px"\n[[Image(/static/Tutorial/GettingStarted/Windows7.png,width=80px,height=80px,link=)]] [[br]] Windows\n}}}\n|--------------------------------------------------------\n{{{#!td valign="top" align="center"\nGetting started on Linux using\n\n{{{#!table style="border:none;"\n{{{#!td style="border:none; padding-left:20px; padding-right:20px;" align="center"\n[[Image(/static/Tutorial/GettingStarted/LinuxTerminal.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/LinuxMakefiles)]] [[br]]\n'''[wiki:Tutorial/GettingStarted/LinuxMakefiles Makefiles]'''\n}}}\n{{{#!td style="border:none; padding-left:20px; padding-right:20px;" align="center"\n[[Image(/static/Tutorial/GettingStarted/Eclipse.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/LinuxEclipse)]] [[br]]\n[wiki:Tutorial/GettingStarted/LinuxEclipse Eclipse]\n}}}\n}}}\n}}}\n{{{#!td valign="top" align="center"\nGetting started on Mac Os X using\n\n{{{#!table style="border:none;" \n{{{#!td style="border:none; padding-left:20px; padding-right:20px;" align="center"\n[[Image(/static/Tutorial/GettingStarted/Xcode.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/MacXcode)]] [[br]]\n'''[wiki:Tutorial/GettingStarted/MacXcode Xcode]'''\n}}}\n{{{#!td style="border:none; padding-left:20px; padding-right:20px;" align="center"\n[[Image(/static/Tutorial/GettingStarted/MacTerminal.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/MacMakefiles)]] [[br]]\n[wiki:Tutorial/GettingStarted/MacMakefiles Makefiles]\n}}}\n}}}\n}}}\n{{{#!td valign="top" align="center"\nGetting started on Windows using\n\n{{{#!table style="border:none;"\n{{{#!td style="border:none;" align="center"\n[[Image(/static/Tutorial/GettingStarted/VisualStudio2010.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/WindowsVisualStudio)]] [[br]]\n'''[wiki:Tutorial/GettingStarted/WindowsVisualStudio Visual Studio 8, 9, 10]'''\n}}}\n{{{#!td style="border:none;" colspan=2 align="center"\n[[Image(/static/Tutorial/GettingStarted/Eclipse.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/WindowsEclipse)]] [[br]]\n~~[wiki:Tutorial/GettingStarted/WindowsEclipse MinGW + Eclipse]~~\n}}}\n}}}\n}}}\n\n{{{\n#!comment\nMinGW Makefiles are not described yet\n[[Image(/static/Tutorial/GettingStarted/WindowsTerminal.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/WindowsMinGW)]] [[br]]\n[wiki:Tutorial/GettingStarted/WindowsMinGW MinGW Makefiles]\n}}}\n\n{{{\n#!FoldOut\nClick "more" for details on the supported development platforms.\n----\n\n{{{\n#!InfoBox\n'''In-Depth Information:''' Supported OS, Build Systems, and Compilers\n\nThe content of this box is meant as additional information.\nYou do not need to understand it to use SeqAn or follow the tutorials.\n\nThere are three degrees of freedom when selecting a SeqAn development platform.\nThe degrees of freedom are:\n\n 1. The '''operating system'''.\n    We support Linux, Mac Os X and Windows.\n 1. The '''build system'''.\n    This is partially orthogonal to the operating system, although each build system is only available on some platforms (e.g. Visual Studio is only supported on Windows).\n    We use CMake to generate the actual build files and the build system maps to "CMake generators".\n    A CMake generator creates either build files for a build system (e.g. GNU Make) or a project file for an IDE (e.g. for Visual Studio 2008).\n 1. The '''compiler'''.\n    This is partially orthogonal to the operating system and build system, although only some combinations of each are possible.\n    For example, Visual Studio projects of a particular version can only use the Visual Studio compiler of the same version.\n\nThe SeqAn team offers support for the following operating systems, build systems, and compilers:\n\n * '''Operating System:''' Linux, Mac Os X, Windows.\n * '''Build System:''' Makefiles, Visual Studio projects, XCode projects, Eclipse CDT projects.\n * '''Compilers:''' GNU g++ from version 4.1, LLVM/Clang from version 3.0, Visual C++ from Version 8.\n\nWe are told that SeqAn also works on FreeBSD.\nIt should work with all [http://www.cmake.org/cmake/help/v2.8.8/cmake.html#section_Generators generators available in CMake] that work with the supported compilers (e.g. the !CodeBlocks generator will probably work as long as you use it on a operating system with a supported compiler, although we cannot offer any support for !CodeBlocks).\n}}}\n}}}\n\n== Relevant How-Tos ==\n\nAlthough slightly more advanced than "getting started", the following How-Tos apply to setting up your build environment:\n\n [wiki:HowTo/UseParallelBuildDirectories How To: Use Parallel Build Directories] ::\n   With CMake, it is easy to create multiple build directories and thus different Makefile configurations or project files for different IDEs.\n   This is important to know if you want to have debug and release Makefiles next to each other.\n   Also, if you want to have build files for more than one Visual Studio version, then this How-To is for you!\n [wiki:HowTo/UseSeqAnInYourProjects How To: Use SeqAn In Your Projects] ::\n   This How-To explains how to use SeqAn in your projects with your own build system.\n   It deals with the precompiler defines to set, paths etc.\n [wiki:HowTo/UseLatestClangInXcode How To: Use The Latest Clang In XCode] ::\n   Clang is a new C++ compiler with very nice error output.\n   This How-To describes how to use the latest in XCode on Mac Os X.\n [wiki:HowTo/InstallContribsWindows How To: Install Contribs on Windows] ::\n   Installing and compiling libraries such as zlib or libbz2 on Windows can be tricky.\n   We provide prebuilt binaries which we recommend to use with SeqAn on Windows.\n   This How-To describes how to install them (it's as easy as extracting one ZIP file).	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:51.727+02:00	TYPING-comment-	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:51.878+02:00	TYPING-comment-t	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:52.463+02:00	TYPING-comment-ty	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:52.599+02:00	TYPING-comment-typ	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:52.775+02:00	TYPING-comment-typo	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:52.839+02:00	TYPING-comment-typo,	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:54.239+02:00	TYPING-comment-typo, os 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:54.159+02:00	TYPING-comment-typo, os	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:54.071+02:00	TYPING-comment-typo, o	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:54.039+02:00	TYPING-comment-typo, 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:54.279+02:00	TYPING-comment-typo, os x	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.039+02:00	TYPING-comment-typo, os x 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.199+02:00	TYPING-comment-typo, os x l	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.262+02:00	TYPING-comment-typo, os x lo	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.335+02:00	TYPING-comment-typo, os x log	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.424+02:00	TYPING-comment-typo, os x logo	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.951+02:00	TYPING-comment-typo, os x logo 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.039+02:00	TYPING-comment-typo, os x logo w	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.103+02:00	TYPING-comment-typo, os x logo wa	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.166+02:00	TYPING-comment-typo, os x logo was	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.231+02:00	TYPING-comment-typo, os x logo was 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.319+02:00	TYPING-comment-typo, os x logo was a	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.551+02:00	TYPING-comment-typo, os x logo was a 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.687+02:00	TYPING-comment-typo, os x logo was a l	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.751+02:00	TYPING-comment-typo, os x logo was a li	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.838+02:00	TYPING-comment-typo, os x logo was a lin	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:06.639+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	476	1276	706
2012-09-04T11:16:11.258+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:12.862+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:18.591+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:20.175+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:33.970+02:00	READY	https://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:41.159+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:45.062+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:22:28.953+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:34:33.712+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:34:33.867+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:34:34.630+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:34:39.114+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	496	1276	706
2012-09-04T11:34:43.043+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	92	1276	706
2012-09-04T11:34:46.612+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:34:46.634+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:35:00.624+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:35:13.635+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:35:13.823+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:35:16.836+02:00	READY	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:35:27.402+02:00	FOCUS	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:35:33.450+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	39	1276	706
2012-09-04T11:35:44.235+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:35:51.842+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:36:21.592+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:36:26.122+02:00	BLUR	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:36:42.675+02:00	FOCUS	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:36:45.978+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:36:49.307+02:00	BLUR	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:36:53.030+02:00	FOCUS	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:36:57.507+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:37:09.707+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:37:37.926+02:00	BLUR	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:37:46.309+02:00	FOCUS	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:44:16.420+02:00	BLUR	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:44:53.766+02:00	FOCUS	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:44:54.457+02:00	BLUR	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:44:54.463+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:44:54.468+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T13:22:17.516+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T13:22:17.540+02:00	READY	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1276	706
2012-09-04T13:22:17.597+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	130.133.52.211	-	0	0	975	706
2012-09-04T13:22:17.603+02:00	TYPING-search-read	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T13:22:17.647+02:00	TYPING-search-readr	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T13:22:18.114+02:00	TYPING-search-readre	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T13:22:19.902+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	97	975	706
2012-09-04T13:22:23.184+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	861	975	706
2012-09-04T13:22:25.284+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T13:22:25.287+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	861	975	706
2012-09-04T13:22:49.720+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	861	975	706
2012-09-04T13:28:12.472+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	861	975	706
2012-09-04T13:28:12.635+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	861	975	706
2012-09-04T13:28:17.688+02:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-09-04T13:28:20.777+02:00	SCROLL	http://trac.seqan.de/	130.133.52.211	-	0	22	1276	706
2012-09-04T13:28:22.377+02:00	READY	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	0	1276	706
2012-09-04T13:28:29.498+02:00	READY	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	0	1276	706
2012-09-04T13:28:38.065+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	775	1276	706
2012-09-04T13:28:59.609+02:00	READY	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	946	1276	706
2012-09-04T13:29:10.991+02:00	READY	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	0	1276	706
2012-09-04T13:29:20.754+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1388	1276	706
2012-09-04T13:29:23.396+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1693	1276	706
2012-09-04T13:29:35.359+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1693	1276	706
2012-09-04T13:29:39.846+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2321	1276	706
2012-09-04T13:29:43.907+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2169	1276	706
2012-09-04T13:29:55.913+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	3327	1276	706
2012-09-04T13:29:58.001+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	3383	1276	706
2012-09-04T13:29:59.070+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	3383	1276	706
2012-09-04T13:32:43.910+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	3383	1276	706
2012-09-04T13:32:49.501+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1775	1276	706
2012-09-04T13:32:50.651+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1775	1276	706
2012-09-04T13:33:56.224+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1775	1276	706
2012-09-04T13:33:59.764+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1974	1276	706
2012-09-04T13:34:02.114+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1974	1276	706
2012-09-04T13:34:12.797+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1974	1276	706
2012-09-04T13:34:18.135+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:18.521+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:19.009+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:21.467+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:21.847+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:24.133+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:35.145+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:36.309+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:53.028+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:54.470+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:35:25.685+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:35:29.925+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2057	1276	706
2012-09-04T13:35:36.083+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2057	1276	706
2012-09-04T13:35:45.946+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2057	1276	706
2012-09-04T13:35:51.934+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	4480	1276	706
2012-09-04T13:35:52.920+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	4341	1276	706
2012-09-04T13:35:55.860+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1623	1276	706
2012-09-04T13:35:57.255+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1623	1276	706
2012-09-04T13:36:08.134+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	6893	1276	706
2012-09-04T13:36:12.995+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	5954	1276	706
2012-09-04T13:36:17.955+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2588	1276	706
2012-09-04T13:36:18.985+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2588	1276	706
2012-09-04T13:36:19.881+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2588	1276	706
2012-09-04T13:36:21.538+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:36:22.570+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:36:33.963+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:36:37.063+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:36:46.088+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:36:48.158+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:38:15.862+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:38:24.418+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:38:31.782+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:38:32.473+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:41:44.518+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:41:45.174+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:42:45.789+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:42:58.331+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:43:12.757+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:43:13.109+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T14:30:14.651+02:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-09-04T14:30:20.668+02:00	SCROLL	http://trac.seqan.de/	130.133.52.211	-	0	168	1276	706
2012-09-04T14:30:21.328+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T14:30:30.107+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:31:59.732+02:00	READY	http://trac.seqan.de/changeset/12818	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:06.706+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:08.944+02:00	READY	http://trac.seqan.de/ticket/965	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:12.339+02:00	SCROLL	http://trac.seqan.de/ticket/965	130.133.52.211	-	0	63	1276	706
2012-09-04T14:32:14.514+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:19.500+02:00	READY	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=diff&version=36	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:21.927+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:23.624+02:00	READY	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=diff&version=37	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:27.574+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:27.968+02:00	READY	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=diff&version=37	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:29.161+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:02.223+02:00	BLUR	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:23.634+02:00	FOCUS	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:23.832+02:00	BLUR	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:26.078+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:33:25.951+02:00	READY	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:26.256+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:26.405+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:26.659+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:26.691+02:00	TYPING-search-e	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:26.783+02:00	TYPING-search-en	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:26.909+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:27.043+02:00	TYPING-search-endp	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:27.096+02:00	TYPING-search-endpo	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:27.658+02:00	TYPING-search-endpos	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:27.826+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.end_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:33:31.508+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.end_Position.html	130.133.52.211	-	0	96	975	706
2012-09-04T14:33:38.707+02:00	TYPING-search-endpos	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:38.800+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:02.249+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:02.939+02:00	TYPING-search-endpos	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:03.025+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:21.931+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:29.739+02:00	TYPING-search-endpos	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:29.850+02:00	TYPING-search-endpo	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:30.018+02:00	TYPING-search-endp	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:30.162+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:31.098+02:00	TYPING-search-en	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:31.298+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:31.490+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:32.754+02:00	TYPING-search-endV	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:32.865+02:00	TYPING-search-endVi	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:33.195+02:00	TYPING-search-endVie	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:34.538+02:00	TYPING-search-endView	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:34.674+02:00	TYPING-search-endVie	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:34.817+02:00	TYPING-search-endVi	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:35.339+02:00	TYPING-search-endV	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:36.930+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:36.994+02:00	TYPING-search-endc	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:37.170+02:00	TYPING-search-endcl	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:38.042+02:00	TYPING-search-endcli	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:38.329+02:00	TYPING-search-endcl	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:39.178+02:00	TYPING-search-endc	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:39.314+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:39.602+02:00	TYPING-search-e	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:39.475+02:00	TYPING-search-en	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.194+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.302+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.490+02:00	TYPING-search-cl	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.698+02:00	TYPING-search-cli	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.833+02:00	TYPING-search-clip	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.866+02:00	TYPING-search-clipp	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.946+02:00	TYPING-search-clippe	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:41.530+02:00	TYPING-search-clipped	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:41.626+02:00	TYPING-search-clippede	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:41.722+02:00	TYPING-search-clippeden	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:46.531+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:34:49.023+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:49.026+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:34:52.632+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	80	975	706
2012-09-04T14:34:56.480+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	262	975	706
2012-09-04T14:37:29.883+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	262	975	706
2012-09-04T14:37:34.970+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	262	975	706
2012-09-04T14:37:38.984+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_Begin_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:37:41.504+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_Begin_Position.html	130.133.52.211	-	0	262	975	706
2012-09-04T14:37:44.430+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:37:46.793+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:38:05.996+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:38:06.695+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:42:27.430+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:42:27.655+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:42:53.196+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:42:53.874+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:43:45.113+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:43:45.796+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:43:55.516+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:43:56.293+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:46:28.889+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:46:29.085+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:01.424+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:01.908+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:02.407+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:02.973+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:03.327+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:03.854+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:16.243+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:16.840+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:00:10.224+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:00:13.298+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:01:44.004+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:01:45.261+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:01:45.921+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:02:29.167+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:42:38.284+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:42:38.429+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:46:33.241+02:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-09-04T15:47:00.245+02:00	READY	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	0	1276	706
2012-09-04T15:47:03.076+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	739	1276	706
2012-09-04T15:47:03.835+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	739	1276	706
2012-09-04T15:47:04.688+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	2311	1276	706
2012-09-04T15:47:06.018+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	2311	1276	706
2012-09-04T15:47:12.423+02:00	READY	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	2311	1276	706
2012-09-04T15:47:15.876+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	-11	1276	706
2012-09-04T15:47:18.186+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	0	1276	706
2012-09-04T15:47:23.255+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:48:15.155+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:48:46.768+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:48:47.111+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:54:32.388+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:54:32.540+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:55:08.618+02:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-09-04T15:55:10.675+02:00	READY	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	0	1276	706
2012-09-04T15:55:10.761+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	0	1276	706
2012-09-04T15:55:11.669+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	2311	1276	706
2012-09-04T15:55:13.023+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	2311	1276	706
2012-09-04T15:55:14.424+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	0	1276	706
2012-09-04T15:55:17.874+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5643	1276	706
2012-09-04T15:55:21.825+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5643	1276	706
2012-09-04T15:55:23.831+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5720	1276	706
2012-09-04T15:55:27.310+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5720	1276	706
2012-09-04T15:59:26.501+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5720	1276	706
2012-09-04T15:59:32.426+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2049	1276	706
2012-09-04T15:59:34.912+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2339	1276	706
2012-09-04T15:59:40.548+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2970	1276	706
2012-09-04T15:59:40.658+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2970	1276	706
2012-09-04T16:00:41.485+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2970	1276	706
2012-09-04T16:00:47.551+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2471	1276	706
2012-09-04T16:00:48.789+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3031	1276	706
2012-09-04T16:00:49.853+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3031	1276	706
2012-09-04T16:00:50.156+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3031	1276	706
2012-09-04T16:00:51.514+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3102	1276	706
2012-09-04T16:00:52.438+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3102	1276	706
2012-09-04T16:00:52.610+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3102	1276	706
2012-09-04T16:00:57.301+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2021	1276	706
2012-09-04T16:01:15.606+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2371	1276	706
2012-09-04T16:01:25.596+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1797	1276	706
2012-09-04T16:01:38.255+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1582	1276	706
2012-09-04T16:02:35.995+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1271	1276	706
2012-09-04T16:02:36.703+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1271	1276	706
2012-09-04T16:02:38.776+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1271	1276	706
2012-09-04T16:02:40.047+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1311	1276	706
2012-09-04T16:02:40.415+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1311	1276	706
2012-09-04T16:02:44.348+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	604	1276	706
2012-09-04T16:02:50.254+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	811	1276	706
2012-09-04T16:02:53.619+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	989	1276	706
2012-09-04T16:03:00.230+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1092	1276	706
2012-09-04T16:03:35.086+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1981	1276	706
2012-09-04T16:03:35.773+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1981	1276	706
2012-09-04T16:03:36.278+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1981	1276	706
2012-09-04T16:03:38.714+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1981	1276	706
2012-09-04T16:03:39.060+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1981	1276	706
2012-09-04T16:03:43.685+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:03:44.041+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:03:44.552+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:03:44.698+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:03:45.961+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:04:09.320+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:04:13.403+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3080	1270	642
2012-09-04T16:04:17.960+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	1	3217	1270	642
2012-09-04T16:04:20.636+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:04:22.173+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:04:22.631+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:04:41.702+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:04:51.787+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:04:53.374+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:05:00.019+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:00.597+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:27.617+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:31.553+02:00	LINK-http://docs.seqan.de/seqan/dev/FUNCTION.read.html	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:32.187+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:32.285+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Fragment+_Store.html#read	130.133.52.211	-	0	0	180	572
2012-09-04T16:05:32.602+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:32.606+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:32.608+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:38.131+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	76	1270	526
2012-09-04T16:05:40.920+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:41.059+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:41.060+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:43.983+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3057	1270	526
2012-09-04T16:05:44.010+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3057	1270	526
2012-09-04T16:05:51.210+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3057	1270	526
2012-09-04T16:05:53.701+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3057	1270	526
2012-09-04T16:05:53.703+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:54.568+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:58.396+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:59.880+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:06:01.132+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:06:02.400+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:06:08.068+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:06:09.029+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3057	1270	526
2012-09-04T16:06:09.027+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:06:14.633+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6952	1270	526
2012-09-04T16:06:14.829+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6952	1270	526
2012-09-04T16:06:26.028+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6952	1270	526
2012-09-04T16:06:30.458+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2960	1270	526
2012-09-04T16:06:31.612+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2960	1270	526
2012-09-04T16:06:31.812+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2960	1270	526
2012-09-04T16:06:39.779+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3249	1270	526
2012-09-04T16:06:49.972+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3249	1270	526
2012-09-04T16:07:18.459+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3249	1270	526
2012-09-04T16:07:21.965+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3132	1270	526
2012-09-04T16:07:22.187+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3132	1270	526
2012-09-04T16:07:25.401+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3132	1270	526
2012-09-04T16:07:25.752+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3132	1270	526
2012-09-04T16:07:25.754+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:07:27.973+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:08:28.360+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:08:32.919+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:08:36.504+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:08:41.176+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:09:00.402+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:09:01.855+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:09:02.398+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3132	1270	526
2012-09-04T16:09:02.396+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:09:06.744+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3113	1270	526
2012-09-04T16:09:13.235+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3223	1270	526
2012-09-04T16:09:15.827+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:09:49.697+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:08.844+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:29.570+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:30.450+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:31.118+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:52.058+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:54.754+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:11:54.404+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:11:57.616+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3298	1270	526
2012-09-04T16:11:58.975+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3298	1270	526
2012-09-04T16:11:58.976+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:12:51.448+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:14:50.116+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:14:50.982+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:15:28.860+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:15:30.544+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:17:15.195+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:17:17.622+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:17:20.268+02:00	READY	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1270	526
2012-09-04T16:17:20.368+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1270	526
2012-09-04T16:17:20.485+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:20.699+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:20.808+02:00	TYPING-search-f	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:20.915+02:00	TYPING-search-fr	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:20.934+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	130.133.52.211	-	0	0	969	526
2012-09-04T16:17:21.010+02:00	TYPING-search-fra	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.140+02:00	TYPING-search-frag	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.161+02:00	TYPING-search-fragm	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.260+02:00	TYPING-search-fragme	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.276+02:00	TYPING-search-fragmen	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.376+02:00	TYPING-search-fragment	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.429+02:00	TYPING-search-fragments	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.577+02:00	TYPING-search-fragmentst	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.681+02:00	TYPING-search-fragmentstor	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.618+02:00	TYPING-search-fragmentsto	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:26.365+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	969	526
2012-09-04T16:17:27.823+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:28.002+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	0	969	526
2012-09-04T16:17:30.561+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:17:30.931+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:00.444+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:01.016+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:02.197+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:03.396+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:04.038+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:07.640+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	969	526
2012-09-04T16:18:09.996+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	969	526
2012-09-04T16:18:09.998+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3298	1270	526
2012-09-04T16:18:13.204+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3626	1270	526
2012-09-04T16:18:27.356+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3626	1270	526
2012-09-04T16:18:38.439+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3626	1270	526
2012-09-04T16:18:40.984+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	7364	1270	526
2012-09-04T16:18:43.049+02:00	READY	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/small.sam	130.133.52.211	-	0	0	1270	526
2012-09-04T16:18:46.117+02:00	RESIZE	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/small.sam	130.133.52.211	-	0	2592	1054	536
2012-09-04T16:18:47.930+02:00	SCROLL	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/small.sam	130.133.52.211	-	0	2592	1054	536
2012-09-04T16:18:48.930+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5890	1054	536
2012-09-04T16:19:02.635+02:00	READY	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:19:17.796+02:00	BLUR	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:21:18.653+02:00	FOCUS	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:21:28.046+02:00	BLUR	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:21:30.640+02:00	FOCUS	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:21:30.771+02:00	BLUR	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:22:52.368+02:00	FOCUS	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:22:53.157+02:00	BLUR	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:23:00.181+02:00	FOCUS	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:23:03.820+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	0	1054	536
2012-09-04T16:23:06.796+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1591	1054	662
2012-09-04T16:23:09.966+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2580	1054	662
2012-09-04T16:24:43.119+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2599	1054	662
2012-09-04T16:24:43.253+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2599	1054	662
2012-09-04T16:24:43.997+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2599	1054	662
2012-09-04T16:24:45.020+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2599	1054	662
2012-09-04T16:24:55.006+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2599	1054	662
2012-09-04T16:25:03.449+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2614	1054	662
2012-09-04T16:25:17.026+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2614	1054	662
2012-09-04T16:25:18.746+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2614	1054	662
2012-09-04T16:25:43.627+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:49.358+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:49.829+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:50.368+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:51.034+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:51.862+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:54.548+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:56.937+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:28:02.958+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:28:05.614+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2648	1054	662
2012-09-04T16:28:06.243+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2648	1054	662
2012-09-04T16:28:19.195+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2648	1054	662
2012-09-04T16:28:20.536+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2803	1054	662
2012-09-04T16:28:21.110+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2803	1054	662
2012-09-04T16:28:21.911+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2803	1054	662
2012-09-04T16:28:23.229+02:00	LINK-http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2757	1054	662
2012-09-04T16:28:23.765+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:24.032+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2757	1054	662
2012-09-04T16:28:24.059+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:28:24.173+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2757	1054	662
2012-09-04T16:28:24.178+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:24.180+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:33.221+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:35.161+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:36.284+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:47.009+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:48.230+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:53.722+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:54.715+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:30:36.686+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:30:38.489+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2757	1054	662
2012-09-04T16:30:38.485+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:30:40.229+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5687	1054	662
2012-09-04T16:30:42.235+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5764	1054	662
2012-09-04T16:30:43.177+02:00	LINK-http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5764	1054	662
2012-09-04T16:30:44.326+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5764	1054	662
2012-09-04T16:30:45.300+02:00	READY	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	662
2012-09-04T16:30:49.015+02:00	BLUR	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	662
2012-09-04T16:31:08.435+02:00	FOCUS	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	662
2012-09-04T16:31:29.321+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:31:30.013+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:31:36.630+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:31:47.212+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:32:26.874+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:32:29.000+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5764	1054	662
2012-09-04T16:32:28.999+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:32:32.659+02:00	READY	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	662
2012-09-04T16:32:34.368+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5764	1054	662
2012-09-04T16:32:39.060+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3220	1054	662
2012-09-04T16:34:12.098+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3225	1054	662
2012-09-04T16:34:13.245+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3225	1054	662
2012-09-04T16:34:13.373+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3225	1054	662
2012-09-04T16:34:15.184+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:34:15.320+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:34:23.784+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3225	1054	662
2012-09-04T16:34:29.951+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2905	1054	662
2012-09-04T16:34:34.954+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3452	1054	662
2012-09-04T16:34:36.859+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3452	1054	662
2012-09-04T16:34:38.749+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3452	1054	662
2012-09-04T16:34:41.014+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3452	1054	662
2012-09-04T16:35:11.808+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3452	1054	662
2012-09-04T16:35:19.903+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:20.721+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:23.615+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:25.161+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:25.820+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:26.216+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:26.678+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:28.803+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:41.083+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:50.654+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:53.169+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3490	1054	662
2012-09-04T16:35:59.702+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3185	1054	662
2012-09-04T16:36:01.205+02:00	LINK-http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2925	1054	662
2012-09-04T16:36:02.107+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2925	1054	662
2012-09-04T16:36:02.340+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:36:02.449+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:36:05.000+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2629	1054	662
2012-09-04T16:36:08.586+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2629	1054	662
2012-09-04T16:36:08.591+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:36:08.593+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:36:13.554+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:17.209+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:46.110+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:48.691+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:49.946+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:51.563+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:52.310+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:59.651+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:10.418+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:17.605+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:19.307+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:22.626+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:24.935+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:25.442+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:37.521+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:41.682+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	225
2012-09-04T16:37:43.187+02:00	RESIZE	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	225
2012-09-04T16:38:15.913+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:38:17.158+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:38:17.160+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2629	1054	662
2012-09-04T16:38:20.237+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3554	1054	662
2012-09-04T16:38:22.739+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3837	1054	662
2012-09-04T16:38:24.545+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3837	1054	662
2012-09-04T16:38:39.799+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3837	1054	662
2012-09-04T16:38:41.579+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3837	1054	662
2012-09-04T16:38:41.581+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:38:47.377+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	428	1054	662
2012-09-04T16:38:55.709+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	305	1054	662
2012-09-04T16:39:23.482+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	474	1054	662
2012-09-04T16:39:26.140+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	703	1054	662
2012-09-04T16:39:32.137+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	126	1054	662
2012-09-04T16:39:32.885+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	126	1054	662
2012-09-04T16:39:33.309+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	126	1054	662
2012-09-04T16:39:42.728+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:39:43.133+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Right.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:39:43.269+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Fragment+_Store.html#AnnotationTree%23goRight	130.133.52.211	-	0	0	180	662
2012-09-04T16:39:49.151+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Right.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:39:58.851+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Right.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:39:59.603+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:39:59.714+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:40:01.243+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Down.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:40:01.264+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Fragment+_Store.html#AnnotationTree%23goDown	130.133.52.211	-	0	0	180	662
2012-09-04T16:40:02.951+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Down.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:40:09.626+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Down.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:40:10.616+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:40:10.651+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:40:11.236+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:40:12.689+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:40:28.015+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:40:29.549+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:41:17.216+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:41:18.478+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:41:19.254+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:41:23.016+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:25.929+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	217	1054	662
2012-09-04T16:41:26.451+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:26.454+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:26.586+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:26.588+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:26.749+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:26.750+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:26.833+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:26.834+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:27.202+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:27.204+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:27.303+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:27.305+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:27.459+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:27.461+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:28.100+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:28.609+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:28.610+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:28.739+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:28.741+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:29.057+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:29.059+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:29.626+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:29.628+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:33.148+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	407	1054	662
2012-09-04T16:41:33.532+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	407	1054	662
2012-09-04T16:41:34.822+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:35.019+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Fragment+_Store.html#getAnnotation	130.133.52.211	-	0	0	180	662
2012-09-04T16:41:36.208+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:36.272+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	0	180	789
2012-09-04T16:41:38.761+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:41:39.459+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:41:55.914+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:41:57.119+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:42:05.885+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:42:06.359+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:10.760+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:12.995+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:14.281+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:14.731+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:15.317+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:15.885+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:16.597+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3837	1054	662
2012-09-04T16:43:16.595+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:27.070+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3563	1054	662
2012-09-04T16:43:33.396+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2635	1054	662
2012-09-04T16:43:51.201+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:06.326+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:37.173+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:37.915+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:40.476+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:42.537+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:42.539+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:44:46.522+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:44:46.524+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:46.604+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:44:47.336+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:47.961+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:48.063+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:48.815+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:49.218+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:49.361+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:49.448+02:00	TYPING-search-ca	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:49.792+02:00	TYPING-search-car	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:49.896+02:00	TYPING-search-carg	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:52.597+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	191	180	789
2012-09-04T16:44:52.884+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:44:53.373+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Miscellaneous.html#IntervalAndCargo	130.133.52.211	-	0	0	180	688
2012-09-04T16:44:56.537+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Interval_And_Cargo.html	130.133.52.211	-	0	55	1054	662
2012-09-04T16:44:57.396+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Interval_And_Cargo.html	130.133.52.211	-	0	55	1054	662
2012-09-04T16:44:59.633+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:00.376+02:00	READY	http://docs.seqan.de/seqan/dev/MEMFUNC_Interval_And_Cargo_23_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:00.453+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class.html#	130.133.52.211	-	0	0	180	662
2012-09-04T16:45:06.551+02:00	BLUR	http://docs.seqan.de/seqan/dev/MEMFUNC_Interval_And_Cargo_23_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:17.989+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MEMFUNC_Interval_And_Cargo_23_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:19.464+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:19.506+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Miscellaneous.html#IntervalAndCargo	130.133.52.211	-	0	0	180	688
2012-09-04T16:45:20.360+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:20.391+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:45:22.915+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:45:23.646+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:45:29.723+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:45:45.063+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	103	1054	662
2012-09-04T16:46:26.183+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	137	1054	662
2012-09-04T16:46:38.462+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	137	1054	662
2012-09-04T16:50:39.144+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	137	1054	662
2012-09-04T16:50:42.268+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:50:42.309+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Fragment+_Store.html#getAnnotation	130.133.52.211	-	0	0	180	662
2012-09-04T16:50:44.362+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:50:45.003+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:50:46.266+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:51:02.292+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:51:02.953+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:51:30.683+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:51:31.306+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:52:00.769+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:52:02.163+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:52:02.160+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:52:07.772+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	7	3949	1054	662
2012-09-04T16:52:09.381+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:11.267+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:32.849+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:42.935+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:47.262+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:47.954+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:54.562+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:55.442+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:56.148+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:58.785+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:59.668+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:53:00.865+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:53:02.463+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:53:02.770+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:53:31.327+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:53:35.778+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4461	1054	662
2012-09-04T16:53:36.181+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4461	1054	662
2012-09-04T16:53:38.849+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4695	1054	662
2012-09-04T16:53:40.168+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4695	1054	662
2012-09-04T16:53:40.693+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4695	1054	662
2012-09-04T16:53:41.169+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4695	1054	662
2012-09-04T16:53:51.366+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4695	1054	662
2012-09-04T16:53:54.987+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4726	1054	662
2012-09-04T16:53:55.505+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4726	1054	662
2012-09-04T16:53:58.201+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4726	1054	662
2012-09-04T16:54:00.645+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4882	1054	662
2012-09-04T16:54:01.001+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4882	1054	662
2012-09-04T16:54:27.130+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4882	1054	662
2012-09-04T16:54:37.360+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	7216	1054	662
2012-09-04T16:54:42.505+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6214	1054	662
2012-09-04T16:54:48.150+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5594	1054	662
2012-09-04T16:54:53.981+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5303	1054	662
2012-09-04T16:55:01.563+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5303	1054	662
2012-09-04T16:55:02.104+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5303	1054	662
2012-09-04T16:55:02.506+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5303	1054	662
2012-09-04T16:55:03.540+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5303	1054	662
2012-09-04T16:55:06.664+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4997	1054	662
2012-09-04T16:55:07.317+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4997	1054	662
2012-09-04T16:55:09.714+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5091	1054	662
2012-09-04T16:55:10.826+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5091	1054	662
2012-09-04T16:57:02.145+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5091	1054	662
2012-09-04T16:57:09.767+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4905	1054	662
2012-09-04T16:57:12.573+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4992	1054	662
2012-09-04T16:57:15.096+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:20.769+02:00	LINK-http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:21.282+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:21.628+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Miscellaneous.html#createIntervalTree	130.133.52.211	-	0	0	180	662
2012-09-04T16:57:21.869+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:21.873+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:21.875+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:53.235+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:53.236+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:53.819+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:53.822+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:57.314+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:59.428+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:59.915+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:59.918+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:01.083+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:01.085+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:02.634+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:02.636+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:02.795+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:02.797+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:58:07.282+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5123	1054	662
2012-09-04T16:58:09.001+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5123	1054	662
2012-09-04T17:04:27.445+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5123	1054	662
2012-09-04T17:04:28.136+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5123	1054	662
2012-09-04T17:04:30.208+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5123	1054	662
2012-09-04T17:06:26.551+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:26.684+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:31.784+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:32.178+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:33.606+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:35.199+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:38.882+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:42.115+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6073	1054	662
2012-09-04T17:06:43.711+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6073	1054	662
2012-09-04T17:06:46.409+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6217	1054	662
2012-09-04T17:06:50.350+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6289	1054	662
2012-09-04T17:06:50.771+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6289	1054	662
2012-09-04T17:06:55.652+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6289	1054	662
2012-09-04T17:06:59.936+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6492	1054	662
2012-09-04T17:07:00.138+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6492	1054	662
2012-09-04T17:07:09.059+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6492	1054	662
2012-09-04T17:07:11.245+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6492	1054	662
2012-09-04T17:07:13.720+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6648	1054	662
2012-09-04T17:07:13.800+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6648	1054	662
2012-09-04T17:07:30.173+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6648	1054	662
2012-09-04T17:07:34.092+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6608	1054	662
2012-09-04T17:07:59.276+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6608	1054	662
2012-09-04T17:08:00.144+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6608	1054	662
2012-09-04T17:08:04.428+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6608	1054	662
2012-09-04T17:08:08.937+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6720	1054	662
2012-09-04T17:08:15.099+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6837	1054	662
2012-09-04T17:08:18.594+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6837	1054	662
2012-09-04T17:08:24.505+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6837	1054	662
2012-09-04T17:08:27.223+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6838	1054	662
2012-09-04T17:08:37.160+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	7028	1054	662
2012-09-04T17:08:53.055+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6757	1054	662
2012-09-04T17:08:55.216+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6686	1054	662
2012-09-04T17:09:04.859+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6750	1054	662
2012-09-04T17:09:17.043+02:00	LINK-http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6750	1054	662
2012-09-04T17:09:18.193+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	0	1054	662
2012-09-04T17:09:18.285+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Miscellaneous.html#findIntervals	130.133.52.211	-	0	0	180	662
2012-09-04T17:09:23.078+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6750	1054	662
2012-09-04T17:09:23.082+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	0	1054	662
2012-09-04T17:09:23.084+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:00.882+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:10:05.525+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6750	1054	662
2012-09-04T17:10:05.522+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:10:10.346+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:11.725+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:16.424+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:16.752+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(counters, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:16.806+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(r, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:16.872+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(re, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:16.983+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(rea, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.080+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(read, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.183+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(reads, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.287+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(reads, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.455+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsP, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.502+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPe, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:18.096+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerG, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:18.176+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerGe, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:18.224+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerGen, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.942+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPer, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.646+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPer, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:19.631+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerGene, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:20.218+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:20.019+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:19.823+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerGene, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:20.008+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerGene, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:23.396+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.175+02:00	TYPING-comment-	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.248+02:00	TYPING-comment-s	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.327+02:00	TYPING-comment-sm	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.408+02:00	TYPING-comment-sma	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.519+02:00	TYPING-comment-smal	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.567+02:00	TYPING-comment-small	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.639+02:00	TYPING-comment-small 	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.695+02:00	TYPING-comment-small f	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.743+02:00	TYPING-comment-small fi	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:28.648+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:43.529+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4598	1054	662
2012-09-04T17:10:52.106+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	3892	1054	662
2012-09-04T17:10:53.167+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	3892	1054	662
2012-09-04T17:10:56.278+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4687	1054	662
2012-09-04T17:10:57.857+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4750	1054	662
2012-09-04T17:10:58.844+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4750	1054	662
2012-09-04T17:11:03.983+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4588	1054	662
2012-09-04T17:11:11.011+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4512	1054	662
2012-09-04T17:11:13.979+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5053	1054	662
2012-09-04T17:11:16.579+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5096	1054	662
2012-09-04T17:11:17.726+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5246	1054	662
2012-09-04T17:11:18.997+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5246	1054	662
2012-09-04T17:11:19.302+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5246	1054	662
2012-09-04T17:11:33.604+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5293	1054	662
2012-09-04T17:11:39.669+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5427	1054	662
2012-09-04T17:11:46.148+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5827	1054	662
2012-09-04T17:11:48.602+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5344	1054	662
2012-09-04T17:11:50.188+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5344	1054	662
2012-09-04T17:12:19.890+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5344	1054	662
2012-09-04T17:12:32.981+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4511	1054	662
2012-09-04T17:13:05.415+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5155	1054	662
2012-09-04T17:13:19.410+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5623	1054	662
2012-09-04T17:13:24.488+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5717	1054	662
2012-09-04T17:13:29.655+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5192	1054	662
2012-09-04T17:13:42.548+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4971	1054	662
2012-09-04T17:13:44.763+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4971	1054	662
2012-09-04T17:13:45.772+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4971	1054	662
2012-09-04T17:13:52.782+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5273	1054	662
2012-09-04T17:14:19.535+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5448	1054	662
2012-09-04T17:14:20.509+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5448	1054	662
2012-09-04T17:14:22.266+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5448	1054	662
2012-09-04T17:14:25.618+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4545	1054	662
2012-09-04T17:14:30.455+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4545	1054	662
2012-09-04T17:15:41.686+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4545	1054	662
2012-09-04T17:15:45.787+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4769	1054	662
2012-09-04T17:15:48.511+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4861	1054	662
2012-09-04T17:15:52.562+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4473	1054	662
2012-09-04T17:15:58.587+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4473	1054	662
2012-09-04T17:16:20.986+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4473	1054	662
2012-09-04T17:16:21.672+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4473	1054	662
2012-09-04T17:16:58.079+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4473	1054	662
2012-09-04T17:17:01.549+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4227	1054	662
2012-09-04T17:17:03.316+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4227	1054	662
2012-09-04T17:17:03.319+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:05.294+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:07.141+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:08.678+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:11.348+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:14.754+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:38.031+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:38.719+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:39.239+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:39.683+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:40.094+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:41.786+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:46.027+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:47.324+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:20.907+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:22.650+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:23.035+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:24.250+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:42.450+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:45.921+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:47.210+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:19:50.667+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:19:52.155+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:19:52.159+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	753	662
2012-09-04T17:19:53.672+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	753	662
2012-09-04T17:19:53.675+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	662
2012-09-04T17:19:53.679+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1054	662
2012-09-04T17:19:54.681+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	753	662
2012-09-04T17:19:54.682+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4227	1054	662
2012-09-04T17:19:59.934+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5367	1054	662
2012-09-04T17:20:02.351+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:28.946+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:30.747+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:32.071+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:34.490+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:35.238+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:40.304+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:50.979+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1034	645
2012-09-04T17:20:54.131+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5751	1034	645
2012-09-04T17:21:12.081+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5732	1034	645
2012-09-04T17:21:28.049+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:30.050+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:30.733+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:32.379+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:33.182+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:34.442+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:35.526+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:36.593+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:37.171+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:42.432+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6582	1034	645
2012-09-04T17:21:44.048+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6582	1034	645
2012-09-04T17:21:47.324+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:21:47.394+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:21:52.893+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:21:53.569+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:21:56.866+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:22:00.690+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:22:02.929+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:22:03.921+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:22:05.865+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6906	1034	645
2012-09-04T17:22:08.285+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6936	1034	645
2012-09-04T17:22:29.820+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6892	1034	645
2012-09-04T17:22:33.423+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7549	1034	645
2012-09-04T17:22:37.793+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7488	1034	645
2012-09-04T17:22:41.823+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:22:44.614+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:26:51.408+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:26:53.968+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:26:57.256+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:26:58.323+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:27:50.983+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:27:51.928+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:27:58.157+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:27:58.717+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:31:50.042+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:31:50.263+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:47:56.463+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	733	645
2012-09-04T17:47:56.985+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1034	645
2012-09-04T17:47:57.406+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1034	645
2012-09-04T17:47:57.632+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1034	645
2012-09-04T17:47:57.814+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-05T12:58:43.204+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T12:58:50.225+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	662
2012-09-05T12:58:50.451+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	662
2012-09-05T12:58:51.172+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	2333	1276	662
2012-09-05T12:58:52.469+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	2333	1276	662
2012-09-05T12:58:54.487+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	0	1276	662
2012-09-05T12:59:01.058+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	3644	1276	662
2012-09-05T12:59:03.511+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	3763	1276	662
2012-09-05T12:59:07.426+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	5438	1276	662
2012-09-05T12:59:10.778+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	5900	1276	662
2012-09-05T12:59:17.713+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4732	1276	662
2012-09-05T12:59:20.331+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4986	1276	662
2012-09-05T13:01:08.458+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4986	1276	662
2012-09-05T13:04:14.807+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4986	1276	662
2012-09-05T13:04:15.034+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4986	1276	662
2012-09-05T15:00:59.489+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:01.413+02:00	TYPING-proj-search-	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:01.516+02:00	TYPING-proj-search-c	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:01.643+02:00	TYPING-proj-search-co	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:01.834+02:00	TYPING-proj-search-com	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:01.882+02:00	TYPING-proj-search-coma	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.019+02:00	TYPING-proj-search-coman	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.131+02:00	TYPING-proj-search-comand	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.523+02:00	TYPING-proj-search-comandl	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.570+02:00	TYPING-proj-search-comandli	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.667+02:00	TYPING-proj-search-comandlin	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.827+02:00	TYPING-proj-search-comandline	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.882+02:00	TYPING-proj-search-comandlinep	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.978+02:00	TYPING-proj-search-comandlinepa	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:03.107+02:00	TYPING-proj-search-comandlinepar	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:03.235+02:00	TYPING-proj-search-comandlinepars	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:03.307+02:00	TYPING-proj-search-comandlineparse	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:03.314+02:00	TYPING-proj-search-comandlineparser	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:04.254+02:00	READY	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:09.452+02:00	TYPING-q-comandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:09.643+02:00	TYPING-q-comandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:09.691+02:00	TYPING-q-commandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:10.739+02:00	READY	http://trac.seqan.de/search?milestone=on&ticket=on&q=commandlineparser&wiki=on&changeset=on&noquickjump=1	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:15.514+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:15.749+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:19.360+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:19.368+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping#Task1:UsetheCommandLineParser	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:21.374+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping#Task1:UsetheCommandLineParser	87.77.216.245	-	0	2491	1276	662
2012-09-05T15:01:26.578+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping#Task1:UsetheCommandLineParser	87.77.216.245	-	0	2491	1276	662
2012-09-05T15:01:33.115+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping#Task1:UsetheCommandLineParser	87.77.216.245	-	0	2719	1276	662
2012-09-05T15:01:39.669+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:43.373+02:00	READY	http://trac.seqan.de/search?milestone=on&ticket=on&q=commandlineparser&wiki=on&changeset=on&noquickjump=1	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:48.443+02:00	READY	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:49.198+02:00	TYPING-q-comandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:49.334+02:00	BLUR	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:51.382+02:00	FOCUS	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:51.669+02:00	TYPING-q-comandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:51.812+02:00	BLUR	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:52.671+02:00	FOCUS	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:52.797+02:00	TYPING-q-comandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:52.933+02:00	BLUR	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:55.050+02:00	READY	http://docs.seqan.de/seqan/dev2/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:55.150+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:55.352+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	975	662
2012-09-05T15:01:55.386+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:55.549+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:55.588+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:55.798+02:00	TYPING-search-co	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:55.904+02:00	TYPING-search-com	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:55.982+02:00	TYPING-search-comm	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.081+02:00	TYPING-search-comma	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.099+02:00	TYPING-search-comman	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.198+02:00	TYPING-search-command	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.333+02:00	TYPING-search-commandl	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.365+02:00	TYPING-search-commandli	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.428+02:00	TYPING-search-commandlin	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.837+02:00	TYPING-search-commandline	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.860+02:00	TYPING-search-commandline	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:57.116+02:00	TYPING-search-commandline	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:57.620+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:57.717+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:59.065+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:59.910+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.045+02:00	TYPING-search-co	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.172+02:00	TYPING-search-com	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.229+02:00	TYPING-search-comm	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.306+02:00	TYPING-search-comma	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.390+02:00	TYPING-search-comman	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.861+02:00	TYPING-search-command	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:16.729+02:00	TYPING-search-commandl	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:16.833+02:00	TYPING-search-command	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:17.018+02:00	TYPING-search-comman	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:21.322+02:00	TYPING-search-comma	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:21.473+02:00	TYPING-search-comm	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:21.620+02:00	TYPING-search-com	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:21.744+02:00	TYPING-search-co	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:21.874+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:22.002+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:22.161+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:22.253+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:22.319+02:00	TYPING-search-cm	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:22.423+02:00	TYPING-search-cmd	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:24.617+02:00	TYPING-search-cmdp	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:25.530+02:00	TYPING-search-cmd	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:25.674+02:00	TYPING-search-cm	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:25.802+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:25.929+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:50.906+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:51.820+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:03:58.388+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:08:31.949+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:08:32.082+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:08:32.103+02:00	FOCUS	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:08:33.001+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4986	1276	662
2012-09-05T23:40:16.923+02:00	READY	http://docs.seqan.de/seqan/dev2/	93.219.59.250	-	0	0	1276	706
2012-09-05T23:40:17.210+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:17.228+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:40:17.748+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:17.894+02:00	TYPING-search-g	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:17.942+02:00	TYPING-search-ge	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:18.453+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:18.790+02:00	TYPING-search-getu	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:18.891+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:19.021+02:00	TYPING-search-getq	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:19.053+02:00	TYPING-search-getqu	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:20.824+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:40:24.143+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	93.219.59.250	-	0	32	975	706
2012-09-05T23:40:26.380+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	93.219.59.250	-	0	42	975	706
2012-09-05T23:40:27.902+02:00	TYPING-search-getqua	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:27.941+02:00	TYPING-search-getqua	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:30.879+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:31.083+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:40:39.250+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:58:45.956+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:58:46.129+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:58:52.323+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:58:53.128+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:59:00.121+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:59:00.828+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-06T07:39:25.553+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.61.86	-	0	0	975	706
2012-09-06T07:54:09.214+02:00	READY	http://docs.seqan.de/seqan/dev2/	93.219.61.86	-	0	0	1276	706
2012-09-06T07:54:09.312+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:09.364+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	93.219.61.86	-	0	0	975	706
2012-09-06T07:54:09.601+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:09.736+02:00	TYPING-search-s	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:09.800+02:00	TYPING-search-se	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:10.686+02:00	TYPING-search-seq	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:10.804+02:00	TYPING-search-seqe	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:10.878+02:00	TYPING-search-seqen	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:10.934+02:00	TYPING-search-seqenc	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:11.118+02:00	TYPING-search-seqence	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:11.846+02:00	TYPING-search-seqences	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.198+02:00	TYPING-search-seqencest	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.245+02:00	TYPING-search-seqencestr	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.350+02:00	TYPING-search-seqencestre	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.446+02:00	TYPING-search-seqencestrea	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.702+02:00	TYPING-search-seqencestream	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.919+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Sequence_Stream_23write_All.html	93.219.61.86	-	0	0	975	706
2012-09-06T07:54:15.949+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Sequence_Stream.html	93.219.61.86	-	0	0	975	706
2012-09-06T07:54:22.479+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Sequence_Stream.html	93.219.61.86	-	0	1121	975	706
2012-09-06T07:54:32.099+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Sequence_Stream.html	93.219.61.86	-	0	1099	975	706
2012-09-06T07:54:33.824+02:00	TYPING-search-seqencestream	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:33.942+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:35.497+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:36.815+02:00	TYPING-search-seqencestream	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:36.951+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:56:41.919+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:56:42.444+02:00	TYPING-search-seqencestream	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:56:43.412+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:59:40.073+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:59:40.196+02:00	TYPING-search-seqencestream	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:59:40.267+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T08:38:40.756+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T08:38:41.657+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T08:38:41.660+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Sequence_Stream.html	93.219.61.86	-	0	1099	975	706
2012-09-06T13:47:46.434+02:00	READY	http://docs.seqan.de/seqan/dev2/	87.77.216.245	-	0	0	1276	706
2012-09-06T13:47:46.462+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:46.488+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	975	706
2012-09-06T13:47:46.902+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:46.955+02:00	TYPING-search-s	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:47.043+02:00	TYPING-search-sa	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:47.190+02:00	TYPING-search-sam	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:47.306+02:00	TYPING-search-samt	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:49.330+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Is_Same_Type.html	87.77.216.245	-	0	0	975	706
2012-09-06T13:47:56.956+02:00	TYPING-search-samty	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:57.143+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:59.063+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	975	706
2012-09-06T13:47:59.085+02:00	READY	http://docs.seqan.de/seqan/dev2/	87.77.216.245	-	0	0	1276	706
2012-09-06T13:47:59.101+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:00.140+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:00.147+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:00.228+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:00.230+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:03.014+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:03.015+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:04.012+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:04.075+02:00	TYPING-search-v	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:04.188+02:00	TYPING-search-va	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:04.427+02:00	TYPING-search-val	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:05.340+02:00	TYPING-search-vale	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:05.580+02:00	TYPING-search-val	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:05.612+02:00	TYPING-search-valu	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.195+02:00	TYPING-search-value	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.341+02:00	TYPING-search-valu	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.477+02:00	TYPING-search-val	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.627+02:00	TYPING-search-va	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.771+02:00	TYPING-search-v	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.916+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:07.539+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:09.767+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:37.424+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:38.467+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:38.683+02:00	TYPING-search-b	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:38.834+02:00	TYPING-search-bl	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:38.910+02:00	TYPING-search-blo	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:39.031+02:00	TYPING-search-bloc	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:39.082+02:00	TYPING-search-block	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:39.386+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:39.547+02:00	TYPING-search-blocksi	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:39.923+02:00	TYPING-search-blocksie	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.203+02:00	TYPING-search-blocksi	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.538+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.553+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.643+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.730+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.851+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.949+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:47.402+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:47.954+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.020+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.307+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.467+02:00	TYPING-search-b	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.602+02:00	TYPING-search-bl	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.718+02:00	TYPING-search-blo	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.737+02:00	TYPING-search-bloc	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:50.090+02:00	TYPING-search-block	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:50.154+02:00	TYPING-search-block	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:50.219+02:00	TYPING-search-block	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:50.346+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:50.495+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:50:27.502+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T15:17:04.508+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T15:19:15.613+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T15:19:16.128+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T15:19:16.211+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/	93.219.61.86	-	0	0	1276	706
2012-09-06T15:19:16.296+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706

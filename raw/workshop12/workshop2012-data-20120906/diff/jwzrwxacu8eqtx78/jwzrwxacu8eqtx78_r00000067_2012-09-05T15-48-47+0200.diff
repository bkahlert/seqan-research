diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /Users/jtr/Develop/c/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/jwzrwxacu8eqtx78_stats.txt -x /Users/jtr/Develop/c/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata/jwzrwxacu8eqtx78_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /Users/jtr/Develop/c/SeqAn/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /Users/jtr/Develop/c/SeqAn/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /Users/jtr/Develop/c/SeqAn/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /Users/jtr/Develop/c/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /Users/jtr/Develop/c/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/jtr/apps/workshop_app/workshop_app.cpp ./sandbox/jtr/apps/workshop_app/workshop_app.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/jtr/apps/workshop_app/workshop_app.cpp	2012-09-05 13:59:32.000000000 +0200
+++ ./sandbox/jtr/apps/workshop_app/workshop_app.cpp	2012-09-05 15:48:39.000000000 +0200
@@ -326,72 +326,134 @@
 // 
 
 
+// #include <iostream>
+// #include <seqan/seq_io.h>
+// #include <seqan/journaled_set.h>
+// 
+// using namespace seqan;
+// template <typename TString, typename TStream, typename TSpec>
+// inline int
+// loadAndJoin(StringSet<TString, Owner<JournaledSet> > & journalSet,
+//             TStream & stream,
+//             JoinConfig<TSpec> const & joinConfig)
+// {
+//     typedef typename Host<TString>::Type THost;
+//     // Define the RecordReader.
+//     RecordReader<std::ifstream, SinglePass<> > reader(stream);
+//     // [A]
+//     clear(journalSet);
+//     // Construct the temporary buffers for the read id and sequence.
+//     String<char> tempSeqId;
+//     THost tempSeq;
+//     // No sequences in the fasta file!
+//     if (atEnd(reader))
+//     {
+//         std::cerr << "Empty FASTA file." << std::endl;
+//         return -1;
+//     }
+//     // First read sequence for reference sequence.
+//     if (readRecord(tempSeqId, tempSeq, reader, Fasta()) != 0)
+//     {
+//         std::cerr << "ERROR reading FASTA." << std::endl;
+//         return 1;
+//     }
+//     // [B]
+//     createGlobalReference(journalSet, tempSeq);  // When using create we copy the reference instead of storing a pointer.
+// 
+//     // Read remaining sequences.
+//     while (!atEnd(reader))
+//     {
+//         if (readRecord(tempSeqId, tempSeq, reader, Fasta()) != 0)
+//         {
+//             std::cerr << "ERROR reading FASTA." << std::endl;
+//             return 1;
+//         }
+//         // [C]
+//         appendValue(journalSet, tempSeq);  // First we append the sequence to the set.
+//         join(journalSet, length(journalSet) - 1, joinConfig); // Second we join it to the set.
+//     }
+//     return 0;
+// }
+// int main()
+// {
+//     // Definition of the used types.
+//     typedef String<Dna,Alloc<> > TSequence;
+//     typedef String<Dna,Journaled<Alloc<>,SortedArray,Alloc<> > > TJournal;
+//     typedef StringSet< TJournal, Owner<JournaledSet> > TJournaledSet;
+//     // Open the stream to the file containing the sequences.
+//     String<char> seqDatabasePath = "/path/to/your/fasta/file/sequences.fasta";
+//     std::ifstream databaseFile(toCString(seqDatabasePath), std::ios_base::in);
+//     if(!databaseFile.good())
+//     {
+//         std::cerr << "Cannot open file <" << seqDatabasePath << ">!" << std::endl;
+//     }
+//     // Reading each sequence and journal them.
+//     TJournaledSet journalSet;
+//     JoinConfig<GlobalAlign<JournaledCompact> > joinConfig;
+//     loadAndJoin(journalSet, databaseFile, joinConfig);
+//     databaseFile.close();
+//     return 0;
+// }
+
+
+
+// ==========================================================================
+//                                mini_bowtie
+// ==========================================================================
+// Copyright (c) 2006-2012, Knut Reinert, FU Berlin
+// All rights reserved.
+
+
 #include <iostream>
-#include <seqan/seq_io.h>
-#include <seqan/journaled_set.h>
+#include <seqan/basic.h>
+#include <seqan/sequence.h>
+#include <seqan/file.h>
+#include <seqan/index.h>
+#include <seqan/fm_index.h>
+#include <seqan/store.h>
 
 using namespace seqan;
-template <typename TString, typename TStream, typename TSpec>
-inline int
-loadAndJoin(StringSet<TString, Owner<JournaledSet> > & journalSet,
-            TStream & stream,
-            JoinConfig<TSpec> const & joinConfig)
-{
-    typedef typename Host<TString>::Type THost;
-    // Define the RecordReader.
-    RecordReader<std::ifstream, SinglePass<> > reader(stream);
-    // [A]
-    clear(journalSet);
-    // Construct the temporary buffers for the read id and sequence.
-    String<char> tempSeqId;
-    THost tempSeq;
-    // No sequences in the fasta file!
-    if (atEnd(reader))
-    {
-        std::cerr << "Empty FASTA file." << std::endl;
-        return -1;
-    }
-    // First read sequence for reference sequence.
-    if (readRecord(tempSeqId, tempSeq, reader, Fasta()) != 0)
-    {
-        std::cerr << "ERROR reading FASTA." << std::endl;
-        return 1;
-    }
-    // [B]
-    createGlobalReference(journalSet, tempSeq);  // When using create we copy the reference instead of storing a pointer.
 
-    // Read remaining sequences.
-    while (!atEnd(reader))
-    {
-        if (readRecord(tempSeqId, tempSeq, reader, Fasta()) != 0)
-        {
-            std::cerr << "ERROR reading FASTA." << std::endl;
-            return 1;
-        }
-        // [C]
-        appendValue(journalSet, tempSeq);  // First we append the sequence to the set.
-        join(journalSet, length(journalSet) - 1, joinConfig); // Second we join it to the set.
-    }
-    return 0;
-}
-int main()
+void search() {};
+
+int main(int argc, char *argv[]) 
 {
-    // Definition of the used types.
-    typedef String<Dna,Alloc<> > TSequence;
-    typedef String<Dna,Journaled<Alloc<>,SortedArray,Alloc<> > > TJournal;
-    typedef StringSet< TJournal, Owner<JournaledSet> > TJournaledSet;
-    // Open the stream to the file containing the sequences.
-    String<char> seqDatabasePath = "/path/to/your/fasta/file/sequences.fasta";
-    std::ifstream databaseFile(toCString(seqDatabasePath), std::ios_base::in);
-    if(!databaseFile.good())
-    {
-        std::cerr << "Cannot open file <" << seqDatabasePath << ">!" << std::endl;
+    // type definitions
+    typedef String<Dna5> TString;
+    typedef StringSet<TString> TStringSet;
+    typedef Index<StringSet<TString>, FmIndex<> > TIndex;
+    typedef Iterator<TIndex, TopDown<ParentLinks<> > >::Type TIter;
+
+    // reversing the sequences for backward search
+    // backward search
+    // reading the command line arguments
+    // declaration and initialization of the fragment store
+    // forward search
+    // combining the contigs of the reference into one string set
+    appendValue(text, fragStore.contigStore[i].seq);
+    std::cerr << "Invalid number of arguments." << std::endl
+                  << "USAGE: mini_bowtie GENOME.fasta READS.fasta OUT.sam" << std::endl;
     }
-    // Reading each sequence and journal them.
-    TJournaledSet journalSet;
-    JoinConfig<GlobalAlign<JournaledCompact> > joinConfig;
-    loadAndJoin(journalSet, databaseFile, joinConfig);
-    databaseFile.close();
+    if (argc < 3) {
+    if (!loadContigs(fragStore, argv[1])) return 1;
+    if (!loadReads(fragStore, argv[2])) return 1;
+    clear(fmIndex);
+    clear(fmIndex);
+    StringSet<TString> text;
+    for (unsigned i = 0; i < length(fragStore.contigStore); ++i)   
+    fmIndex = TIndex(text);
+    TIndex fmIndex(text);
+    TIter it(fmIndex);
+    search();
+    search();
+    clear(it);
+    clear(it);
+    reverse(text);
+    reverse(fragStore.readSeqStore);
+    it = TIter(fmIndex);
+    FragmentStore<> fragStore;
     return 0;
+    return 1;
 }
 
+

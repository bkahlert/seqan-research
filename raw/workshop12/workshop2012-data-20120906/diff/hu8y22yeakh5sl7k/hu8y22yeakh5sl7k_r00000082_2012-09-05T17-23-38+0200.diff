diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/hu8y22yeakh5sl7k_stats.txt -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata/hu8y22yeakh5sl7k_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/bowtie_tutorial/bowtie_tutorial.cpp ./sandbox/my_sandbox/apps/bowtie_tutorial/bowtie_tutorial.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/bowtie_tutorial/bowtie_tutorial.cpp	2012-09-05 17:02:15.000000000 +0200
+++ ./sandbox/my_sandbox/apps/bowtie_tutorial/bowtie_tutorial.cpp	2012-09-05 17:23:34.182858838 +0200
@@ -32,6 +32,7 @@
 // Author: Your Name <your.email@example.net>
 // ==========================================================================
 
+
 #include <iostream>
 #include <seqan/basic.h>
 #include <seqan/sequence.h>
@@ -41,89 +42,109 @@
 #include <seqan/store.h>
 
 using namespace seqan;
-
-
-template <typename TIter, typename TStringSet>
-void search(TIter & it, TStringSet const & pattern){
-		
-	typedef typename Iterator<TStringSet const, Standard>::Type TPatternIter;
+struct ForwardTag {};
+struct ReverseTag {};
+template <typename TStore, typename TIter, typename TPatternIt>
+void addMatchToStore(TStore & fragStore, TPatternIt const & patternIt, TIter const & localIt, ForwardTag)
+{
+    typedef FragmentStore<>::TAlignedReadStore TAlignedReadStore;
+    typedef Value<TAlignedReadStore>::Type TAlignedRead;
+    for (unsigned num = 0; num < countOccurrences(localIt); ++num)
+    {
+        unsigned pos = getOccurrences(localIt)[num].i2;
+        TAlignedRead match(length(fragStore.alignedReadStore), position(patternIt), getOccurrences(localIt)[num].i1 ,
+            pos,  pos + length(value(patternIt)));
+        appendValue(fragStore.alignedReadStore, match);
+    }
+}
+template <typename TStore, typename TIter, typename TPatternIt>
+void addMatchToStore(TStore & fragStore, TPatternIt const & patternIt, TIter const & localIt, ReverseTag)
+{
+    typedef FragmentStore<>::TAlignedReadStore TAlignedReadStore;
+    typedef Value<TAlignedReadStore>::Type TAlignedRead;
+    for (unsigned num = 0; num < countOccurrences(localIt); ++num)
+    {
+        unsigned contigLength = length(fragStore.contigStore[getOccurrences(localIt)[num].i1].seq);
+        unsigned pos = contigLength - getOccurrences(localIt)[num].i2 - length(value(patternIt));
+        TAlignedRead match(length(fragStore.alignedReadStore), position(patternIt), getOccurrences(localIt)[num].i1,
+            pos, pos + length(value(patternIt)));
+        appendValue(fragStore.alignedReadStore, match);
+    }
+}
+template <typename TIter, typename TStringSet, typename TStore, typename DirectionTag>
+void search(TIter & it, TStringSet const & pattern, TStore & fragStore, DirectionTag /*tag*/)
+{
+    typedef typename Iterator<TStringSet const, Standard>::Type TPatternIter;
     for (TPatternIter patternIt = begin(pattern, Standard()); patternIt != end(pattern, Standard()); ++patternIt)
     {
+        // exact search on pattern half
         unsigned startApproxSearch = length(value(patternIt)) / 2;
         if (goDown(it, infix(value(patternIt), startApproxSearch + 1, length(value(patternIt)))))
         {
             for (unsigned i = startApproxSearch; ; --i)
             {
+                Dna character = getValue(patternIt)[i];
                 for (Dna5 c = MinValue<Dna>::VALUE; c < +ValueSize<Dna>::VALUE; ++c)
                 {
-                    TIter localIt = it;
-                    if (goDown(localIt, c))
+                    if (c != character)
                     {
-                        if (goDown(localIt, infix(value(patternIt), 0, i)))
-                        {
-                            // HIT
+                        TIter localIt = it;
+                        if (goDown(localIt, c)){
+                            if (goDown(localIt, infix(value(patternIt), 0, i)))
+                            {
+                                addMatchToStore(fragStore, patternIt, localIt, DirectionTag());
+                            }
                         }
                     }
                 }
-                if (i == 0 || !goDown(it, getValue(patternIt)[i]))
+                if (!goDown(it, character))
+                    break;
+                else if (i == 0)
                 {
+                    if(IsSameType<DirectionTag, ForwardTag>::VALUE)
+                        addMatchToStore(fragStore, patternIt, it, DirectionTag());
                     break;
                 }
             }
         }
         goRoot(it);
     }
-}	
-
-int main(int argc, char *argv[]) 
+}
+int main(int argc, char *argv[])
 {
-    // type definitions
     typedef String<Dna5> TString;
-    typedef StringSet<TString> TStringSet;
+    typedef StringSet<String<Dna5> > TStringSet;
     typedef Index<StringSet<TString>, FMIndex<> > TIndex;
-    typedef Iterator<TIndex, TopDown<ParentLinks<> > >::Type TIter;
-    
-	// reading the command line arguments
-	if (argc < 3) {
-		std::cerr << "Invalid number of arguments." << std::endl
-                  << "USAGE: mini_bowtie GENOME.fasta READS.fasta OUT.sam" << std::endl;
-		 return 1;
-	}
-
-	// declaration and initialization of the fragment store
-	FragmentStore<> fragStore;
-	if (!loadContigs(fragStore, argv[1])) return 1;
-	if (!loadReads(fragStore, argv[2])) return 1;
-	
-	// combining the contigs of the reference into one string set
-	StringSet<TString> text;
-	for (unsigned i = 0; i < length(fragStore.contigStore); ++i)
-        	appendValue(text, fragStore.contigStore[i].seq);
-	
-	TIndex fmIndex(text);
-	TIter it(fmIndex);
-
-        // forward search
-	search(it,fragStore.readSeqStore);
-    	clear(it);
-	clear(fmIndex);
-	// reversing the sequences for backward search
-	reverse(fragStore.readSeqStore);
-	reverse(text);
-
-	fmIndex = TIndex(text);
-	it = TIter(fmIndex);
-	// backward search
-	search(it,fragStore.readSeqStore);
-        clear(it);
-	clear(fmIndex);
-
-	reverse(fragStore.readSeqStore);
-	reverse(text);
-
+    typedef Iterator<TIndex, TopDown<> >::Type TIter;
+    // 0) Handle command line arguments.
+    if (argc < 3) {
+        std::cerr << "Invalid number of arguments." << std::endl
+                  << "USAGE: minimapper GENOME.fasta READS.fasta OUT.sam" << std::endl;
+        return 1;
+    }
+    // 1) Load contigs and reads.
+    FragmentStore<> fragStore;
+    if (!loadContigs(fragStore, argv[1])) return 1;
+    if (!loadReads(fragStore, argv[2])) return 1;
+    StringSet<TString> text;
+    for (unsigned i = 0; i < length(fragStore.contigStore); ++i)
+        appendValue(text, fragStore.contigStore[i].seq);
+    TIndex fmIndex(text);
+    TIter it(fmIndex);
+    search(it, fragStore.readSeqStore, fragStore, ForwardTag());
+    clear(fmIndex);
+    clear(it);
+    reverse(text);
+    reverse(fragStore.readSeqStore);
+    fmIndex = TIndex(text);
+    it = TIter(fmIndex);
+    search(it, fragStore.readSeqStore, fragStore, ReverseTag());
+    clear(fmIndex);
+    clear(it);
+    reverse(text);
+    reverse(fragStore.readSeqStore);
+    std::ofstream samFile(argv[3], std::ios_base::out);
+    write(samFile, fragStore, Sam());
     return 0;
-   
 }
 
-	
-
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/hu8y22yeakh5sl7k_stats.txt -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata/hu8y22yeakh5sl7k_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/franzi/SeqAn/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/bowtie_tutorial/bowtie_tutorial.cpp~ ./sandbox/my_sandbox/apps/bowtie_tutorial/bowtie_tutorial.cpp~
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/bowtie_tutorial/bowtie_tutorial.cpp~	2012-09-05 17:01:10.000000000 +0200
+++ ./sandbox/my_sandbox/apps/bowtie_tutorial/bowtie_tutorial.cpp~	2012-09-05 17:22:48.962856962 +0200
@@ -42,41 +42,55 @@
 
 using namespace seqan;
 
+template <typename TStore, typename TIter, typename TPatternIt>
+void addMatchToStore(TStore & fragStore, TPatternIt const & patternIt, TIter const & localIt)
+{
+    typedef FragmentStore<>::TAlignedReadStore TAlignedReadStore;
+    typedef Value<TAlignedReadStore>::Type TAlignedRead;
+
+    for (unsigned num = 0; num < countOccurrences(localIt); ++num)
+    {
+        unsigned pos = getOccurrences(localIt)[num].i2;
+        TAlignedRead match(length(fragStore.alignedReadStore), position(patternIt), getOccurrences(localIt)[num].i1 ,
+            pos,  pos + length(value(patternIt)));
+        appendValue(fragStore.alignedReadStore, match);
+    }
+}
 
 template <typename TIter, typename TStringSet>
 void search(TIter & it, TStringSet const & pattern){
 		
 	typedef typename Iterator<TStringSet const, Standard>::Type TPatternIter;
-	//TIter itCopy = it;
-    	for (TPatternIter patternIt = begin(pattern, Standard()); patternIt != end(pattern, Standard()); ++patternIt)
-    	{
-		
-        	unsigned startApproxSearch = length(value(patternIt)) / 2;
-		String<Dna5> alphabet = "ACGTN";
-
-		goDown(it, infix(value(patternIt), startApproxSearch + 1, length(value(patternIt))));
-
-		for(unsigned int i =startApproxSearch; i > 0; --i){
-			for(unsigned int posi = 0; posi < length(alphabet);++posi){
-				TIter itCopy = it;
-				//it = itCopy;
-				Dna5 c = alphabet[posi];
-					
-				if(goDown(itCopy,c)){
-					
-					if (goDown(itCopy, infix(pattern,0,i-1))){
-						std::cout << "found hit" << '\n';
-					}
-						
-				}
-				goDown(it,value(pattern,i));
-			}
-		}
-		
-        	//goDown(it, infix(value(patternIt), startApproxSearch + 1, length(value(patternIt))));
-        	//goRoot(it);
-    	}
-
+    for (TPatternIter patternIt = begin(pattern, Standard()); patternIt != end(pattern, Standard()); ++patternIt)
+    {
+        unsigned startApproxSearch = length(value(patternIt)) / 2;
+        if (goDown(it, infix(value(patternIt), startApproxSearch + 1, length(value(patternIt)))))
+        {
+            for (unsigned i = startApproxSearch; ; --i)
+            {	
+		Dna character = getValue(patternIt)[i];
+                for (Dna5 c = MinValue<Dna>::VALUE; c < +ValueSize<Dna>::VALUE; ++c)
+                {
+		    if(c != character){
+                    	TIter localIt = it;
+                    	if (goDown(localIt, c))
+			{
+                       	
+			   if (goDown(localIt, infix(value(patternIt), 0, i)))
+	                   {
+                        	    // HIT
+                           }
+                    	}
+		    }
+                }
+                if (i == 0 || !goDown(it, getValue(patternIt)[i]))
+                {
+                    break;
+                }
+            }
+        }
+        goRoot(it);
+    }
 }	
 
 int main(int argc, char *argv[]) 

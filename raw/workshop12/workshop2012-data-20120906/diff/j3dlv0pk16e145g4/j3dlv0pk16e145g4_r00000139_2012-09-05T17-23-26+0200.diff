diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/felix/seqan/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/j3dlv0pk16e145g4_stats.txt -x /home/felix/seqan/misc/seqan_instrumentation/userdata/j3dlv0pk16e145g4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/felix/seqan/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/felix/seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/felix/seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/felix/seqan/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/felix/seqan/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/bowtie_app/bowtie_app.cpp ./sandbox/my_sandbox/apps/bowtie_app/bowtie_app.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/bowtie_app/bowtie_app.cpp	2012-09-05 17:13:26.000000000 +0200
+++ ./sandbox/my_sandbox/apps/bowtie_app/bowtie_app.cpp	2012-09-05 17:23:23.724331840 +0200
@@ -11,8 +11,37 @@
 #include <seqan/store.h>
 
 using namespace seqan;
-template <typename TIter, typename TStringSet>
-void search(TIter & it, TStringSet const & pattern)
+struct ForwardTag {};
+struct ReverseTag {};
+template <typename TStore, typename TIter, typename TPatternIt>
+void addMatchToStore(TStore & fragStore, TPatternIt const & patternIt, TIter const & localIt, ForwardTag)
+{
+    typedef FragmentStore<>::TAlignedReadStore TAlignedReadStore;
+    typedef Value<TAlignedReadStore>::Type TAlignedRead;
+    for (unsigned num = 0; num < countOccurrences(localIt); ++num)
+    {
+        unsigned pos = getOccurrences(localIt)[num].i2;
+        TAlignedRead match(length(fragStore.alignedReadStore), position(patternIt), getOccurrences(localIt)[num].i1 ,
+            pos,  pos + length(value(patternIt)));
+        appendValue(fragStore.alignedReadStore, match);
+    }
+}
+template <typename TStore, typename TIter, typename TPatternIt>
+void addMatchToStore(TStore & fragStore, TPatternIt const & patternIt, TIter const & localIt, ReverseTag)
+{
+    typedef FragmentStore<>::TAlignedReadStore TAlignedReadStore;
+    typedef Value<TAlignedReadStore>::Type TAlignedRead;
+    for (unsigned num = 0; num < countOccurrences(localIt); ++num)
+    {
+        unsigned contigLength = length(fragStore.contigStore[getOccurrences(localIt)[num].i1].seq);
+        unsigned pos = contigLength - getOccurrences(localIt)[num].i2 - length(value(patternIt));
+        TAlignedRead match(length(fragStore.alignedReadStore), position(patternIt), getOccurrences(localIt)[num].i1,
+            pos, pos + length(value(patternIt)));
+        appendValue(fragStore.alignedReadStore, match);
+    }
+}
+template <typename TIter, typename TStringSet, typename TStore, typename DirectionTag>
+void search(TIter & it, TStringSet const & pattern, TStore & fragStore, DirectionTag /*tag*/)
 {
     typedef typename Iterator<TStringSet const, Standard>::Type TPatternIter;
     for (TPatternIter patternIt = begin(pattern, Standard()); patternIt != end(pattern, Standard()); ++patternIt)
@@ -29,11 +58,10 @@
                     if (c != character)
                     {
                         TIter localIt = it;
-                        if (goDown(localIt, c))
-                        {
+                        if (goDown(localIt, c)){
                             if (goDown(localIt, infix(value(patternIt), 0, i)))
                             {
-                               //HIT
+                                addMatchToStore(fragStore, patternIt, localIt, DirectionTag());
                             }
                         }
                     }
@@ -42,7 +70,8 @@
                     break;
                 else if (i == 0)
                 {
-                    // HIT
+                    if(IsSameType<DirectionTag, ForwardTag>::VALUE)
+                        addMatchToStore(fragStore, patternIt, it, DirectionTag());
                     break;
                 }
             }
@@ -71,14 +100,14 @@
         appendValue(text, fragStore.contigStore[i].seq);
     TIndex fmIndex(text);
     TIter it(fmIndex);
-    search(it, fragStore.readSeqStore);
+    search(it, fragStore.readSeqStore, fragStore, ForwardTag());
     clear(fmIndex);
     clear(it);
     reverse(text);
     reverse(fragStore.readSeqStore);
     fmIndex = TIndex(text);
     it = TIter(fmIndex);
-    search(it, fragStore.readSeqStore);
+    search(it, fragStore.readSeqStore, fragStore, ReverseTag());
     clear(fmIndex);
     clear(it);
     reverse(text);
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/felix/seqan/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/j3dlv0pk16e145g4_stats.txt -x /home/felix/seqan/misc/seqan_instrumentation/userdata/j3dlv0pk16e145g4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/felix/seqan/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/felix/seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/felix/seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/felix/seqan/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/felix/seqan/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/bowtie_app/bowtie_app.cpp~ ./sandbox/my_sandbox/apps/bowtie_app/bowtie_app.cpp~
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/bowtie_app/bowtie_app.cpp~	2012-09-05 17:06:00.000000000 +0200
+++ ./sandbox/my_sandbox/apps/bowtie_app/bowtie_app.cpp~	2012-09-05 17:13:26.833372019 +0200
@@ -1,9 +1,6 @@
 // ==========================================================================
 //                                mini_bowtie
 // ==========================================================================
-// Copyright (c) 2006-2012, Knut Reinert, FU Berlin
-// All rights reserved.
-
 
 #include <iostream>
 #include <seqan/basic.h>
@@ -14,75 +11,79 @@
 #include <seqan/store.h>
 
 using namespace seqan;
-
-template <typename TIter, typename TStringSet >
+template <typename TIter, typename TStringSet>
 void search(TIter & it, TStringSet const & pattern)
 {
-    for (unsigned i=0; i < length(pattern); ++i)
+    typedef typename Iterator<TStringSet const, Standard>::Type TPatternIter;
+    for (TPatternIter patternIt = begin(pattern, Standard()); patternIt != end(pattern, Standard()); ++patternIt)
     {
-        unsigned j=length(pattern[i])-1 ;
-        while(goDown(it, pattern[i][j]) && j>= length(pattern)/2)
-            --j;
-        if (j>=length(pattern)/2)
-            continue;
-        for (Dna c=MinValue<Dna>::VALUE; c < MaxValue<Dna>::VALUE; ++c)
+        // exact search on pattern half
+        unsigned startApproxSearch = length(value(patternIt)) / 2;
+        if (goDown(it, infix(value(patternIt), startApproxSearch + 1, length(value(patternIt)))))
         {
-            TIter aprox(it);
-            if(!goDown(aprox, c))
-                continue;
-            while(goDown(aprox, pattern[i][j]) && j >= 0)
-                --j;
-            if (j==0)
+            for (unsigned i = startApproxSearch; ; --i)
             {
-                //found hit
+                Dna character = getValue(patternIt)[i];
+                for (Dna5 c = MinValue<Dna>::VALUE; c < +ValueSize<Dna>::VALUE; ++c)
+                {
+                    if (c != character)
+                    {
+                        TIter localIt = it;
+                        if (goDown(localIt, c))
+                        {
+                            if (goDown(localIt, infix(value(patternIt), 0, i)))
+                            {
+                               //HIT
+                            }
+                        }
+                    }
+                }
+                if (!goDown(it, character))
+                    break;
+                else if (i == 0)
+                {
+                    // HIT
+                    break;
+                }
             }
-        } 
+        }
         goRoot(it);
     }
 }
-
-int main(int argc, char *argv[]) 
+int main(int argc, char *argv[])
 {
-    // type definitions
     typedef String<Dna5> TString;
-    typedef StringSet<TString> TStringSet;
+    typedef StringSet<String<Dna5> > TStringSet;
     typedef Index<StringSet<TString>, FMIndex<> > TIndex;
-    typedef Iterator<TIndex, TopDown<ParentLinks<> > >::Type TIter;
-
-    // reading the command line arguments
+    typedef Iterator<TIndex, TopDown<> >::Type TIter;
+    // 0) Handle command line arguments.
     if (argc < 3) {
         std::cerr << "Invalid number of arguments." << std::endl
-                  << "USAGE: mini_bowtie GENOME.fasta READS.fasta OUT.sam" << std::endl;
+                  << "USAGE: minimapper GENOME.fasta READS.fasta OUT.sam" << std::endl;
         return 1;
     }
-    // declaration and initialization of the fragment store
+    // 1) Load contigs and reads.
     FragmentStore<> fragStore;
     if (!loadContigs(fragStore, argv[1])) return 1;
     if (!loadReads(fragStore, argv[2])) return 1;
-    // combining the contigs of the reference into one string set
     StringSet<TString> text;
-    for (unsigned i = 0; i < length(fragStore.contigStore); ++i)   
+    for (unsigned i = 0; i < length(fragStore.contigStore); ++i)
         appendValue(text, fragStore.contigStore[i].seq);
-    // forward search
     TIndex fmIndex(text);
     TIter it(fmIndex);
     search(it, fragStore.readSeqStore);
-    // reversing the sequences for backward search
+    clear(fmIndex);
+    clear(it);
     reverse(text);
     reverse(fragStore.readSeqStore);
-    // backward search
-    clear(fmIndex);
     fmIndex = TIndex(text);
-    clear(it);
     it = TIter(fmIndex);
     search(it, fragStore.readSeqStore);
     clear(fmIndex);
-    fmIndex = TIndex(text);
-    clear(it);
-    it = TIter(fmIndex);
-    clear(fmIndex);
     clear(it);
-
+    reverse(text);
+    reverse(fragStore.readSeqStore);
+    std::ofstream samFile(argv[3], std::ios_base::out);
+    write(samFile, fragStore, Sam());
     return 0;
-
 }

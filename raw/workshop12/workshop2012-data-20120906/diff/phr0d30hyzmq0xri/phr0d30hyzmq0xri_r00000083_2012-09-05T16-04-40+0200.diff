diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/matthias/seqan/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/phr0d30hyzmq0xri_stats.txt -x /home/matthias/seqan/seqan-trunk/misc/seqan_instrumentation/userdata/phr0d30hyzmq0xri_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/matthias/seqan/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/matthias/seqan/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/matthias/seqan/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/matthias/seqan/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/matthias/seqan/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/lienhard/apps/mini_bowtie/mini_bowtie.cpp ./sandbox/lienhard/apps/mini_bowtie/mini_bowtie.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/lienhard/apps/mini_bowtie/mini_bowtie.cpp	2012-09-05 15:38:47.000000000 +0200
+++ ./sandbox/lienhard/apps/mini_bowtie/mini_bowtie.cpp	2012-09-05 16:03:59.880453527 +0200
@@ -3,148 +3,76 @@
 // ==========================================================================
 // Copyright (c) 2006-2012, Knut Reinert, FU Berlin
 // All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//     * Redistributions of source code must retain the above copyright
-//       notice, this list of conditions and the following disclaimer.
-//     * Redistributions in binary form must reproduce the above copyright
-//       notice, this list of conditions and the following disclaimer in the
-//       documentation and/or other materials provided with the distribution.
-//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
-//       its contributors may be used to endorse or promote products derived
-//       from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
-// DAMAGE.
-//
-// ==========================================================================
-// Author: Your Name <your.email@example.net>
-// ==========================================================================
 
+
+#include <iostream>
 #include <seqan/basic.h>
 #include <seqan/sequence.h>
+#include <seqan/file.h>
+#include <seqan/index.h>
+#include <seqan/index_fm.h>
+#include <seqan/store.h>
 
-#include <seqan/arg_parse.h>
-
-// ==========================================================================
-// Classes
-// ==========================================================================
+using namespace seqan;
 
-// --------------------------------------------------------------------------
-// Class AppOptions
-// --------------------------------------------------------------------------
-
-// This struct stores the options from the command line.
-//
-// You might want to rename this to reflect the name of your app.
+void search() {};
 
-struct AppOptions
+int main(int argc, char *argv[]) 
 {
-    // Verbosity level.  0 -- quiet, 1 -- normal, 2 -- verbose, 3 -- very verbose.
-    int verbosity;
+    // type definitions
+    typedef String<Dna5> TString;
+    typedef StringSet<TString> TStringSet;
+    typedef Index<StringSet<TString>, FMIndex<> > TIndex;
+    typedef Iterator<TIndex, TopDown<ParentLinks<> > >::Type TIter;
 
-    // The first (and only) argument of the program is stored here.
-    seqan::CharString text;
+    
 
-    AppOptions() :
-        verbosity(1)
-    {}
-};
 
-// ==========================================================================
-// Functions
-// ==========================================================================
+    // reading the command line arguments
+    if (argc < 3) {
+      std::cerr << "Invalid number of arguments." << std::endl
+                  << "USAGE: mini_bowtie GENOME.fasta READS.fasta OUT.sam" << std::endl;
+      return 1;
 
-// --------------------------------------------------------------------------
-// Function parseCommandLine()
-// --------------------------------------------------------------------------
+    }
+    StringSet<TString> text;
+    
+    // declaration and initialization of the fragment store
+    FragmentStore<> fragStore;
 
-seqan::ArgumentParser::ParseResult
-parseCommandLine(AppOptions & options, int argc, char const ** argv)
-{
-    // Setup ArgumentParser.
-    seqan::ArgumentParser parser("mini_bowtie");
-    // Set short description, version, and date.
-    setShortDescription(parser, "Put a Short Description Here");
-    setVersion(parser, "0.1");
-    setDate(parser, "July 2012");
-
-    // Define usage line and long description.
-    addUsageLine(parser, "[\\fIOPTIONS\\fP] \"\\fITEXT\\fP\"");
-    addDescription(parser, "This is the application skelleton and you should modify this string.");
-
-    // We require one argument.
-    addArgument(parser, seqan::ArgParseArgument(seqan::ArgParseArgument::STRING, "TEXT"));
-
-    addOption(parser, seqan::ArgParseOption("q", "quiet", "Set verbosity to a minimum."));
-    addOption(parser, seqan::ArgParseOption("v", "verbose", "Enable verbose output."));
-    addOption(parser, seqan::ArgParseOption("vv", "very-verbose", "Enable very verbose output."));
-
-    // Add Examples Section.
-    addTextSection(parser, "Examples");
-    addListItem(parser, "\\fBmini_bowtie\\fP \\fB-v\\fP \\fItext\\fP",
-                "Call with \\fITEXT\\fP set to \"text\" with verbose output.");
-
-    // Parse command line.
-    seqan::ArgumentParser::ParseResult res = seqan::parse(parser, argc, argv);
-
-    // Only extract  options if the program will continue after parseCommandLine()
-    if (res != seqan::ArgumentParser::PARSE_OK)
-        return res;
-
-    // Extract option values.
-    if (isSet(parser, "quiet"))
-        options.verbosity = 0;
-    if (isSet(parser, "verbose"))
-        options.verbosity = 2;
-    if (isSet(parser, "very-verbose"))
-        options.verbosity = 3;
-    seqan::getArgumentValue(options.text, parser, 0);
+    // combining the contigs of the reference into one string set
+    if (!loadContigs(fragStore, argv[1])) return 1;
+    if (!loadReads(fragStore, argv[2])) return 1;
 
-    return seqan::ArgumentParser::PARSE_OK;
-}
+    TIter it(fmIndex);
+    it = TIter(fmIndex);
 
-// --------------------------------------------------------------------------
-// Function main()
-// --------------------------------------------------------------------------
+    for (unsigned i = 0; i < length(fragStore.contigStore); ++i)   
+      appendValue(text, fragStore.contigStore[i].seq);
+    
+    // forward search
+    TIndex fmIndex(text);
+    search();
 
-// Program entry point.
+    clear(fmIndex);
+    clear(it);
 
-int main(int argc, char const ** argv)
-{
-    // Parse the command line.
-    seqan::ArgumentParser parser;
-    AppOptions options;
-    seqan::ArgumentParser::ParseResult res = parseCommandLine(options, argc, argv);
-
-    // If there was an error parsing or built-in argument parser functionality
-    // was triggered then we exit the program.  The return code is 1 if there
-    // were errors and 0 if there were none.
-    if (res != seqan::ArgumentParser::PARSE_OK)
-        return res == seqan::ArgumentParser::PARSE_ERROR;
+    // reversing the sequences for backward search
+    reverse(text);
+    reverse(fragStore.readSeqStore);
+
+
+    // backward search
+
+    fmIndex = TIndex(text);
+
+    search();
+    clear(fmIndex);
+    clear(it);
 
-    std::cout << "EXAMPLE PROGRAM\n"
-              << "===============\n\n";
-    
-    // Print the command line arguments back to the user.
-    if (options.verbosity > 0)
-    {
-        std::cout << "__OPTIONS____________________________________________________________________\n"
-                  << '\n'
-                  << "VERBOSITY\t" << options.verbosity << '\n'
-                  << "TEXT     \t" << options.text << "\n\n";
-    }
 
     return 0;
+
+
+
 }

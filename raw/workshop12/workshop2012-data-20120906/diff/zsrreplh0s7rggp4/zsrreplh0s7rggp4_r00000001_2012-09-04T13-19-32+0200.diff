diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/CMakeLists.txt ./sandbox/my_sandbox/apps/CMakeLists.txt
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/apps/CMakeLists.txt	2012-09-04 13:15:15.007297783 +0200
@@ -0,0 +1,6 @@
+cmake_minimum_required (VERSION 2.6)
+project (seqan_sandbox_my_sandbox_apps)
+
+seqan_setup_apps(sandbox_my_sandbox_apps)  # Add meta target and make executables depend on it.
+
+seqan_add_all_subdirectories()  # include_directory(*)
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/CMakeLists.txt ./sandbox/my_sandbox/apps/first_app/CMakeLists.txt
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/apps/first_app/CMakeLists.txt	2012-09-04 13:15:45.131058288 +0200
@@ -0,0 +1,5 @@
+cmake_minimum_required (VERSION 2.6)
+project (sandbox_my_sandbox_apps_first_app)
+
+# Update the list of file names below if you add source files to your application.
+seqan_add_executable(first_app first_app.cpp)
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/first_app.cpp ./sandbox/my_sandbox/apps/first_app/first_app.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/first_app.cpp	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/apps/first_app/first_app.cpp	2012-09-04 13:17:59.689988500 +0200
@@ -0,0 +1,511 @@
+// ==========================================================================
+//                                prototyp_1_0
+// ==========================================================================
+// Copyright (c) 2006-2012, Knut Reinert, FU Berlin
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright
+//       notice, this list of conditions and the following disclaimer.
+//     * Redistributions in binary form must reproduce the above copyright
+//       notice, this list of conditions and the following disclaimer in the
+//       documentation and/or other materials provided with the distribution.
+//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
+//       its contributors may be used to endorse or promote products derived
+//       from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+// DAMAGE.
+//
+// ==========================================================================
+// Author: Your Name <your.email@example.net>
+// ==========================================================================
+
+#include <iostream>
+#include <fstream>
+#include <algorithm>
+#include <seqan/sequence.h>
+#include <seqan/stream.h>
+#include <seqan/basic.h>
+using namespace std;
+using namespace seqan;
+
+// ==========================================================================
+// Classes
+// ==========================================================================
+
+// --------------------------------------------------------------------------
+// Typedef	======	TAbsoluteMatrix	TFrequencyMatrix
+// --------------------------------------------------------------------------
+
+typedef String<ProfileChar<Dna> > TAbsoluteMatrix;
+typedef String<String<double> > TFrequencyMatrix;
+
+// --------------------------------------------------------------------------
+// Class JasparRecord
+// --------------------------------------------------------------------------
+
+struct JasparRecord {
+	CharString id;
+	CharString name;
+	TAbsoluteMatrix matrix;
+	JasparRecord() {
+	}
+};
+
+// --------------------------------------------------------------------------
+// Class Variant
+// --------------------------------------------------------------------------
+
+struct Variant {
+	unsigned position;
+	Dna newNucleotide;
+	Variant() {
+	}
+};
+
+// --------------------------------------------------------------------------
+// Class FoundBindingSite
+// --------------------------------------------------------------------------
+
+struct FoundBindingSite {
+	unsigned long position;
+	double referenceScore;
+	double patientScore;
+	FoundBindingSite() {
+	}
+};
+
+// --------------------------------------------------------------------------
+// Tags	======	Jaspar	ProductScore	MatchScore	AddPseudoCount
+// --------------------------------------------------------------------------
+
+struct Jaspar_;
+typedef Tag<Jaspar_> Jaspar;
+
+struct ProductScore_;
+typedef Tag<ProductScore_> ProductScore;
+
+struct MatchScore_;
+typedef Tag<MatchScore_> MatchScore;
+
+struct AddPseudoCount_;
+typedef Tag<AddPseudoCount_> AddPseudoCount;
+
+// --------------------------------------------------------------------------
+// Typedef	======	TSequence	TVariantList	TFoundBindingSiteList	TSequenceList
+// --------------------------------------------------------------------------
+
+typedef String<Dna> TSequence;
+typedef String<Variant> TVariantList;
+typedef String<FoundBindingSite> TFoundBindingSiteList;
+typedef String<TSequence> TSequenceList;
+
+// ==========================================================================
+// Functions
+// ==========================================================================
+
+// --------------------------------------------------------------------------
+// Function clear()
+// Overload for JapsarRecord
+// --------------------------------------------------------------------------
+
+void clear(JasparRecord & record) {
+	clear(record.id);
+	clear(record.name);
+	clear(record.matrix);
+}
+
+// --------------------------------------------------------------------------
+// Function readRecord()
+// Overload for JapsarRecord
+// --------------------------------------------------------------------------
+
+template<typename TStream, typename TPass>
+int readRecord(JasparRecord & record, RecordReader<TStream, TPass> & reader,
+		Jaspar const & /*tag*/) {
+	clear(record);
+	int res = 0;
+	// Jaspar records look like this:
+	//
+	// ><id> <name>
+	// A  [ x x x ... x ]
+	// C  [ x x x ... xx ]
+	// G  [xx x xx ... x ]
+	// T  [xx xx xx ... x ]
+
+	// skip until record begin
+	res = skipUntilChar(reader, '>');
+	if (res != 0)
+		return res;
+	// <id>
+	if (goNext(reader)) // skip the '>'
+		return EOF_BEFORE_SUCCESS;
+	res = readUntilChar(record.id, reader, ' ');
+	if (res != 0)
+		return res;
+	if (goNext(reader))
+		return EOF_BEFORE_SUCCESS;
+	// <name>
+	res = readUntilChar(record.name, reader, '\n');
+	if (res != 0)
+		return res;
+	if (goNext(reader))
+		return EOF_BEFORE_SUCCESS;
+
+	for (int rowIndex = 0; rowIndex < 4; ++rowIndex) { // for 0 to 3 meaning for A, C, G, T
+		res = skipUntilChar(reader, '[');
+		if (res != 0)
+			return res;
+		if (goNext(reader)) // skip the '['
+			return EOF_BEFORE_SUCCESS;
+		res = skipWhitespaces(reader);
+		if (res != 0)
+			return res;
+		int columnIndex = 0;
+		while (value(reader) != ']') {
+			CharString bufferString;
+			res = readUntilWhitespace(bufferString, reader);
+			if (res != 0)
+				return res;
+			if (rowIndex == 0)
+				resize(record.matrix, length(record.matrix) + 1);
+			if (!lexicalCast2<unsigned> (
+					record.matrix[columnIndex].count[rowIndex], bufferString))
+				return 1; // Could not cast or could not write into matrix!
+			res = skipWhitespaces(reader);
+			if (res != 0)
+				return res;
+			++columnIndex;
+		}
+	}
+
+	return 0;
+}
+
+// --------------------------------------------------------------------------
+// Function absoluteToFrequencyMatrix()
+// --------------------------------------------------------------------------
+
+TFrequencyMatrix absoluteToFrequencyMatrix(TAbsoluteMatrix matrix) {
+	TFrequencyMatrix myFrequencyMatrix;
+	resize(myFrequencyMatrix,length(matrix));
+	unsigned columnSum = matrix[0].count[0] + matrix[0].count[1] + matrix[0].count[2] + matrix[0].count[3];
+	for (unsigned columnIndex=0; columnIndex<length(matrix);++columnIndex) {
+		resize(myFrequencyMatrix[columnIndex],4);
+		myFrequencyMatrix[columnIndex][0] = (double) matrix[columnIndex].count[0] / columnSum;
+		myFrequencyMatrix[columnIndex][1] = (double) matrix[columnIndex].count[1] / columnSum;
+		myFrequencyMatrix[columnIndex][2] = (double) matrix[columnIndex].count[2] / columnSum;
+		myFrequencyMatrix[columnIndex][3] = static_cast<double>( matrix[columnIndex].count[3] ) / columnSum;
+	}
+	return myFrequencyMatrix;
+}
+
+TFrequencyMatrix absoluteToFrequencyMatrix(TAbsoluteMatrix matrix, AddPseudoCount const & /* tag */) {
+	TFrequencyMatrix myFrequencyMatrix;
+	resize(myFrequencyMatrix,length(matrix));
+	unsigned columnSum = matrix[0].count[0] + matrix[0].count[1] + matrix[0].count[2] + matrix[0].count[3] + 4;
+	for (unsigned columnIndex=0; columnIndex<length(matrix);++columnIndex) {
+		resize(myFrequencyMatrix[columnIndex],4);
+		myFrequencyMatrix[columnIndex][0] = (double) (matrix[columnIndex].count[0]+1) / columnSum;
+		myFrequencyMatrix[columnIndex][1] = (double) (matrix[columnIndex].count[1]+1) / columnSum;
+		myFrequencyMatrix[columnIndex][2] = (double) (matrix[columnIndex].count[2]+1) / columnSum;
+		myFrequencyMatrix[columnIndex][3] = (double) (matrix[columnIndex].count[3]+1) / columnSum;
+	}
+	return myFrequencyMatrix;
+}
+// --------------------------------------------------------------------------
+// Function createFrequencyMatrix()
+// --------------------------------------------------------------------------
+
+TAbsoluteMatrix createAbsoluteMatrix() {
+	fstream stream("jasparMatrix_prototyp_1_0.txt", ios::binary | ios::in);
+	// Read file.
+	RecordReader < std::fstream, SinglePass<> > reader(stream);
+	JasparRecord myRecord;
+	readRecord(myRecord, reader, Jaspar());
+	return myRecord.matrix;
+}
+
+// --------------------------------------------------------------------------
+// Function createSequence()
+// --------------------------------------------------------------------------
+
+TSequence createSequence() {
+	TSequence mySequence;
+	appendValue(mySequence, 'A'); // 0
+	appendValue(mySequence, 'G');
+	appendValue(mySequence, 'T');
+	appendValue(mySequence, 'C');
+	appendValue(mySequence, 'C');
+	appendValue(mySequence, 'T');
+	appendValue(mySequence, 'A');
+	appendValue(mySequence, 'A');
+	appendValue(mySequence, 'T');
+	appendValue(mySequence, 'T');
+	appendValue(mySequence, 'T'); // 10
+	appendValue(mySequence, 'G');
+	appendValue(mySequence, 'G');
+	appendValue(mySequence, 'C');
+	appendValue(mySequence, 'C');
+	appendValue(mySequence, 'C'); // 15
+	appendValue(mySequence, 'A');
+	appendValue(mySequence, 'A');
+	appendValue(mySequence, 'A');
+	appendValue(mySequence, 'T');
+	appendValue(mySequence, 'T'); // 20
+	appendValue(mySequence, 'T');
+	appendValue(mySequence, 'G');
+	appendValue(mySequence, 'G');
+	appendValue(mySequence, 'G');
+	appendValue(mySequence, 'G'); // 25
+	appendValue(mySequence, 'G');
+	appendValue(mySequence, 'G');
+	return mySequence;
+}
+
+// --------------------------------------------------------------------------
+// Function createVariantList()
+// --------------------------------------------------------------------------
+
+TVariantList createVariantList() {
+	Variant myVariant1;
+	myVariant1.position = 5;
+	myVariant1.newNucleotide = 'A';
+	Variant myVariant2;
+	myVariant2.position = 13;
+	myVariant2.newNucleotide = 'A';
+	Variant myVariant3;
+	myVariant3.position = 27;
+	myVariant3.newNucleotide = 'C';
+	TVariantList myVariantList;
+	appendValue(myVariantList, myVariant1);
+	appendValue(myVariantList, myVariant2);
+	appendValue(myVariantList, myVariant3);
+	return myVariantList;
+}
+
+// --------------------------------------------------------------------------
+// Function getProductScore()
+// --------------------------------------------------------------------------
+
+double getProductScore(TSequence sequence, TFrequencyMatrix matrix,
+		unsigned sequencePosition) {
+	double myCurrentScore = 1;
+	for (unsigned matrixColumn = 0; matrixColumn < length(matrix); ++matrixColumn) {
+		if (sequence[sequencePosition + matrixColumn] == 'A')
+			myCurrentScore = myCurrentScore * matrix[matrixColumn][0];
+		else if (sequence[sequencePosition + matrixColumn] == 'C')
+			myCurrentScore = myCurrentScore * matrix[matrixColumn][1];
+		else if (sequence[sequencePosition + matrixColumn] == 'G')
+			myCurrentScore = myCurrentScore * matrix[matrixColumn][2];
+		else if (sequence[sequencePosition + matrixColumn] == 'T')
+			myCurrentScore = myCurrentScore * matrix[matrixColumn][3];
+	}
+
+	return myCurrentScore;
+}
+
+// --------------------------------------------------------------------------
+// Function getMatchScore()
+// --------------------------------------------------------------------------
+
+double getMatchScore(TSequence sequence, TAbsoluteMatrix matrix,
+		unsigned sequencePosition) {
+	double myCurrentScore = 0;
+	double currentMin = 0;
+	double currentMax = 0;
+	for (unsigned matrixColumn = 0; matrixColumn < length(matrix); ++matrixColumn) {
+		if (sequence[sequencePosition + matrixColumn] == 'A')
+			myCurrentScore += matrix[matrixColumn].count[0];
+		else if (sequence[sequencePosition + matrixColumn] == 'C')
+			myCurrentScore += matrix[matrixColumn].count[1];
+		else if (sequence[sequencePosition + matrixColumn] == 'G')
+			myCurrentScore += matrix[matrixColumn].count[2];
+		else if (sequence[sequencePosition + matrixColumn] == 'T')
+			myCurrentScore += matrix[matrixColumn].count[3];
+
+		currentMin += *min(begin(matrix[matrixColumn].count),end(matrix[matrixColumn].count));
+		currentMax += *max(begin(matrix[matrixColumn].count),end(matrix[matrixColumn].count));
+	}
+	return ((myCurrentScore - currentMin) / (currentMax - currentMin));
+}
+
+// --------------------------------------------------------------------------
+// Function getAllPossibleSequencesOfGivenLength()
+// --------------------------------------------------------------------------
+
+// Helper function for getAllPossibleSequencesOfGivenLength().
+void getAllPossibleSequencesOfGivenLengthHelper(TSequenceList & mySequenceList,
+		TSequence &current, unsigned pos) {
+	if (pos < length(current)) {
+		current[pos] = 'A';
+		getAllPossibleSequencesOfGivenLengthHelper(mySequenceList, current, pos + 1);
+		current[pos] = 'C';
+		getAllPossibleSequencesOfGivenLengthHelper(mySequenceList, current, pos + 1);
+		current[pos] = 'G';
+		getAllPossibleSequencesOfGivenLengthHelper(mySequenceList, current, pos + 1);
+		current[pos] = 'T';
+		getAllPossibleSequencesOfGivenLengthHelper(mySequenceList, current, pos + 1);
+	} else {
+		appendValue(mySequenceList, current);
+	}
+}
+
+TSequenceList getAllPossibleSequencesOfGivenLength(unsigned length) {
+	TSequence current;
+	TSequenceList result;
+	resize(current, length);
+	getAllPossibleSequencesOfGivenLengthHelper(result, current, 0);
+	return result;
+}
+
+// --------------------------------------------------------------------------
+// Function determineThreshold()
+// --------------------------------------------------------------------------
+
+double determineThreshold(TFrequencyMatrix matrix) {
+	TSequenceList allPossibleSequences;
+	allPossibleSequences = getAllPossibleSequencesOfGivenLength(length(matrix));
+	String<double> possibleScores;
+
+	typedef Iterator<TSequenceList>::Type TSequenceListIterator;
+	for (TSequenceListIterator it = begin(allPossibleSequences); it != end(
+			allPossibleSequences); goNext(it)) {
+		appendValue(possibleScores, getProductScore(value(it), matrix, 0));
+	}
+
+	typedef Iterator<double>::Type TDoubleIterator;
+	TDoubleIterator beginIt = begin(possibleScores);
+	TDoubleIterator endIt = end(possibleScores);
+	sort(beginIt, endIt);
+	beginIt = begin(possibleScores);
+	endIt = end(possibleScores);
+	double scoreSum=0;
+	while (endIt != beginIt) {
+		goPrevious(endIt);
+		scoreSum += value(endIt);
+		if (scoreSum >= 0.95)
+			break;
+	}
+	return value(endIt);
+}
+
+// --------------------------------------------------------------------------
+// Function searchRelevantBindingsites()
+// --------------------------------------------------------------------------
+
+TFoundBindingSiteList searchRelevantBindingsites(TFrequencyMatrix matrix,
+		TSequence referenceSequence, TVariantList variantList,
+		double threshold, ProductScore const & /* tag*/) {
+	TFoundBindingSiteList myFoundBindingSiteList;
+	FoundBindingSite myCurrentBindingSite;
+	TSequence patientSequence = referenceSequence;
+	for (unsigned variantListPosition = 0; variantListPosition < length(
+			variantList); ++variantListPosition) {
+		patientSequence[variantList[variantListPosition].position]
+				= variantList[variantListPosition].newNucleotide;
+	}
+	for (unsigned sequencePosition = 0; sequencePosition < length(referenceSequence)
+			- length(matrix) + 1; ++sequencePosition) {
+		double currentReferenceScore = getProductScore(referenceSequence,
+				matrix, sequencePosition);
+		double currentPatientScore = getProductScore(patientSequence, matrix,
+				sequencePosition);
+		if (((currentReferenceScore >= threshold) or (currentPatientScore >= threshold))
+				and (currentReferenceScore != currentPatientScore)) {
+			myCurrentBindingSite.position = sequencePosition;
+			myCurrentBindingSite.referenceScore = currentReferenceScore;
+			myCurrentBindingSite.patientScore = currentPatientScore;
+			appendValue(myFoundBindingSiteList, myCurrentBindingSite);
+		}
+	}
+	return myFoundBindingSiteList;
+}
+
+TFoundBindingSiteList searchRelevantBindingsites(TAbsoluteMatrix matrix,
+		TSequence referenceSequence, TVariantList variantList, double threshold,
+		MatchScore const & /* tag*/) {
+	TFoundBindingSiteList myFoundBindingSiteList;
+	FoundBindingSite myCurrentBindingSite;
+	TSequence patientSequence = referenceSequence;
+	for (unsigned variantListPosition = 0; variantListPosition < length(
+			variantList); ++variantListPosition) {
+		patientSequence[variantList[variantListPosition].position]
+				= variantList[variantListPosition].newNucleotide;
+	}
+	for (unsigned sequencePosition = 0; sequencePosition < length(referenceSequence)
+			- length(matrix) + 1; ++sequencePosition) {
+		double currentReferenceScore = getMatchScore(referenceSequence,
+				matrix, sequencePosition);
+		double currentPatientScore = getMatchScore(patientSequence, matrix,
+				sequencePosition);
+		if (((currentReferenceScore >= threshold) or (currentPatientScore >= threshold))
+				and (currentReferenceScore != currentPatientScore)) {
+			myCurrentBindingSite.position = sequencePosition;
+			myCurrentBindingSite.referenceScore = currentReferenceScore;
+			myCurrentBindingSite.patientScore = currentPatientScore;
+			appendValue(myFoundBindingSiteList, myCurrentBindingSite);
+		}
+	}
+	return myFoundBindingSiteList;
+}
+
+// --------------------------------------------------------------------------
+// Function printFoundBindingSiteList()
+// --------------------------------------------------------------------------
+
+void printFoundBindingSiteList(TFoundBindingSiteList myFoundBindingSiteList, double myThreshold) {
+	cout << "=== TransVar =====================================" << endl;
+	cout << endl;
+	cout << "Threshold = " << myThreshold << endl;
+	cout << endl;
+	cout << "pos" << "\t" << "refScore" << "\t" << "patScore" << "\t"
+			<< "dif_abs " << "\t" << "dif_rel " << endl;
+	for (unsigned foundBindingSiteIndex = 0; foundBindingSiteIndex < length(
+			myFoundBindingSiteList); ++foundBindingSiteIndex) {
+		cout << myFoundBindingSiteList[foundBindingSiteIndex].position << "\t"
+				<< myFoundBindingSiteList[foundBindingSiteIndex].referenceScore
+				<< "\t"
+				<< myFoundBindingSiteList[foundBindingSiteIndex].patientScore
+				<< "\t"
+				<< myFoundBindingSiteList[foundBindingSiteIndex].patientScore
+						- myFoundBindingSiteList[foundBindingSiteIndex].referenceScore
+				<< "\t"
+				<< (myFoundBindingSiteList[foundBindingSiteIndex].patientScore
+						- myFoundBindingSiteList[foundBindingSiteIndex].referenceScore)
+						/ myFoundBindingSiteList[foundBindingSiteIndex].referenceScore
+				<< endl;
+	}
+	cout << endl;
+}
+
+// --------------------------------------------------------------------------
+// Function main()
+// --------------------------------------------------------------------------
+
+// Program entry point.
+
+int main() {
+	TAbsoluteMatrix myAbsoluteMatrix = createAbsoluteMatrix();
+	TFrequencyMatrix myFrequencyMatrix = absoluteToFrequencyMatrix(myAbsoluteMatrix,AddPseudoCount());
+	TSequence mySequence = createSequence();
+	TVariantList myVariantList = createVariantList();
+//	double myThreshold = determineThreshold(myFrequencyMatrix);
+	double myThreshold = 7.34467e-07;
+	printFoundBindingSiteList(searchRelevantBindingsites(myFrequencyMatrix, mySequence, myVariantList, myThreshold, ProductScore()),myThreshold);
+	printFoundBindingSiteList(searchRelevantBindingsites(myAbsoluteMatrix, mySequence, myVariantList, 0.5, MatchScore()),0.5);
+	return 0;
+}
+
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/first_app.cpp~ ./sandbox/my_sandbox/apps/first_app/first_app.cpp~
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/first_app.cpp~	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/apps/first_app/first_app.cpp~	2012-09-04 13:17:59.661988736 +0200
@@ -0,0 +1,150 @@
+// ==========================================================================
+//                                 first_app
+// ==========================================================================
+// Copyright (c) 2006-2012, Knut Reinert, FU Berlin
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright
+//       notice, this list of conditions and the following disclaimer.
+//     * Redistributions in binary form must reproduce the above copyright
+//       notice, this list of conditions and the following disclaimer in the
+//       documentation and/or other materials provided with the distribution.
+//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
+//       its contributors may be used to endorse or promote products derived
+//       from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+// DAMAGE.
+//
+// ==========================================================================
+// Author: Your Name <your.email@example.net>
+// ==========================================================================
+
+#include <seqan/basic.h>
+#include <seqan/sequence.h>
+
+#include <seqan/arg_parse.h>
+
+// ==========================================================================
+// Classes
+// ==========================================================================
+
+// --------------------------------------------------------------------------
+// Class AppOptions
+// --------------------------------------------------------------------------
+
+// This struct stores the options from the command line.
+//
+// You might want to rename this to reflect the name of your app.
+
+struct AppOptions
+{
+    // Verbosity level.  0 -- quiet, 1 -- normal, 2 -- verbose, 3 -- very verbose.
+    int verbosity;
+
+    // The first (and only) argument of the program is stored here.
+    seqan::CharString text;
+
+    AppOptions() :
+        verbosity(1)
+    {}
+};
+
+// ==========================================================================
+// Functions
+// ==========================================================================
+
+// --------------------------------------------------------------------------
+// Function parseCommandLine()
+// --------------------------------------------------------------------------
+
+seqan::ArgumentParser::ParseResult
+parseCommandLine(AppOptions & options, int argc, char const ** argv)
+{
+    // Setup ArgumentParser.
+    seqan::ArgumentParser parser("first_app");
+    // Set short description, version, and date.
+    setShortDescription(parser, "Put a Short Description Here");
+    setVersion(parser, "0.1");
+    setDate(parser, "July 2012");
+
+    // Define usage line and long description.
+    addUsageLine(parser, "[\\fIOPTIONS\\fP] \"\\fITEXT\\fP\"");
+    addDescription(parser, "This is the application skelleton and you should modify this string.");
+
+    // We require one argument.
+    addArgument(parser, seqan::ArgParseArgument(seqan::ArgParseArgument::STRING, "TEXT"));
+
+    addOption(parser, seqan::ArgParseOption("q", "quiet", "Set verbosity to a minimum."));
+    addOption(parser, seqan::ArgParseOption("v", "verbose", "Enable verbose output."));
+    addOption(parser, seqan::ArgParseOption("vv", "very-verbose", "Enable very verbose output."));
+
+    // Add Examples Section.
+    addTextSection(parser, "Examples");
+    addListItem(parser, "\\fBfirst_app\\fP \\fB-v\\fP \\fItext\\fP",
+                "Call with \\fITEXT\\fP set to \"text\" with verbose output.");
+
+    // Parse command line.
+    seqan::ArgumentParser::ParseResult res = seqan::parse(parser, argc, argv);
+
+    // Only extract  options if the program will continue after parseCommandLine()
+    if (res != seqan::ArgumentParser::PARSE_OK)
+        return res;
+
+    // Extract option values.
+    if (isSet(parser, "quiet"))
+        options.verbosity = 0;
+    if (isSet(parser, "verbose"))
+        options.verbosity = 2;
+    if (isSet(parser, "very-verbose"))
+        options.verbosity = 3;
+    seqan::getArgumentValue(options.text, parser, 0);
+
+    return seqan::ArgumentParser::PARSE_OK;
+}
+
+// --------------------------------------------------------------------------
+// Function main()
+// --------------------------------------------------------------------------
+
+// Program entry point.
+
+int main(int argc, char const ** argv)
+{
+    // Parse the command line.
+    seqan::ArgumentParser parser;
+    AppOptions options;
+    seqan::ArgumentParser::ParseResult res = parseCommandLine(options, argc, argv);
+
+    // If there was an error parsing or built-in argument parser functionality
+    // was triggered then we exit the program.  The return code is 1 if there
+    // were errors and 0 if there were none.
+    if (res != seqan::ArgumentParser::PARSE_OK)
+        return res == seqan::ArgumentParser::PARSE_ERROR;
+
+    std::cout << "EXAMPLE PROGRAM\n"
+              << "===============\n\n";
+    
+    // Print the command line arguments back to the user.
+    if (options.verbosity > 0)
+    {
+        std::cout << "__OPTIONS____________________________________________________________________\n"
+                  << '\n'
+                  << "VERBOSITY\t" << options.verbosity << '\n'
+                  << "TEXT     \t" << options.text << "\n\n";
+    }
+
+    return 0;
+}
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/INFO ./sandbox/my_sandbox/apps/first_app/INFO
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/INFO	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/apps/first_app/INFO	2012-09-04 13:15:45.131058288 +0200
@@ -0,0 +1,21 @@
+Name: first_app
+Author: Your Name <your.email@example.net>
+Maintainer: Your Name <your.email@example.net>
+License: GPL v3
+Copyright: 2008-2012, FU Berlin
+Status: under development
+Description: One-line description for app first_app.
+ This is the long text description for the app.  You should wrap text to 78
+ characters and you have to wrap it to 80 characters.  The lines must have one
+ leading space.  Successive lines in this format will be word-wrapped when
+ displayed.  Leading space is stripped off.
+ .
+ Use empty lines with one dot to insert an empty line / break paragraphs.
+ .
+  Start lines with two spaces to make them display verbatim.  Lines that
+  cannot be displayed horizontally will be hard-wrapped (not at word bor-
+  ders), so maybe do your own hyphenation.
+ .
+ Do not use tab characters, their effect is not predictable.
+ .
+ The INFO file format is oriented after the Debian controfields format.
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/CMakeLists.txt ./sandbox/my_sandbox/CMakeLists.txt
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/CMakeLists.txt	2012-09-04 13:15:15.003297813 +0200
@@ -0,0 +1,11 @@
+cmake_minimum_required (VERSION 2.6)
+project (seqan_sandbox_my_sandbox)
+
+# We have to register our own include directory here, though.
+seqan_setup_includes(include SeqAnSandboxMy_sandbox)
+# SeqAnCore is added include in ../core/CMakeLists.txt.  We only have to
+# register that we want it here, too.  Same for SeqAnExtras.
+seqan_make_seqan_available(SeqAnCore)
+seqan_make_seqan_available(SeqAnExtras)
+
+seqan_add_all_subdirectories()  # include_directory(*)
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/demos/CMakeLists.txt ./sandbox/my_sandbox/demos/CMakeLists.txt
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/demos/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/demos/CMakeLists.txt	2012-09-04 13:15:15.015297720 +0200
@@ -0,0 +1,6 @@
+cmake_minimum_required (VERSION 2.6)
+project (seqan_sandbox_my_sandbox_demos)
+
+seqan_setup_demos(sandbox_my_sandbox_demos)  # Add meta target and make executables depend on it.
+
+seqan_add_all_executables(sandbox_my_sandbox_demos)
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/tests/CMakeLists.txt ./sandbox/my_sandbox/tests/CMakeLists.txt
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/tests/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/tests/CMakeLists.txt	2012-09-04 13:15:15.011297757 +0200
@@ -0,0 +1,6 @@
+cmake_minimum_required (VERSION 2.6)
+project (seqan_sandbox_my_sandbox_tests)
+
+seqan_setup_tests(sandbox_my_sandbox_tests)  # Setup flags etc, add meta target.
+
+seqan_add_all_subdirectories()  # include_directory(*)

diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/jasparParser/jasparParser.cpp ./sandbox/robinson/apps/jasparParser/jasparParser.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/jasparParser/jasparParser.cpp	2012-08-28 20:03:42.000000000 +0200
+++ ./sandbox/robinson/apps/jasparParser/jasparParser.cpp	2012-09-04 15:38:33.632914201 +0200
@@ -13,8 +13,6 @@
 	CharString id;
 	CharString name;
 	FrequencyMatrix matrix;
-	JasparRecord() {
-	}
 };
 void clear(JasparRecord & record) {
 	clear(record.id);
@@ -23,10 +21,8 @@
 }
 
 template<typename TStream, typename TPass>
-int readRecord(JasparRecord & record, RecordReader<TStream, TPass> & reader,
+int readRecord(CharString & id, CharString & name, String<ProfileChar<Dna> > & matrix, RecordReader<TStream, TPass> & reader, // record splitten in id name matrix
 		Jaspar const & /*tag*/) {
-	clear(record);
-	int res = 0;
 	// Jaspar records look like this:
 	//
 	// ><id> <name>
@@ -35,48 +31,64 @@
 	// G  [xx x xx ... x ]
 	// T  [xx xx xx ... x ]
 
+
+
+	clear(record);
+	int res = 0;
+
 	// skip until record begin
 	res = skipUntilChar(reader, '>');
 	if (res != 0)
 		return res;
+
 	// <id>
 	if (goNext(reader)) // skip the '>'
 		return EOF_BEFORE_SUCCESS;
-	res = readUntilChar(record.id, reader, ' ');
+
+	res = readUntilWhitespace(id, reader);
 	if (res != 0)
 		return res;
+
 	if (goNext(reader))
 		return EOF_BEFORE_SUCCESS;
+
 	// <name>
-	res = readUntilChar(record.name, reader, '\n');
+	res = readLine(name, reader);
 	if (res != 0)
 		return res;
-	if (goNext(reader))
-		return EOF_BEFORE_SUCCESS;
 
 	for (int rowIndex = 0; rowIndex < 4; ++rowIndex) { // for 0 to 3 meaning for A, C, G, T
-		res = skipUntilChar(reader, '[');
+
+		res = skipNCharsIgnoringWhitespace(reader, 1);
 		if (res != 0)
 			return res;
+
 		if (goNext(reader)) // skip the '['
 			return EOF_BEFORE_SUCCESS;
+
 		res = skipWhitespaces(reader);
 		if (res != 0)
 			return res;
+
 		int columnIndex = 0;
 		while (value(reader) != ']') {
 			CharString bufferString;
+
 			res = readUntilWhitespace(bufferString, reader);
 			if (res != 0)
 				return res;
+
 			if (rowIndex == 0)
-				resize(record.matrix, length(record.matrix) + 1);
+				resize(matrix, length(record.matrix) + 1);
+
 			if (!lexicalCast2<unsigned> (
-					record.matrix[columnIndex].count[rowIndex], bufferString))
+					matrix[columnIndex].count[rowIndex], bufferString))
 				return 1; // Could not cast or could not write into matrix!
+
 			res = skipWhitespaces(reader);
 			if (res != 0)
 				return res;
+
 			++columnIndex;
 		}
 	}
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_test/ws_test.cpp ./sandbox/robinson/apps/ws_test/ws_test.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_test/ws_test.cpp	2012-09-04 13:11:55.000000000 +0200
+++ ./sandbox/robinson/apps/ws_test/ws_test.cpp	2012-09-04 16:16:43.937071796 +0200
@@ -1,150 +1,80 @@
-// ==========================================================================
-//                                  ws_test
-// ==========================================================================
-// Copyright (c) 2006-2012, Knut Reinert, FU Berlin
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//     * Redistributions of source code must retain the above copyright
-//       notice, this list of conditions and the following disclaimer.
-//     * Redistributions in binary form must reproduce the above copyright
-//       notice, this list of conditions and the following disclaimer in the
-//       documentation and/or other materials provided with the distribution.
-//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
-//       its contributors may be used to endorse or promote products derived
-//       from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
-// DAMAGE.
-//
-// ==========================================================================
-// Author: Your Name <your.email@example.net>
-// ==========================================================================
-
-#include <seqan/basic.h>
-#include <seqan/sequence.h>
-
+#include <iostream>
+#include <seqan/store.h>
 #include <seqan/arg_parse.h>
+#include <seqan/misc/misc_interval_tree.h>
+#include <seqan/parallel.h>
 
-// ==========================================================================
-// Classes
-// ==========================================================================
-
-// --------------------------------------------------------------------------
-// Class AppOptions
-// --------------------------------------------------------------------------
-
-// This struct stores the options from the command line.
-//
-// You might want to rename this to reflect the name of your app.
-
-struct AppOptions
+using namespace seqan;
+// define used types
+typedef FragmentStore<> TStore;
+// define options
+struct Options
 {
-    // Verbosity level.  0 -- quiet, 1 -- normal, 2 -- verbose, 3 -- very verbose.
-    int verbosity;
-
-    // The first (and only) argument of the program is stored here.
-    seqan::CharString text;
-
-    AppOptions() :
-        verbosity(1)
-    {}
+    std::string annotationFileName;
+    std::string alignmentFileName;
 };
-
-// ==========================================================================
-// Functions
-// ==========================================================================
-
-// --------------------------------------------------------------------------
-// Function parseCommandLine()
-// --------------------------------------------------------------------------
-
-seqan::ArgumentParser::ParseResult
-parseCommandLine(AppOptions & options, int argc, char const ** argv)
-{
-    // Setup ArgumentParser.
-    seqan::ArgumentParser parser("ws_test");
-    // Set short description, version, and date.
-    setShortDescription(parser, "Put a Short Description Here");
-    setVersion(parser, "0.1");
-    setDate(parser, "July 2012");
-
-    // Define usage line and long description.
-    addUsageLine(parser, "[\\fIOPTIONS\\fP] \"\\fITEXT\\fP\"");
-    addDescription(parser, "This is the application skelleton and you should modify this string.");
-
-    // We require one argument.
-    addArgument(parser, seqan::ArgParseArgument(seqan::ArgParseArgument::STRING, "TEXT"));
-
-    addOption(parser, seqan::ArgParseOption("q", "quiet", "Set verbosity to a minimum."));
-    addOption(parser, seqan::ArgParseOption("v", "verbose", "Enable verbose output."));
-    addOption(parser, seqan::ArgParseOption("vv", "very-verbose", "Enable very verbose output."));
-
-    // Add Examples Section.
-    addTextSection(parser, "Examples");
-    addListItem(parser, "\\fBws_test\\fP \\fB-v\\fP \\fItext\\fP",
-                "Call with \\fITEXT\\fP set to \"text\" with verbose output.");
-
-    // Parse command line.
-    seqan::ArgumentParser::ParseResult res = seqan::parse(parser, argc, argv);
-
-    // Only extract  options if the program will continue after parseCommandLine()
-    if (res != seqan::ArgumentParser::PARSE_OK)
-        return res;
-
-    // Extract option values.
-    if (isSet(parser, "quiet"))
-        options.verbosity = 0;
-    if (isSet(parser, "verbose"))
-        options.verbosity = 2;
-    if (isSet(parser, "very-verbose"))
-        options.verbosity = 3;
-    seqan::getArgumentValue(options.text, parser, 0);
-
-    return seqan::ArgumentParser::PARSE_OK;
-}
-
-// --------------------------------------------------------------------------
-// Function main()
-// --------------------------------------------------------------------------
-
-// Program entry point.
-
-int main(int argc, char const ** argv)
+//
+// 1. Parse command line and fill Options object
+//
+ArgumentParser::ParseResult parseOptions(Options & options, int argc, char const * argv[])
 {
-    // Parse the command line.
-    seqan::ArgumentParser parser;
-    AppOptions options;
-    seqan::ArgumentParser::ParseResult res = parseCommandLine(options, argc, argv);
-
-    // If there was an error parsing or built-in argument parser functionality
-    // was triggered then we exit the program.  The return code is 1 if there
-    // were errors and 0 if there were none.
-    if (res != seqan::ArgumentParser::PARSE_OK)
-        return res == seqan::ArgumentParser::PARSE_ERROR;
-
-    std::cout << "EXAMPLE PROGRAM\n"
-              << "===============\n\n";
-    
-    // Print the command line arguments back to the user.
-    if (options.verbosity > 0)
+    ArgumentParser parser("gene_quant");
+    setShortDescription(parser, "A simple gene quantification tool");
+    setVersion(parser, "1.0");
+    setDate(parser, "Sep 2012");
+    addArgument(parser, ArgParseArgument(ArgParseArgument::INPUTFILE));
+    addArgument(parser, ArgParseArgument(ArgParseArgument::INPUTFILE));
+    addUsageLine(parser, "[\\fIOPTIONS\\fP] <\\fIANNOTATION FILE\\fP> <\\fIREAD ALIGNMENT FILE\\fP>");
+    // Parse command line
+    ArgumentParser::ParseResult res = parse(parser, argc, argv);
+    if (res == ArgumentParser::PARSE_OK)
     {
-        std::cout << "__OPTIONS____________________________________________________________________\n"
-                  << '\n'
-                  << "VERBOSITY\t" << options.verbosity << '\n'
-                  << "TEXT     \t" << options.text << "\n\n";
+        // Extract option values
+        getArgumentValue(options.annotationFileName, parser, 0);
+        getArgumentValue(options.alignmentFileName, parser, 1);
     }
-
+    return res;
+}
+//
+// 2. Load annotations and alignments from files
+//
+bool loadFiles(TStore & store, Options const & options)
+{
+	//
+	// 2. Load annotations and alignments from files
+	//
+	bool loadFiles(TStore & store, Options const & options)
+	{
+	    std::ifstream alignmentFile(options.alignmentFileName.c_str());
+	    if (!alignmentFile.good())
+	    {
+	        std::cerr << "Couldn't open alignment file " << options.alignmentFileName << std::endl;
+	        return false;
+	    }
+	    std::cerr << "Loading read alignments ..... " << std::flush;
+	    read(alignmentFile, store, Sam());
+	    std::cerr << "[" << length(store.alignedReadStore) << "]" << std::endl;
+	    // load annotations
+	    std::ifstream annotationFile(options.annotationFileName.c_str());
+	    if (!annotationFile.good())
+	    {
+	        std::cerr << "Couldn't open annotation file" << options.annotationFileName << std::endl;
+	        return false;
+	    }
+	    std::cerr << "Loading genome annotation ... " << std::flush;
+	    read(annotationFile, store, Gtf());
+	    std::cerr << "[" << length(store.annotationStore) << "]" << std::endl;
+	    return true;
+	}
+}
+int main(int argc, char const * argv[])
+{
+    Options options;
+    TStore store;
+    ArgumentParser::ParseResult res = parseOptions(options, argc, argv);
+    if (res != ArgumentParser::PARSE_OK)
+        return res == ArgumentParser::PARSE_ERROR;
+    if (!loadFiles(store, options))
+        return 1;
     return 0;
 }

diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/lmlucd3w6tzrgr57_stats.txt -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/userdata/lmlucd3w6tzrgr57_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/grunert/apps/first_app/first_app.cpp ./sandbox/grunert/apps/first_app/first_app.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/grunert/apps/first_app/first_app.cpp	2012-09-04 15:37:39.000000000 +0200
+++ ./sandbox/grunert/apps/first_app/first_app.cpp	2012-09-04 15:58:11.000000000 +0200
@@ -1,71 +1,72 @@
 #include <iostream>
-#include <seqan/file.h>
-#include <seqan/score.h>
 #include <seqan/sequence.h>
+#include <seqan/file.h>
 
-
-
-template <typename TText, typename TPattern>
-int computeLocalScore(TText const & subText, TPattern const & pattern)
-{
-    int localScore = 0;
-    for (unsigned i = 0; i < seqan::length(pattern); ++i)
-        if (subText[i] == pattern[i])
-            ++localScore;
-    return localScore;
+using namespace seqan;
+// Function to print simple alignment between two sequences with the same length
+template <typename TText1, typename TText2>
+void printAlign(TText1 const & genomeFragment, TText2 const & read)
+{
+    std::cout <<  "Alignment " << std::endl;
+    std::cout << "  genome : " << genomeFragment << std::endl;
+    std::cout << "  read   : " << read << std::endl;
 }
 
-
-template <typename TText>
-int computeLocalScore(TText const & subText, seqan::String<seqan::AminoAcid> const & pattern)
+int main(int, char const **)
 {
-    int localScore = 0;
-    for (unsigned i = 0; i < seqan::length(pattern); ++i)
-        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);
+    // Build reads and genomes
+    DnaString chr1 = "TATAATATTGCTATCGCGATATCGCTAGCTAGCTACGGATTATGCGCTCTGCGATATATCGCGCTAGATGTGCAGCTCGATCGAATGCACGTGTGTGCGATCGATTAGCGTCGATCATCGATCTATATTAGCGCGCGGTATCGGACGATCATATTAGCGGTCTAGCATTTAG";
     
-    return localScore;
-}
-
-
-template <typename TText, typename TPattern>
-seqan::String<int> computeScore(TText const & text, TPattern const & pattern)
-{
-    seqan::String<int> score;
-    seqan::resize(score, seqan::length(text), 0);
-    for (unsigned i = 0; i < seqan::length(text) - seqan::length(pattern) + 1; ++i)
-            score[i] = computeLocalScore(infix(text, i, i + seqan::length(pattern)), pattern);
-    return score;
-}
-
-
-
-void printout(seqan::String<int> const & text)
-{
-    for (unsigned i = 0; i < seqan::length(text); ++i)
-        std::cout << text[i] << " ";
-        
-    std::cout << std::endl;
-}
-
-
-template <typename TText>
-void printout(TText const & text)
-{
-    for (unsigned i = 0; i < seqan::length(text); ++i)
-        std::cout << text[i] << " ";
+    // Build List containing all reads
+    typedef String<DnaString> TDnaList;
+    TDnaList readList;
+    resize(readList, 4);
+    readList[0] = "TTGCTATCGCGATATCGCTAGCTAGCTACGGATTATGCGCTCTGCGATATATCGCGCT";
+    readList[1] = "TCGATTAGCGTCGATCATCGATCTATATTAGCGCGCGGTATCGGACGATCATATTAGCGGTCTAGCATT";
+    readList[2] = "AGCCTGCGTACGTTGCAGTGCGTGCGTAGACTGTTGCAAGCCGGGGGTTCATGTGCGCTGAAGCACACATGCACA";
+    readList[3] = "CGTGCACTGCTGACGTCGTGGTTGTCACATCGTCGTGCGTGCGTACTGCTGCTGACA";
     
-    std::cout << std::endl;
-}
-
-
-
-int main()
-{
-    seqan::String<char> text = "This is an awesome tutorial to get to now SeqAn!";
-    seqan::String<char> pattern = "tutorial";
-    seqan::String<int> score = computeScore(text, pattern);
+    // Append a second chromosome sequence fragment to chr1
+    DnaString chr2 = "AGCCTGCGTACGTTGCAGTGCGTGCGTAGACTGTTGCAAGCCGGGGGTTCATGTGCGCTGAAGCACACATGCACACGTCTCTGTGTTCCGACGTGTGTCACGTGCACTGCTGACGTCGTGGTTGTCACATCGTCGTGCGTGCGTACTGCTGCTGACACATGCTGCTG";
+    append(chr1, chr2);
+    
+    // Print readlist
+    std::cout << " \n Read list: " << std::endl;
+    for(unsigned i = 0; i < length(readList); ++i)
+        std::cout << readList[i] << std::endl;
+    
+    // Assume we have mapped the 4 reads to chr1 (and chr2) and now have the mapping start positions (no gaps).
+    // Store the start position in a String alignPosList: 7, 100, 172, 272
+    
+    typedef String<int> TPosPosList;
+    TPosPosList alignPosList;
+    resize(alignPosList, 4);
+    alignPosList[0] = 7;
+    alignPosList[1] = 100;
+    alignPosList[2] = 172;
+    alignPosList[3] = 272;
     
-    printout (score);
+    // Optional
+    // Bisulfite conversion
+    // Assume chr1 is beeing bisulfate treated: Copy chr1 to a new genome bsChr1 and exchange every 'C' with a 'T'
+    DnaString bsChr1;
     
-    return 0;
+    // Print alignments of the reads with chr1 (or bsChr1) sequence using the function printAlign
+    // and the positions in alignPosList.
+    // To do that, you have to create a copy of the fragment in chr1 (bsChr1) that is aligned to the read.
+    std::cout << " \n Print alignment: " << std::endl;
+    for(unsigned i = 0; i < length(readList); ++i)
+    {
+        // Temporary copy of begin position (beginPosition) from alignPosList
+        // of a given alignment between the read and the genome
+        
+        // Genome fragment
+        DnaString genomeFragment;
+        // We have to create a copy of the corresponding fragment of the genome, where the read aligns to
+        
+        
+        // Call of our function to print the simple alignment
+        printAlign(genomeFragment, readList[i]);
+    }
+    return 1;
 }
\ No newline at end of file

diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/robert/SeqAn/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/y4oycw36249shrvs_stats.txt -x /home/robert/SeqAn/Development/seqan-trunk/misc/seqan_instrumentation/userdata/y4oycw36249shrvs_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/robert/SeqAn/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/robert/SeqAn/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/robert/SeqAn/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/robert/SeqAn/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/robert/SeqAn/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_ass2/apps/ass2/ass2.cpp ./sandbox/my_ass2/apps/ass2/ass2.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_ass2/apps/ass2/ass2.cpp	2012-09-04 14:43:52.000000000 +0200
+++ ./sandbox/my_ass2/apps/ass2/ass2.cpp	2012-09-04 16:01:22.105386137 +0200
@@ -1,150 +1,75 @@
-// ==========================================================================
-//                                    ass2
-// ==========================================================================
-// Copyright (c) 2006-2012, Knut Reinert, FU Berlin
-// All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions are met:
-//
-//     * Redistributions of source code must retain the above copyright
-//       notice, this list of conditions and the following disclaimer.
-//     * Redistributions in binary form must reproduce the above copyright
-//       notice, this list of conditions and the following disclaimer in the
-//       documentation and/or other materials provided with the distribution.
-//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
-//       its contributors may be used to endorse or promote products derived
-//       from this software without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
-// DAMAGE.
-//
-// ==========================================================================
-// Author: Your Name <your.email@example.net>
-// ==========================================================================
-
-#include <seqan/basic.h>
-#include <seqan/sequence.h>
-
-#include <seqan/arg_parse.h>
-
-// ==========================================================================
-// Classes
-// ==========================================================================
-
-// --------------------------------------------------------------------------
-// Class AppOptions
-// --------------------------------------------------------------------------
-
-// This struct stores the options from the command line.
-//
-// You might want to rename this to reflect the name of your app.
-
-struct AppOptions
+#include <iostream>
+#include <seqan/sequence.h> 
+#include <seqan/file.h>
+
+using namespace seqan;
+// Function to print simple alignment between two sequences with the same length
+template <typename TText1, typename TText2>
+void printAlign(TText1 const & genomeFragment, TText2 const & read)
 {
-    // Verbosity level.  0 -- quiet, 1 -- normal, 2 -- verbose, 3 -- very verbose.
-    int verbosity;
-
-    // The first (and only) argument of the program is stored here.
-    seqan::CharString text;
-
-    AppOptions() :
-        verbosity(1)
-    {}
-};
-
-// ==========================================================================
-// Functions
-// ==========================================================================
-
-// --------------------------------------------------------------------------
-// Function parseCommandLine()
-// --------------------------------------------------------------------------
-
-seqan::ArgumentParser::ParseResult
-parseCommandLine(AppOptions & options, int argc, char const ** argv)
-{
-    // Setup ArgumentParser.
-    seqan::ArgumentParser parser("ass2");
-    // Set short description, version, and date.
-    setShortDescription(parser, "Put a Short Description Here");
-    setVersion(parser, "0.1");
-    setDate(parser, "July 2012");
-
-    // Define usage line and long description.
-    addUsageLine(parser, "[\\fIOPTIONS\\fP] \"\\fITEXT\\fP\"");
-    addDescription(parser, "This is the application skelleton and you should modify this string.");
-
-    // We require one argument.
-    addArgument(parser, seqan::ArgParseArgument(seqan::ArgParseArgument::STRING, "TEXT"));
-
-    addOption(parser, seqan::ArgParseOption("q", "quiet", "Set verbosity to a minimum."));
-    addOption(parser, seqan::ArgParseOption("v", "verbose", "Enable verbose output."));
-    addOption(parser, seqan::ArgParseOption("vv", "very-verbose", "Enable very verbose output."));
-
-    // Add Examples Section.
-    addTextSection(parser, "Examples");
-    addListItem(parser, "\\fBass2\\fP \\fB-v\\fP \\fItext\\fP",
-                "Call with \\fITEXT\\fP set to \"text\" with verbose output.");
-
-    // Parse command line.
-    seqan::ArgumentParser::ParseResult res = seqan::parse(parser, argc, argv);
-
-    // Only extract  options if the program will continue after parseCommandLine()
-    if (res != seqan::ArgumentParser::PARSE_OK)
-        return res;
-
-    // Extract option values.
-    if (isSet(parser, "quiet"))
-        options.verbosity = 0;
-    if (isSet(parser, "verbose"))
-        options.verbosity = 2;
-    if (isSet(parser, "very-verbose"))
-        options.verbosity = 3;
-    seqan::getArgumentValue(options.text, parser, 0);
-
-    return seqan::ArgumentParser::PARSE_OK;
+        std::cout <<  "Alignment " << std::endl;
+        std::cout << "  genome : " << genomeFragment << std::endl;
+        std::cout << "  read   : " << read << std::endl;
 }
 
-// --------------------------------------------------------------------------
-// Function main()
-// --------------------------------------------------------------------------
-
-// Program entry point.
-
-int main(int argc, char const ** argv)
+int main(int, char const **)
 {
-    // Parse the command line.
-    seqan::ArgumentParser parser;
-    AppOptions options;
-    seqan::ArgumentParser::ParseResult res = parseCommandLine(options, argc, argv);
-
-    // If there was an error parsing or built-in argument parser functionality
-    // was triggered then we exit the program.  The return code is 1 if there
-    // were errors and 0 if there were none.
-    if (res != seqan::ArgumentParser::PARSE_OK)
-        return res == seqan::ArgumentParser::PARSE_ERROR;
+    // Build reads and genomes
+    DnaString chr1 = "TATAATATTGCTATCGCGATATCGCTAGCTAGCTACGGATTATGCGCTCTGCGATATATCGCGCTAGATGTGCAGCTCGATCGAATGCACGTGTGTGCGATCGATTAGCGTCGATCATCGATCTATATTAGCGCGCGGTATCGGACGATCATATTAGCGGTCTAGCATTTAG";
 
-    std::cout << "EXAMPLE PROGRAM\n"
-              << "===============\n\n";
+    // Build List containing all reads
+    typedef String<DnaString> TDnaList;
+    TDnaList readList;
+    resize(readList, 4);
+    readList[0] = "TTGCTATCGCGATATCGCTAGCTAGCTACGGATTATGCGCTCTGCGATATATCGCGCT";
+    readList[1] = "TCGATTAGCGTCGATCATCGATCTATATTAGCGCGCGGTATCGGACGATCATATTAGCGGTCTAGCATT";
+    readList[2] = "AGCCTGCGTACGTTGCAGTGCGTGCGTAGACTGTTGCAAGCCGGGGGTTCATGTGCGCTGAAGCACACATGCACA";
+    readList[3] = "CGTGCACTGCTGACGTCGTGGTTGTCACATCGTCGTGCGTGCGTACTGCTGCTGACA";
     
-    // Print the command line arguments back to the user.
-    if (options.verbosity > 0)
+    // Append a second chromosome sequence fragment to chr1
+    DnaString chr2 = "AGCCTGCGTACGTTGCAGTGCGTGCGTAGACTGTTGCAAGCCGGGGGTTCATGTGCGCTGAAGCACACATGCACACGTCTCTGTGTTCCGACGTGTGTCACGTGCACTGCTGACGTCGTGGTTGTCACATCGTCGTGCGTGCGTACTGCTGCTGACACATGCTGCTG";
+    append(chr1, chr2);
+   
+    // Print readlist
+    std::cout << " \n Read list: " << std::endl;
+    for(unsigned i = 0; i < length(readList); ++i)
+        std::cout << readList[i] << std::endl;
+
+    // Assume we have mapped the 4 reads to chr1 (and chr2) and now have the mapping start positions (no gaps).
+    // Store the start position in a String alignPosList: 7, 100, 172, 272
+    String<unsigned> alignPosList;
+    resize(alignPosList, 4);
+    alignPosList[0] = 7;
+    alignPosList[1] = 100;
+    alignPosList[2] = 172;
+    alignPosList[3] = 272;
+    
+    
+    
+    // Optional
+    // Bisulfite conversion
+    // Assume chr1 is beeing bisulfate treated: Copy chr1 to a new genome bsChr1 and exchange every 'C' with a 'T'
+    
+    
+    DnaString bsChr1;
+  
+    // Print alignments of the reads with chr1 (or bsChr1) sequence using the function printAlign
+    // and the positions in alignPosList.
+    // To do that, you have to create a copy of the fragment in chr1 (bsChr1) that is aligned to the read.
+    std::cout << " \n Print alignment: " << std::endl;
+    for(unsigned i = 0; i < length(readList); ++i)
     {
-        std::cout << "__OPTIONS____________________________________________________________________\n"
-                  << '\n'
-                  << "VERBOSITY\t" << options.verbosity << '\n'
-                  << "TEXT     \t" << options.text << "\n\n";
-    }
+        // Temporary copy of begin position (beginPosition) from alignPosList
+        // of a given alignment between the read and the genome
+       unsigned beginPosition alignPosList[i];
+        // Genome fragment
+        DnaString genomeFragment;
+        // We have to create a copy of the corresponding fragment of the genome, where the read aligns to
+        for (unsigned j = 0; j < length(readList[i]); ++j)
+            appendValue(genomeFragment, chr1[beginPosition+j]);
 
-    return 0;
+        // Call of our function to print the simple alignment
+        printAlign(genomeFragment, readList[i]);
+    }
+    return 1;
 }

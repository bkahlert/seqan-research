diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/brbym28nz827lxic_stats.txt -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata/brbym28nz827lxic_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/meyerclp/apps/dreme/dreme.cpp ./sandbox/meyerclp/apps/dreme/dreme.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/meyerclp/apps/dreme/dreme.cpp	2012-07-18 11:50:40.060609500 +0200
+++ ./sandbox/meyerclp/apps/dreme/dreme.cpp	2012-07-18 12:13:22.717609500 +0200
@@ -44,8 +44,8 @@
 	write2(outfile,sequences.ids,background.seqs,Fasta());
 
 	outfile.close();
-	
-	std::ofstream output;*/
+	*/
+	std::ofstream output;
 	
 
 
@@ -65,131 +65,131 @@
 	do{
 		std::cout<<"new "<<std::endl;
 	
-	std::cout<<"init done"<<std::endl;
-	sequences.generalizedSortedPValue.clear();
-	/*****
-		- Bruteforce --> gets alls possible motifs form length 3 to 8 and counts them.
-		- Only one occurence per sequence allowed
-	*****/
-	initExactKmer(sequences,background,kmer_len,kmer_len_end);
-
-	std::cout<<"Exact done"<<std::endl;
-
-	/*****
-		- Computes the pValue of each motif due to the counter and saves it in SortedPValue
-	*****/
-	
-	FisherExactTest(sequences,background);
-
-	std::cout<<"Fisher done"<<std::endl;
-
-	/*****
-		- initiate by repeatedly picking the top motifs from SortedPValue
-		- calls GeneralizeKmer and adds one wildcard to the Kmer and estimates the counter
-		- after one generalization-round(top 100 motifs) the FisherExactTest is called, to compute the new SortedPValue-Map
-		- if there is a pValue<treshold start again by picking the new top motifs
-	*****/
-	//PrintMap(sequences.SortedPValue);
-	InitGeneralization(IMaps,sequences,background);
-	std::cout<<"Generalize done"<<std::endl;
-	//PrintMap(sequences.generalizedSortedPValue);
-	sequences.seqCounter.clear();
-	background.seqCounter.clear();
-	sequences.SortedPValueReversed.clear();
-
-	/*****
-		- if there is not a single pValue<treshold exit the programm
-	*****/
-	if(sequences.generalizedSortedPValue.size()==0){
-		std::cout<<"Could not find a pValue<treshold";
-		std::exit(1);
 	
-	}
-	//PrintMap(sequences.generalizedSortedPValue);
-
-	std::map<String<Iupac>,unsigned int > seqCounter;
-	std::map<String<Iupac>,unsigned int > backCounter;
-	Finder<Index<StringSet<String<Dna5> > > > finder(sequences.SArray);
-	Finder<Index<StringSet<String<Dna5> > > > finderB(background.SArray);//finder ins struct
-	
-	/*****
-		- gets the top 100(generalized) motifs and computes the exact counter and pValue
-	*****/
-	
-	exactGeneralizeCount(seqCounter,backCounter, finder, finderB,sequences,background, IMaps);
-	std::cout<<"exactGeneralize done"<<std::endl;
-
-	//PrintFastA(sequences);
-
-	//PrintMap(sequences.generalizedSortedPValue);
-
-	//std::cout<<sequences.generalizedSortedPValue.begin()->second;
-	
-	std::map<unsigned int,std::map<Iupac,double> > freqMatrix;
-	std::map<unsigned int,std::map<Iupac,double> > freqMatrixB;
-	double a=4;
-	//output.open("output.fasta",std::ios::out|std::ios::app);
-	//write(output,(*sequences.generalizedSortedPValue.begin()).second);
-	//write(output,"   ");
-	//
-	//output<<(*sequences.generalizedSortedPValue.begin()).first;
-	//write(output,"   ");
-	//output.close();
-	//std::cout<<"first "<<(*sequences.generalizedSortedPValue.begin()).first<<std::endl;
-	/*****
-		- Computes the probability of each nucleotide to appear at each position (from the top motif)
-		- first output
-	*****/
-	//String<unsigned int> replaceString;
-	//String<unsigned int> replaceStringB;
-	BuildFrequencyMatrix(freqMatrix,seqCounter, finder, (*sequences.generalizedSortedPValue.begin()).second,sequences,IMaps);
-	BuildFrequencyMatrix(freqMatrixB,backCounter, finderB, (*sequences.generalizedSortedPValue.begin()).second,background,IMaps);
-	
-	std::cout<<(*sequences.generalizedSortedPValue.begin()).second<<std::endl;
-	unsigned int KmerLength = length((*sequences.generalizedSortedPValue.begin()).second);
-	bool foreground = true;
-	PrintMap(freqMatrix,KmerLength,foreground);
-
-	foreground=false;
-	PrintMap(freqMatrixB,KmerLength,foreground);
-
-	
-
-
-	freqMatrix.clear();
-	freqMatrixB.clear();
-
-	sequences.generalizedKmer.clear();
-	sequences.seqCounter.clear();
-	sequences.SortedPValue.clear();
-	sequences.SortedPValueReversed.clear();
-	background.seqCounter.clear();
-	//std::cout<<replaceString[0]<<" "<<replaceString[1]<<" "<<replaceString[2]<<" "<<leftBoundary(sequences.intervals[replaceString[0]][0])<<" "<<rightBoundary(sequences.intervals[replaceString[0]][0]);
-	//replaceKmer(sequences,replaceString);
-	//replaceKmer(background,replaceStringB);
-	//clear(replaceString);
-	//clear(replaceStringB);
-
-	//PrintFastA(sequences);
-	//clear(sequences.SArray);
-	//clear(background.SArray);
-	//std::cout<<sequences.generalizedSortedPValue.begin()->first<<std::endl;
+		sequences.generalizedSortedPValue.clear();
+		/*****
+			- Bruteforce --> gets alls possible motifs form length 3 to 8 and counts them.
+			- Only one occurence per sequence allowed
+		*****/
+		initExactKmer(sequences,background,kmer_len,kmer_len_end);
+
+		std::cout<<"Exact done"<<std::endl;
+
+		/*****
+			- Computes the pValue of each motif due to the counter and saves it in SortedPValue
+		*****/
+	
+		FisherExactTest(sequences,background);
+
+		std::cout<<"Fisher done"<<std::endl;
+
+		/*****
+			- initiate by repeatedly picking the top motifs from SortedPValue
+			- calls GeneralizeKmer and adds one wildcard to the Kmer and estimates the counter
+			- after one generalization-round(top 100 motifs) the FisherExactTest is called, to compute the new SortedPValue-Map
+			- if there is a pValue<treshold start again by picking the new top motifs
+		*****/
+		//PrintMap(sequences.SortedPValue);
+		InitGeneralization(IMaps,sequences,background);
+		std::cout<<"Generalize done"<<std::endl;
+		//PrintMap(sequences.generalizedSortedPValue);
+		sequences.seqCounter.clear();
+		background.seqCounter.clear();
+		sequences.SortedPValueReversed.clear();
+
+		/*****
+			- if there is not a single pValue<treshold exit the programm
+		*****/
+		if(sequences.generalizedSortedPValue.size()==0){
+			std::cout<<"Could not find a pValue<treshold";
+			std::exit(1);
 	
-	if(sequences.c==1){//nur im ersten Schritt creatIntervalTree danach addInterval
-
-		for(unsigned s=0;s<sequences.SeqsNumber;++s){
-			createIntervalTree(sequences.intervalTrees[s], sequences.intervals[s]);
 		}
-		for(unsigned b=0;b<background.SeqsNumber;++b){
-			createIntervalTree(background.intervalTrees[b], background.intervals[b]);
+		//PrintMap(sequences.generalizedSortedPValue);
+
+		std::map<String<Iupac>,unsigned int > seqCounter;
+		std::map<String<Iupac>,unsigned int > backCounter;
+		Finder<Index<StringSet<String<Dna5> > > > finder(sequences.SArray);
+		Finder<Index<StringSet<String<Dna5> > > > finderB(background.SArray);//finder ins struct
+	
+		/*****
+			- gets the top 100(generalized) motifs and computes the exact counter and pValue
+		*****/
+	
+		exactGeneralizeCount(seqCounter,backCounter, finder, finderB,sequences,background, IMaps);
+		std::cout<<"exactGeneralize done"<<std::endl;
+
+		//PrintFastA(sequences);
+
+		//PrintMap(sequences.generalizedSortedPValue);
+
+		//std::cout<<sequences.generalizedSortedPValue.begin()->second;
+	
+		std::map<unsigned int,std::map<Iupac,double> > freqMatrix;
+		std::map<unsigned int,std::map<Iupac,double> > freqMatrixB;
+		double a=4;
+		output.open("output.fasta",std::ios::out|std::ios::app);
+		write(output,(*sequences.generalizedSortedPValue.begin()).second);
+		write(output,"   ");
+		
+		output<<(*sequences.generalizedSortedPValue.begin()).first;
+		write(output,"   ");
+		output.close();
+		//std::cout<<"first "<<(*sequences.generalizedSortedPValue.begin()).first<<std::endl;
+		/*****
+			- Computes the probability of each nucleotide to appear at each position (from the top motif)
+			- first output
+		*****/
+		//String<unsigned int> replaceString;
+		//String<unsigned int> replaceStringB;
+		BuildFrequencyMatrix(freqMatrix,seqCounter, finder, (*sequences.generalizedSortedPValue.begin()).second,sequences,IMaps);
+		BuildFrequencyMatrix(freqMatrixB,backCounter, finderB, (*sequences.generalizedSortedPValue.begin()).second,background,IMaps);
+	
+		std::cout<<(*sequences.generalizedSortedPValue.begin()).second<<std::endl;
+		unsigned int KmerLength = length((*sequences.generalizedSortedPValue.begin()).second);
+		bool foreground = true;
+		PrintMap(freqMatrix,KmerLength,foreground);
+
+		foreground=false;
+		PrintMap(freqMatrixB,KmerLength,foreground);
+
+	
+
+
+		freqMatrix.clear();
+		freqMatrixB.clear();
+
+		sequences.generalizedKmer.clear();
+		sequences.seqCounter.clear();
+		sequences.SortedPValue.clear();
+		sequences.SortedPValueReversed.clear();
+		background.seqCounter.clear();
+		//std::cout<<replaceString[0]<<" "<<replaceString[1]<<" "<<replaceString[2]<<" "<<leftBoundary(sequences.intervals[replaceString[0]][0])<<" "<<rightBoundary(sequences.intervals[replaceString[0]][0]);
+		//replaceKmer(sequences,replaceString);
+		//replaceKmer(background,replaceStringB);
+		//clear(replaceString);
+		//clear(replaceStringB);
+
+		//PrintFastA(sequences);
+		//clear(sequences.SArray);
+		//clear(background.SArray);
+		//std::cout<<sequences.generalizedSortedPValue.begin()->first<<std::endl;
+	
+		if(sequences.c==1){//nur im ersten Schritt creatIntervalTree danach addInterval
+
+			for(unsigned s=0;s<sequences.SeqsNumber;++s){
+				createIntervalTree(sequences.intervalTrees[s], sequences.intervals[s]);
+			}
+			for(unsigned b=0;b<background.SeqsNumber;++b){
+				createIntervalTree(background.intervalTrees[b], background.intervals[b]);
+			}
 		}
-	}
 
-	clear(sequences.intervals);
-	clear(background.intervals);
+		clear(sequences.intervals);
+		clear(background.intervals);
 
-	++sequences.c;
-	++background.c;
+		++sequences.c;
+		++background.c;
 	}
 	while(sequences.generalizedSortedPValue.begin()->first<0.05 && sequences.c<6);
 

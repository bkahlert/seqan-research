diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/brbym28nz827lxic_stats.txt -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata/brbym28nz827lxic_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/meyerclp/apps/dreme/dreme.h ./sandbox/meyerclp/apps/dreme/dreme.h
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/meyerclp/apps/dreme/dreme.h	2012-07-19 16:05:50.990797200 +0200
+++ ./sandbox/meyerclp/apps/dreme/dreme.h	2012-07-19 16:31:50.695797200 +0200
@@ -92,8 +92,10 @@
 void estimateCounter(Seq &seq,std::map<String<Iupac>,unsigned int> &generalizedKmer,String<Iupac> temp,String<Iupac> temp2,unsigned int &counter);
 void exactGeneralizeCount(std::multimap<double,String<Iupac> > &SortedPValueG,std::map<String<Iupac>,unsigned int > &seqCounter,std::map<String<Iupac>,unsigned int > &backCounter,Finder<Index<StringSet<String<Dna5> > > > &finder,Finder<Index<StringSet<String<Dna5> > > > &finderB,Seq &seq, Seq &back,IupacMaps &IMap);
 void FindTopKmer(Seq &seq,String<Iupac> &temp,Finder<Index<StringSet<String<Dna5> > > > &finder,unsigned int &counter,std::vector<int> &CounterV,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix);
+void FindTopKmer(Seq &seq,String<Dna5> &temp,Finder<Index<StringSet<String<Dna5> > > > &finder,unsigned int &counter,std::vector<int> &CounterV,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix);
 void loopOverTopKmer(	Seq &seq,String<Iupac> &temp,String<Iupac> &Kmer,Iterator<String<Iupac> >::Type &tempIt,Finder<Index<StringSet<String<Dna5> > > > &finder,unsigned int &counter,std::vector<int> &CounterV,IupacMaps &IMap,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix);
 void BuildFrequencyMatrix(std::map<unsigned int,std::map<Iupac,double> > &freqMatrix, Finder<Index<StringSet<String<Dna5> > > > &finder, String<Iupac> &Kmer,Seq &seq, IupacMaps &IMaps);
+void BuildFrequencyMatrix(  std::map<unsigned int,std::map<Iupac,double> > &freqMatrix,Finder<Index<StringSet<String<Dna5> > > > &finder,String<Dna5> &Kmer,Seq &seq, IupacMaps &IMaps)
 void replaceKmer(Seq &seq,unsigned int stringNumber, unsigned int begin, unsigned int end);
 
 
@@ -420,15 +422,6 @@
 	clear(finder);
 	//std::cout<<temp<<" vor-while"<<std::endl;
 	while(find(finder,temp)){//search the current Kmer in all sequences
-		//std::cout<<" "<<temp<<" "<<Kmer<<" "<<*replaceIt<<std::endl;
-		//std::cout<<'[' <<beginPosition(finder)<<','<<endPosition(finder)<<")\t"<<infix(finder)<<std::endl;//Debug
-		//replaceKmer(seq,beginPosition(finder).i1, beginPosition(finder).i2, endPosition(finder).i2);
-		//std::cout<<temp<<" while"<<std::endl;
-		//std::cout<<beginPosition(finder).i1<<" "<<beginPosition(finder).i2<<" "<<endPosition(finder).i1<<" "<<endPosition(finder).i2<<std::endl;
-		//appendValue(replaceString,beginPosition(finder).i1);//i1 = Sequenz nummer, i2= stelle in der Sequenz
-		//appendValue(replaceString,beginPosition(finder).i2);
-		//appendValue(replaceString,endPosition(finder).i2);
-		
 		if(seq.c==1){//nur im ersten Schritt in Intervals speichern, danach kann direkt an den Tree angefügt werden
 			appendValue(seq.intervals[beginPosition(finder).i1], TInterval(beginPosition(finder).i2, endPosition(finder).i2, 0)); 
 		}
@@ -449,6 +442,35 @@
 	CounterV.clear();
 }
 
+void FindTopKmer(Seq &seq,
+				String<Dna5> &temp,
+				Finder<Index<StringSet<String<Dna5> > > > &finder,
+				unsigned int &counter,
+				std::vector<int> &CounterV,
+				std::map<unsigned int,std::map<Iupac,double> > &freqMatrix){
+	typedef IntervalAndCargo<unsigned, unsigned> TInterval;				
+	clear(finder);
+	//std::cout<<temp<<" vor-while"<<std::endl;
+	while(find(finder,temp)){//search the current Kmer in all sequences
+		if(seq.c==1){//nur im ersten Schritt in Intervals speichern, danach kann direkt an den Tree angefügt werden
+			appendValue(seq.intervals[beginPosition(finder).i1], TInterval(beginPosition(finder).i2, endPosition(finder).i2, 0)); 
+		}
+		else if(seq.c>1)
+			addInterval(seq.intervalTrees[beginPosition(finder).i1], TInterval(beginPosition(finder).i2, endPosition(finder).i2, 0));
+		
+		if(CounterV[beginPosition(finder).i1] == 0){//count number of sequences containing the motif, not the occurrences to avoid problems with self-overlapping
+			++CounterV[beginPosition(finder).i1];
+			++CounterV[seq.SeqsNumber];//last Position in CounterV is cumulated sum
+			++counter;
+		}
+			
+	}
+	for( unsigned int k =0;k< length(temp);++k){//berechnet Frequenz der Nukleotide, wobei jedes Motiv wieder nur einmal pro Sequenz zählt!
+		freqMatrix[k][temp[k]]+=CounterV[seq.SeqsNumber]; //GCAGCA --> counter der einzelnen wird um die gleiche anzahl hochgezählt, GCAGTA --> usw. Nicht-Wildcards haben W'keit 1
+	}
+	
+	CounterV.clear();
+}
 
 
 void loopOverTopKmer(	Seq &seq,
@@ -571,6 +593,51 @@
 				
 			
 }
+
+/**
+		Version für nicht generalisierte
+**/
+void BuildFrequencyMatrix(  std::map<unsigned int,std::map<Iupac,double> > &freqMatrix,
+							Finder<Index<StringSet<String<Dna5> > > > &finder,
+							String<Dna5> &Kmer,
+							Seq &seq, 
+							IupacMaps &IMaps){
+			//std::cout<<Kmer<<std::endl;
+			//freqMatrix -->unsigned int = position in Kmer, position 1 in map = prob. for A, pos. 2 = prob. for C...
+			String<Iupac> temp;	
+			
+			Iterator<String<Iupac> >::Type tempIt;
+			
+			temp=Kmer;
+			tempIt = begin(temp);
+			unsigned int counter=0;
+			
+			std::vector<int> CounterV(seq.SeqsNumber+1,0);
+			FindTopKmer(seq,Kmer,finder,counter,CounterV,freqMatrix);
+			CounterV.clear();
+			
+			
+				
+			if(counter>0){//normalisieren des Counters
+				
+				
+				for( unsigned int k =0;k< length(temp);++k){
+					
+					freqMatrix[k]['A']=freqMatrix[k]['A']/counter; 
+					freqMatrix[k]['C']=freqMatrix[k]['C']/counter; 
+					freqMatrix[k]['G']=freqMatrix[k]['G']/counter; 
+					freqMatrix[k]['T']=freqMatrix[k]['T']/counter; 
+				}
+	
+
+				}
+			else
+				freqMatrix.clear();
+				
+				
+				
+			
+}
 //////////////////////////////////////
 
 //FreqMatrix output
@@ -596,6 +663,7 @@
 
 
 
+
 /*Prints the Mapping:
 Kmer	Seq1	Seq2	...	Seqn	CumulatedCounter
 -->Template

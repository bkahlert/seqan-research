diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/brbym28nz827lxic_stats.txt -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata/brbym28nz827lxic_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/meyerclp/apps/dreme/dreme.h ./sandbox/meyerclp/apps/dreme/dreme.h
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/meyerclp/apps/dreme/dreme.h	2012-07-31 12:25:56.955005500 +0200
+++ ./sandbox/meyerclp/apps/dreme/dreme.h	2012-08-01 14:18:05.832403500 +0200
@@ -131,15 +131,19 @@
 void BuildFrequencyMatrix( Finder<Index<StringSet<String<Dna5> > > > &finder,String<Dna5> &Kmer,Seq &seq, IupacMaps &IMaps);
 void BuildWeightMatrix(Seq &seq);
 void BuildInformationContentMatrix(Seq &seq);
-void ComparePWM(Seq &seq,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix1,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix2, Entropy const & tag);
-void ComparePWM(Seq &seq,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix1,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix2, Euklidisch const & tag);
+double ComparePWM(Seq &seq,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix1,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix2, Entropy const & tag);
+double ComparePWM(Seq &seq,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix1,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix2, Euklidisch const & tag);
 void PWMClustering(Seq &seq);
-void UpdateDistantMatrix(int n, int x, int y, std::vector<std::vector<double> > &compare, CompleteLinkage const & tag);
-void UpdateDistantMatrix(int n, int x, int y, std::vector<std::vector<double> > &compare,std::vector<unsigned> &weights, AverageLinkage const & tag);
-void minDifferenceInMatrix(unsigned n,String<double> &minDifference,std::vector<std::vector<double> > compare);
+void UpdateDistantMatrix(int n, int x, int y, std::vector<std::vector<String<double > > > &compare, CompleteLinkage const & tag);
+void UpdateDistantMatrix(int n, int x, int y, std::vector<std::vector<String<double > > > &compare,std::vector<unsigned> &weights, AverageLinkage const & tag);
+void minDifferenceInMatrix(unsigned n,String<double> &minDifference,std::vector<std::vector<String<double > > > compare);
 void replaceKmer(Seq &seq,unsigned int stringNumber, unsigned int begin, unsigned int end);
 void saveData(Seq &seq,std::ofstream &PWM);
-void computesDistantMatrix(Seq &seq,std::vector<std::vector<double> > &compare, unsigned allPWMsLength);
+void computesDistantMatrix(Seq &seq,std::vector<std::vector<String<double > > > &compare, unsigned allPWMsLength);
+String<double> AlignPWMs(std::map<unsigned int,std::map<Iupac,double> > &freqMatrix1,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix2);
+
+
+
 
 void readFastA( struct Seq &seq, 
 				CharString fname){
@@ -781,53 +785,46 @@
 
 }
 
-void ComparePWM(Seq &seq,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix1,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix2, Entropy const & tag){
+double ComparePWM(std::map<Iupac,double>  &freqMatrix1,std::map<Iupac,double>  &freqMatrix2, Entropy const & tag){
+
 
-	/***
-	Matrizen müssen nicht gleich lang sein --> vorher mit fester Größe noch einmal die kMere scannen?
-											   Matrizen alignen?
-											   Im Fall der Ungleichheit --> Alle möglichen Alignments(treshold) beachten, Minimum nehmen
-	***/
 	
 	/****
-			Für jede Spalte=Position einen Eintrag für je zwei zu vergleichende PWMs
+			Für die übergebenen Spalten der Matrizen wird die Entropy berechnet
 			Eintrag ist = 0, wenn die Werte identisch sind. Je größer die Zahl, desto unterschiedlicher die Werte
 			Was wenn Wert = Hintergrundverteilung? --> Eintrag wäre = 0, obwohl das nichts mit dem Motiv zu tun hat
 
-			Für jede Spalte berechnen und durch Spaltenanzahl teilen
+			Für jede Spalte berechnen und durch Spaltenanzahl teilen --> im Nachhinein
 	****/
-	seq.columnEntropy[0]=0;
+	double columnEntropy=0.;
+	
 	
-	for(unsigned int j=1;j<length(freqMatrix1)+1;++j){
-		seq.columnEntropy[j]  = freqMatrix1[j-1]['A']*log(freqMatrix1[j-1]['A']/freqMatrix2[j-1]['A']);
-		seq.columnEntropy[j] += freqMatrix1[j-1]['C']*log(freqMatrix1[j-1]['C']/freqMatrix2[j-1]['C']);
-		seq.columnEntropy[j] += freqMatrix1[j-1]['G']*log(freqMatrix1[j-1]['G']/freqMatrix2[j-1]['G']);
-		seq.columnEntropy[j] += freqMatrix1[j-1]['T']*log(freqMatrix1[j-1]['T']/freqMatrix2[j-1]['T']);
-		seq.columnEntropy[j] += freqMatrix2[j-1]['A']*log(freqMatrix2[j-1]['A']/freqMatrix1[j-1]['A']);
-		seq.columnEntropy[j] += freqMatrix2[j-1]['C']*log(freqMatrix2[j-1]['C']/freqMatrix1[j-1]['C']);
-		seq.columnEntropy[j] += freqMatrix2[j-1]['G']*log(freqMatrix2[j-1]['G']/freqMatrix1[j-1]['G']);
-		seq.columnEntropy[j] += freqMatrix2[j-1]['T']*log(freqMatrix2[j-1]['T']/freqMatrix1[j-1]['T']);
-		seq.columnEntropy[j]  = seq.columnEntropy[j]/2;
-		seq.columnEntropy[0] += seq.columnEntropy[j]; 
+	columnEntropy  = freqMatrix1['A']*log(freqMatrix1['A']/freqMatrix2['A']);
+	columnEntropy += freqMatrix1['C']*log(freqMatrix1['C']/freqMatrix2['C']);
+	columnEntropy += freqMatrix1['G']*log(freqMatrix1['G']/freqMatrix2['G']);
+	columnEntropy += freqMatrix1['T']*log(freqMatrix1['T']/freqMatrix2['T']);
+	columnEntropy += freqMatrix2['A']*log(freqMatrix2['A']/freqMatrix1['A']);
+	columnEntropy += freqMatrix2['C']*log(freqMatrix2['C']/freqMatrix1['C']);
+	columnEntropy += freqMatrix2['G']*log(freqMatrix2['G']/freqMatrix1['G']);
+	columnEntropy += freqMatrix2['T']*log(freqMatrix2['T']/freqMatrix1['T']);
+	columnEntropy  = columnEntropy/2;
+		
 
-	}
-	seq.columnEntropy[0]=seq.columnEntropy[0]/length(freqMatrix1);
+	
+	
 
 }
 
-void ComparePWM(Seq &seq,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix1,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix2, Euklidisch const & tag){
+double ComparePWM(std::map<Iupac,double>  &freqMatrix1,std::map<Iupac,double>  &freqMatrix2, Euklidisch const & tag){
 
-	seq.columnEntropy[0]=0;
-	for(unsigned int j=1;j<length(freqMatrix1)+1;++j){
+	double columnEntropy = 0.;
 
-		seq.columnEntropy[j]  = (freqMatrix1[j-1]['A'] - freqMatrix2[j-1]['A'])*(freqMatrix1[j-1]['A'] - freqMatrix2[j-1]['A']);
-		seq.columnEntropy[j] += (freqMatrix1[j-1]['C'] - freqMatrix2[j-1]['C'])*(freqMatrix1[j-1]['C'] - freqMatrix2[j-1]['C']);
-		seq.columnEntropy[j] += (freqMatrix1[j-1]['G'] - freqMatrix2[j-1]['G'])*(freqMatrix1[j-1]['G'] - freqMatrix2[j-1]['G']);
-		seq.columnEntropy[j] += (freqMatrix1[j-1]['T'] - freqMatrix2[j-1]['T'])*(freqMatrix1[j-1]['T'] - freqMatrix2[j-1]['T']);
-		seq.columnEntropy[j]  = sqrt(seq.columnEntropy[j]);
-		seq.columnEntropy[0] += seq.columnEntropy[j];
-	}
-	seq.columnEntropy[0]=seq.columnEntropy[0]/length(freqMatrix1);//enthält durchschnitt der spalten
+	columnEntropy  = (freqMatrix1['A'] - freqMatrix2['A'])*(freqMatrix1['A'] - freqMatrix2['A']);
+	columnEntropy += (freqMatrix1['C'] - freqMatrix2['C'])*(freqMatrix1['C'] - freqMatrix2['C']);
+	columnEntropy += (freqMatrix1['G'] - freqMatrix2['G'])*(freqMatrix1['G'] - freqMatrix2['G']);
+	columnEntropy += (freqMatrix1['T'] - freqMatrix2['T'])*(freqMatrix1['T'] - freqMatrix2['T']);
+	columnEntropy  = sqrt(columnEntropy);
+	
 
 }
 /****
@@ -845,7 +842,7 @@
 
 }
 
-void UpdateDistantMatrix(int n, int x, int y, std::vector<std::vector<double> > &compare, CompleteLinkage const & tag ){
+void UpdateDistantMatrix(int n, int x, int y, std::vector<std::vector<String<double> > > &compare, CompleteLinkage const & tag ){
 
 	/****
 			Updates the distance with Complete Linkage
@@ -854,13 +851,13 @@
 	****/
 	unsigned j;
 	for (j = 0; j < x; j++)
-		compare[x][j] = std::max(compare[y][j],compare[x][j]);
+		compare[x][j][0] = std::max(compare[y][j][0],compare[x][j][0]);
 	for (j = x+1; j < y; j++)
-		compare[j][x] = std::max(compare[y][j],compare[j][x]);
+		compare[j][x][0] = std::max(compare[y][j][0],compare[j][x][0]);
 	for (j = y+1; j < n; j++)
-		compare[j][x] = std::max(compare[j][y],compare[j][x]);
-	for (j = 0; j < y; j++) compare[y][j] = compare[n-1][j];
-	for (j = y+1; j < n-1; j++) compare[j][y] = compare[n-1][j];
+		compare[j][x][0] = std::max(compare[j][y][0],compare[j][x][0]);
+	for (j = 0; j < y; j++) compare[y][j][0] = compare[n-1][j][0];
+	for (j = y+1; j < n-1; j++) compare[j][y][0] = compare[n-1][j][0];
 
 
 
@@ -870,7 +867,7 @@
 
 
 
-void UpdateDistantMatrix(int n, int x, int y, std::vector<std::vector<double> > &compare,std::vector<unsigned> &weights, AverageLinkage const & tag ){
+void UpdateDistantMatrix(int n, int x, int y, std::vector<std::vector<String<double> > > &compare,std::vector<unsigned> &weights, AverageLinkage const & tag ){
 
 
 	/***
@@ -881,13 +878,13 @@
 	unsigned sumOfweights = weights[x] + weights[y];
 	
 	for (j = 0; j < x; j++)
-		compare[x][j] = (compare[y][j]*weights[y]+compare[x][j]*weights[x])/sumOfweights;
+		compare[x][j][0] = (compare[y][j][0]*weights[y]+compare[x][j][0]*weights[x])/sumOfweights;
 	for (j = x+1; j < y; j++)
-		compare[j][x] = (compare[y][j]*weights[y]+compare[j][x]*weights[x])/sumOfweights;
+		compare[j][x][0] = (compare[y][j][0]*weights[y]+compare[j][x][0]*weights[x])/sumOfweights;
 	for (j = y+1; j < n; j++)
-		compare[j][x] = (compare[j][y]*weights[y]+compare[j][x]*weights[x])/sumOfweights;
-	for (j = 0; j < y; j++) compare[y][j] = compare[n-1][j];
-	for (j = y+1; j < n-1; j++) compare[j][y] = compare[n-1][j];
+		compare[j][x][0] = (compare[j][y][0]*weights[y]+compare[j][x][0]*weights[x])/sumOfweights;
+	for (j = 0; j < y; j++) compare[y][j][0] = compare[n-1][j][0];
+	for (j = y+1; j < n-1; j++) compare[j][y][0] = compare[n-1][j][0];
 
 	weights[x]=sumOfweights;
 	for(j=0;j+y<length(weights)-1;++j)
@@ -896,15 +893,15 @@
 }
 
 
-void minDifferenceInMatrix(unsigned n,String<double> &minDifference,std::vector<std::vector<double> > compare){
+void minDifferenceInMatrix(unsigned n,String<double> &minDifference,std::vector<std::vector<String<double> > > compare){
 
 	minDifference[0]=0;
 	for(unsigned i=0;i<n;++i){
 
 		for(unsigned j=0;j<i;++j){
 
-			if(minDifference[0]==0 || minDifference[0]>compare[i][j]){
-				minDifference[0]=compare[i][j];
+			if(minDifference[0]==0 || minDifference[0]>compare[i][j][0]){
+				minDifference[0]=compare[i][j][0];
 				minDifference[1]=j;
 				minDifference[2]=i;
 			}
@@ -917,7 +914,7 @@
 }
 
 
-void computesDistantMatrix(Seq &seq,std::vector<std::vector<double> > &compare, unsigned allPWMsLength){
+void computesDistantMatrix(Seq &seq,std::vector<std::vector<String<double> > > &compare, unsigned allPWMsLength){
 
 	unsigned j;
 	unsigned i;
@@ -925,8 +922,8 @@
 
 		for( j=i+1;j<allPWMsLength;++j){
 
-			ComparePWM(seq,seq.allPWMs[i],seq.allPWMs[j],Entropy());
-			 compare[j][i]=seq.columnEntropy[0];
+			
+			compare[j][i]=AlignPWMs(seq.allPWMs[i],seq.allPWMs[j]);
 			
 			
 
@@ -944,7 +941,7 @@
 	resize(minDifference,3);
 	minDifference[0]=0;
 	unsigned allPWMsLength=length(seq.allPWMs); 
-	std::vector<std::vector<double> > compare(allPWMsLength, std::vector<double>(allPWMsLength));
+	std::vector<std::vector<String<double> > > compare(allPWMsLength, std::vector<String<double> >(allPWMsLength));
 	std::vector<int> clusterId(allPWMsLength);
 	unsigned j;
 	for (j = 0; j < allPWMsLength; j++) clusterId[j] = j;//to assign which PWM is in which cluster
@@ -956,7 +953,7 @@
 
 
 
-
+	//vorher per local alignment feststellen wo die beste Überlappung ist!
 	computesDistantMatrix(seq,compare,allPWMsLength);
 
 	
@@ -973,7 +970,7 @@
 
 			for(unsigned l=0;l<allPWMsLength;++l){
 
-				std::cout<<compare[k][l]<<" ";
+				std::cout<<compare[k][l][0]<<" ";
 			}
 			std::cout<<std::endl;
 		}
@@ -1001,7 +998,7 @@
 
 			for(unsigned l=0;l<allPWMsLength;++l){
 
-				std::cout<<compare[k][l]<<" ";
+				std::cout<<compare[k][l][0]<<" ";
 			}
 			std::cout<<std::endl;
 		}
@@ -1738,4 +1735,52 @@
 
 }
 
+
+
+String<double> AlignPWMs(std::map<unsigned int,std::map<Iupac,double> > &freqMatrix1,std::map<unsigned int,std::map<Iupac,double> > &freqMatrix2){
+
+  int freqL1 = length(freqMatrix1);                     
+  int freqL2 = length(freqMatrix2);
+
+  std::vector<std::vector<double> > M(freqL1,std::vector<double>(freqL2));     
+  for(unsigned i=0;i<=freqL1;++i){
+    for(unsigned j=0;j<=freqL2;++j){
+      M[i][j]=0;
+    }
+  } 
+ 
+  
+	//traceback wird nicht benötigt, da zwischen den anfangs- und end-gaps keine erlaubt sind
+	String<double> Mmax;
+	appendValue(Mmax,0);
+	appendValue(Mmax,0);
+	appendValue(Mmax,0);
+	
+	for(unsigned i=1;i<=freqL1;++i){
+		for(unsigned j=1;j<=freqL2;++j){
+
+			M[i][j]=M[i-1][j-1]-ComparePWM(freqMatrix1[i-1],freqMatrix2[j-1],Entropy());//je größer, desto unterschiedlicher
+			if(i==freqL1 || j==freqL2){
+				
+				if(M[i][j]>Mmax[0]){
+					Mmax[0]=M[i][j];
+					Mmax[1]=i;
+					Mmax[2]=j;
+				}
+				else if(Mmax[0]==0){
+					Mmax[0]=M[i][j];
+					Mmax[1]=i;
+					Mmax[2]=j;
+				}
+			}
+
+		}
+
+	}
+
+	return Mmax;
+}
+
+
+
 #endif  // #ifndef SANDBOX_MEYERCLP_APPS_DREME_H_

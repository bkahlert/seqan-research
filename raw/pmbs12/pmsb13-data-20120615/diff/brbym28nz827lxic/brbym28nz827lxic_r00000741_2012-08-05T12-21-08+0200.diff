diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/brbym28nz827lxic_stats.txt -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata/brbym28nz827lxic_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/meyerclp/apps/dreme/dreme.h ./sandbox/meyerclp/apps/dreme/dreme.h
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/meyerclp/apps/dreme/dreme.h	2012-08-04 20:45:12.313996400 +0200
+++ ./sandbox/meyerclp/apps/dreme/dreme.h	2012-08-05 12:20:46.336803900 +0200
@@ -69,8 +69,10 @@
 
 struct Cluster
 {
+
 	unsigned left;
 	unsigned right;
+	std::vector<unsigned>  content;
 	double Dr;
 
 
@@ -957,6 +959,17 @@
 
 }
 
+double computeDr(Cluster &cluster){
+
+	double Dr;
+
+
+
+	return Dr;
+}
+
+
+
 void PWMClustering(Seq &seq){
 	unsigned allPWMsLength=length(seq.allPWMs);
 
@@ -969,6 +982,7 @@
 	minDifference[0]=0;
 	 
 	std::vector<std::vector<String<double> > > compare(allPWMsLength, std::vector<String<double> >(allPWMsLength));
+	
 	std::vector<int> clusterId(allPWMsLength);
 	unsigned j;
 	for (j = 0; j < allPWMsLength; j++) clusterId[j] = j;//to assign which PWM is in which cluster
@@ -982,7 +996,7 @@
 
 	//vorher per local alignment feststellen wo die beste Überlappung ist!
 	computesDistantMatrix(seq,compare,allPWMsLength);
-
+	std::vector<std::vector<String<double> > > copyCompare(compare);
 	
 
 	for(unsigned n=allPWMsLength;n>1 ;--n){//treshold noch bestimmen --> && minDifference[0]<0.8
@@ -1004,13 +1018,43 @@
 		}
 		std::cout<<std::endl;
 		
+		//einmalige kopie von compare anlegen --> alle paarweisen abstände enthalten -->ist schon halbiert--> formel abändern
+		//nicht left right, sondern liste mit den clustern --> liste in funktion auslesen
 		UpdateDistantMatrix(n,int(minDifference[1]),int(minDifference[2]),compare,weights,AverageLinkage());
 	
-
+		 
+		/***
+				cluster[0] = 1  2 --> clusterId=-1
+				cluster[1] = -1 3 --> clusterId=-2  --> traceback: -(-1)-1: 0 -->cluster[0]
+
+		***/
+		
+		/****
+				Erzeuge Vector mit allen Objekten des Clusters
+				-> für computeDr
+		****/
+		if(clusterId[int(minDifference[1])]<0){
+			cluster[allPWMsLength-n].content=cluster[-clusterId[int(minDifference[1])] - 1].content;
+		}
+		else{
+			cluster[allPWMsLength-n].content.push_back(clusterId[int(minDifference[1])]);
+		}
+	
+		if(clusterId[int(minDifference[2])]<0){
+			cluster[allPWMsLength-n].content.insert(cluster[allPWMsLength-n].content.end(),cluster[-clusterId[int(minDifference[2])] - 1].content.begin(),cluster[-clusterId[int(minDifference[2])] - 1].content.end(); );
+		}
+		else{
+			cluster[allPWMsLength-n].content.push_back(clusterId[int(minDifference[2])]);
+		}
+		//cluster[allPWMsLength-n].Dr=computeDr(cluster[allPWMsLength-n]);
+		std::cout<<"Cluster: ";
+		for(unsigned o=0;o<cluster[allPWMsLength-n].content.size();++o){
+			std::cout<<cluster[allPWMsLength-n].content[o]<<" ";
+		}
+		std::cout<<std::endl;
 
 		cluster[allPWMsLength-n].left=clusterId[int(minDifference[1])];
 		cluster[allPWMsLength-n].right=clusterId[int(minDifference[2])];
-		//cluster[allPWMsLength-n].Dr=computeDr(cluster[allPWMsLength-n];
 
 		appendValue(traceback,clusterId[int(minDifference[1])]);
 		appendValue(traceback,clusterId[int(minDifference[2])]);

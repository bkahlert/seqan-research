diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/brbym28nz827lxic_stats.txt -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata/brbym28nz827lxic_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x C:/Users/David/Desktop/Seqan/Seqan/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/meyerclp/apps/dreme/dreme.cpp ./sandbox/meyerclp/apps/dreme/dreme.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/meyerclp/apps/dreme/dreme.cpp	2012-09-25 23:21:51.734321500 +0200
+++ ./sandbox/meyerclp/apps/dreme/dreme.cpp	2012-09-27 01:03:19.715200000 +0200
@@ -12,7 +12,7 @@
 	IupacMaps IMaps;
 	unsigned int kmer_len=6;
 	unsigned int kmer_len_end=6;
-	sequences.seed=150;
+	sequences.seed=100;
 	MapIupac(IMaps);//IupacMap for generalization
 
 
@@ -28,7 +28,6 @@
 	
 	readFastA(sequences,argv[1]);
 	//readFastA(background,argv[2]);
-	//PrintFastA(sequences);//Debug
 	background.seqs=sequences.seqs;
 	sequences.SeqsNumber=length(sequences.seqs);//number of sequences
 	background.SeqsNumber=length(background.seqs);//number of sequences
@@ -41,7 +40,6 @@
 		shuffle(background.seqs[i],rng);
 		shuffle(background.seqs[i],rng);
 		shuffle(background.seqs[i],rng);
-		//std::random_shuffle(begin(background.seqs[i]),end(background.seqs[i]));
 	}
 	
 	/*std::ofstream outfile;
@@ -56,7 +54,7 @@
 
 
 	
-	//PrintFastA(background);//Debug
+	
 	logFactorial(sequences.SeqsNumber+background.SeqsNumber);//save all relevant factorial numbers
 	resize(sequences.intervals, sequences.SeqsNumber);
 	resize(background.intervals, background.SeqsNumber);
@@ -80,8 +78,6 @@
 
 	do{
 		std::cout<<"new "<<std::endl;
-	
-	
 		sequences.generalizedSortedPValue.clear();
 		sequences.SortedPValue.clear();
 		/*****
@@ -89,15 +85,12 @@
 			- Only one occurence per sequence allowed
 		*****/
 		initExactKmer(sequences,background,kmer_len,kmer_len_end);
-
 		std::cout<<"Exact done"<<std::endl;
 
 		/*****
 			- Computes the pValue of each motif due to the counter and saves it in SortedPValue
 		*****/
-	
 		FisherExactTest(sequences,background);
-
 		std::cout<<"Fisher done"<<std::endl;
 
 		/*****
@@ -106,29 +99,22 @@
 			- after one generalization-round(top 100 motifs) the FisherExactTest is called, to compute the new SortedPValue-Map
 			- if there is a pValue<treshold start again by picking the new top motifs
 		*****/
-		//PrintMap(sequences.SortedPValue);
-		
 		InitGeneralization(IMaps,sequences,background);
 		std::cout<<"Generalize done"<<std::endl;
-		//PrintMap(sequences.generalizedSortedPValue);
-		//sequences.seqCounter.clear();
-		//background.seqCounter.clear();
 		sequences.SortedPValueReversed.clear();
 
-		/*****
-			- if there is not a single pValue<treshold exit the programm
-		*****/
+		
 		
 		
 		Finder<Index<StringSet<String<Dna5> > > > finder(sequences.SArray);
-		Finder<Index<StringSet<String<Dna5> > > > finderB(background.SArray);//finder ins struct
+		Finder<Index<StringSet<String<Dna5> > > > finderB(background.SArray);
 		sequences.pValue=0;
+		/*****
+			- if there is not a single pValue<treshold (in the generalized motif list) compute the PWM of the motif with the smallest pValue
+			--> else
+		*****/
 		if(sequences.generalizedSortedPValue.size()>0){
 			
-	
-		
-			//PrintMap(sequences.generalizedSortedPValue);
-
 			std::map<String<Iupac>,unsigned int > seqCounter;
 			std::map<String<Iupac>,unsigned int > backCounter;
 			
@@ -136,15 +122,12 @@
 			/*****
 				- gets the top 100(generalized) motifs and computes the exact counter and pValue
 			*****/
-	
 			exactGeneralizeCount(seqCounter,backCounter, finder, finderB,sequences,background, IMaps);
 			std::cout<<"exactGeneralize done"<<std::endl;
 
-			//PrintFastA(sequences);
-
-			//PrintMap(sequences.generalizedSortedPValue);
-
-			//std::cout<<sequences.generalizedSortedPValue.begin()->second;
+			/****
+					writes the motif with p-value into "output.fasta"
+			****/
 			output.open("output.fasta",std::ios::out|std::ios::app);
 			write(output,(*sequences.generalizedSortedPValue.begin()).second);
 			write(output,"   ");
@@ -152,20 +135,24 @@
 			output<<(*sequences.generalizedSortedPValue.begin()).first;
 			write(output,"   ");
 			output.close();
+			/****
+				computes the PWM
+			****/
 			BuildFrequencyMatrix(finder, (*sequences.generalizedSortedPValue.begin()).second,sequences,IMaps);
 			BuildFrequencyMatrix(finderB, (*sequences.generalizedSortedPValue.begin()).second,background,IMaps);
 			std::cout<<(*sequences.generalizedSortedPValue.begin()).second<<std::endl;
-			/*bool foreground = true;
-			PrintMap(sequences,foreground);
-
-			foreground=false;
-			PrintMap(background,foreground);*/
+			
+			/****
+					saves the PWM to a file
+			****/
 			saveData(sequences,PWM,sequences.c);
 			
 			sequences.pValue=sequences.generalizedSortedPValue.begin()->first;
 		}
 		else{
-
+			/****
+					writes the motif with p-value into "output.fasta"
+			****/
 			output.open("output.fasta",std::ios::out|std::ios::app);
 			write(output,(*sequences.SortedPValue.begin()).second);
 			write(output,"   ");
@@ -173,23 +160,22 @@
 			output<<(*sequences.SortedPValue.begin()).first;
 			write(output,"   ");
 			output.close();
+			/****
+				computes the PWM
+			****/
 			BuildFrequencyMatrix( finder, (*sequences.SortedPValue.begin()).second,sequences,IMaps);
 			BuildFrequencyMatrix( finderB, (*sequences.SortedPValue.begin()).second,background,IMaps);
 			std::cout<<(*sequences.SortedPValue.begin()).second<<std::endl;
-			/*bool foreground = true;
-			PrintMap(sequences,foreground);
-
-			foreground=false;
-			PrintMap(background,foreground);*/
+			/****
+					saves the PWM to a file
+			****/
 			saveData(sequences,PWM,sequences.c);
 			
 			sequences.pValue=sequences.SortedPValue.begin()->first;
 
 		}
 
-		/***
-		PSSM
-		***/
+		
 		//BuildWeightMatrix(sequences);
 
 		/***
@@ -199,25 +185,11 @@
 	
 
 		appendValue(sequences.allPWMs,sequences.freqMatrix);
+
 		sequences.freqMatrix.clear();
 		sequences.weightMatrix.clear();
 		background.weightMatrix.clear();
 		background.freqMatrix.clear();
-		//std::cout<<"first "<<(*sequences.generalizedSortedPValue.begin()).first<<std::endl;
-		/*****
-			- Computes the probability of each nucleotide to appear at each position (from the top motif)
-			- first output
-		*****/
-		//String<unsigned int> replaceString;
-		//String<unsigned int> replaceStringB;
-		
-		
-
-	
-
-
-		
-
 		sequences.generalizedKmer.clear();
 		sequences.seqCounter.clear();
 		sequences.SortedPValueReversed.clear();
@@ -226,18 +198,8 @@
 		background.SortedPValue.clear();
 		background.SortedPValueReversed.clear();
 		
-		//std::cout<<replaceString[0]<<" "<<replaceString[1]<<" "<<replaceString[2]<<" "<<leftBoundary(sequences.intervals[replaceString[0]][0])<<" "<<rightBoundary(sequences.intervals[replaceString[0]][0]);
-		//replaceKmer(sequences,replaceString);
-		//replaceKmer(background,replaceStringB);
-		//clear(replaceString);
-		//clear(replaceStringB);
-
-		//PrintFastA(sequences);
-		//clear(sequences.SArray);
-		//clear(background.SArray);
-		//std::cout<<sequences.generalizedSortedPValue.begin()->first<<std::endl;
-		//std::cout<<"vor if"<<std::endl;
-		if(sequences.c==1){//nur im ersten Schritt creatIntervalTree danach addInterval
+	
+		if(sequences.c==1){//if c==1 creatIntervalTree, otherwise addInterval
 
 			for(unsigned s=0;s<sequences.SeqsNumber;++s){
 				createIntervalTree(sequences.intervalTrees[s], sequences.intervals[s]);
@@ -246,7 +208,7 @@
 				createIntervalTree(background.intervalTrees[b], background.intervals[b]);
 			}
 		}
-		//std::cout<<"nach if"<<std::endl;
+		
 		clear(sequences.intervals);
 		clear(background.intervals);
 
@@ -254,6 +216,9 @@
 		++background.c;
 	}
 	while(sequences.pValue<0.05 && sequences.c<6);
+	/******
+			Compute the Clustering with GapStat
+	******/
 	String<Cluster> cluster;
 	String<int> traceback;
 	PWMClustering(sequences.allPWMs,cluster,traceback);
@@ -264,15 +229,7 @@
 	clear(traceback);
 	clear(sequences.allMotifs);
 	clear(sequences.allPWMs);
-	/***
-		MOTIF 1 CONSENSUS: TGAAAG
-		MOTIF 2 CONSENSUS: CCAGGA
-		MOTIF 3 CONSENSUS: GGCGGA
-
-
-	***/
-
-
+	
 	return 0;
 
 }

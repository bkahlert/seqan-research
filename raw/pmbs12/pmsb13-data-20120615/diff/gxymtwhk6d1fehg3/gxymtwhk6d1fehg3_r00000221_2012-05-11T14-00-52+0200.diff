diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x Z:/RAID/Seqan/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/gxymtwhk6d1fehg3_stats.txt -x Z:/RAID/Seqan/misc/seqan_instrumentation/userdata/gxymtwhk6d1fehg3_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x Z:/RAID/Seqan/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x Z:/RAID/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x Z:/RAID/Seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x Z:/RAID/Seqan/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x Z:/RAID/Seqan/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/wissmann/demos/task1.cpp ./sandbox/wissmann/demos/task1.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/wissmann/demos/task1.cpp	2012-05-11 11:28:01.953755000 +0200
+++ ./sandbox/wissmann/demos/task1.cpp	2012-05-11 14:00:44.812081000 +0200
@@ -10,8 +10,8 @@
 typedef Iterator<BowTieIndex, TopDown<>>::Type BowTieIterator;
 
 //global variables
-	String<char> text = "gtatacacagacagt";
-	String<char> pattern = "ataca";
+	String<char> text = "GTATACACAGACAGT";
+	String<char> pattern = "ATACA";
 	String<char> rText;
 	String<char> rPattern;
 	String<char> cuttedPattern;
@@ -112,21 +112,25 @@
 }
 
 // char c ist the character that is the substitute at the ith position of the right half of the pattern
-//void backtrack (BowTieFinder finder, String<char> mypattern, int i, char c){
-//	if (goDown(finder, c)){
-//		int j = cutPos +i +1;
-//		// from here: going down the chars exactly from pattern to verify
-//		while (goDown(finder, readPos (mypattern, j))){		
-//			std::cout << "j= " << j << std::endl;
-//			if ( j == (patternLength -1))
-//				std::cout << pattern << ", found at: " << position(finder)<< std::endl;
-//			j++;
-//		}
-//		for ( j ; j> cutPos ; j--)
-//			goUp(finder);
-//		std::cout << "j= " << j << std::endl;
-//	}
-//}
+void backtrack (BowTieIterator iter, String<char> mypattern, int i, char c){
+	if (goDown(iter, c)){
+		// from here: going down the chars exactly from pattern to verify
+		int j = cutPos +i +1;
+		while (goDown(iter, readPos (mypattern, j))){		
+			std::cout << "j= " << j << std::endl;
+			if ( j == (patternLength -1)) {
+				//found;  returning the positions
+				for (int k = 0; k < length(getOccurrences(forwardIter));k++){
+					std::cout << pattern << ", found at: " << getOccurrences(forwardIter)[k] << std::endl;
+				}
+			}
+			j++;
+		}
+		for ( j ; j> cutPos ; j--)
+			goUp(iter);
+		std::cout << "j= " << j << std::endl;
+	}
+}
 
 
 
@@ -167,25 +171,25 @@
 	
 	goDown(forwardIter, cuttedPattern);
 	for (int i = 0; i < (patternLength- cutPos); i++){
-		if (readPos(pattern,cutPos+i)!= 'a') {
-			std::cout << cutPos+i << " : not 'a'" <<std::endl;
-			//backtrack(forwardFinder, pattern, i, 'a');
-		}
-		if (readPos(pattern,cutPos+i)!= 'c') {
-			std::cout << cutPos+i << " : not 'c'" <<std::endl;
-			//backtrack(forwardFinder, pattern, i, 'c');
-		}
-		if (readPos(pattern,cutPos+i)!= 'g') {
-			std::cout << cutPos+i << " : not 'g'" <<std::endl;
-			//backtrack(forwardFinder, pattern, i, 'g');
-		}
-		if (readPos(pattern,cutPos+i)!= 't') {
-			std::cout << cutPos+i << " : not 't'" <<std::endl;
-			//backtrack(forwardFinder, pattern, i, 't');
-		}
-		if (readPos(pattern,cutPos+i)!= 'n') {
-			std::cout << cutPos+i << " : not 'n'" <<std::endl;
-			//backtrack(forwardFinder, pattern, i, 'n');
+		if (readPos(pattern,cutPos+i)!= 'A') {
+			std::cout << cutPos+i << " : not 'A'" <<std::endl;
+			backtrack(forwardIter, pattern, i, 'A');
+		}
+		if (readPos(pattern,cutPos+i)!= 'C') {
+			std::cout << cutPos+i << " : not 'C'" <<std::endl;
+			backtrack(forwardIter, pattern, i, 'C');
+		}
+		if (readPos(pattern,cutPos+i)!= 'G') {
+			std::cout << cutPos+i << " : not 'G'" <<std::endl;
+			backtrack(forwardIter, pattern, i, 'G');
+		}
+		if (readPos(pattern,cutPos+i)!= 'T') {
+			std::cout << cutPos+i << " : not 'T'" <<std::endl;
+			backtrack(forwardIter, pattern, i, 'T');
+		}
+		if (readPos(pattern,cutPos+i)!= 'N') {
+			std::cout << cutPos+i << " : not 'N'" <<std::endl;
+			backtrack(forwardIter, pattern, i, 'N');
 		}
 		goDown(forwardIter, readPos(pattern,cutPos +i));
 	}

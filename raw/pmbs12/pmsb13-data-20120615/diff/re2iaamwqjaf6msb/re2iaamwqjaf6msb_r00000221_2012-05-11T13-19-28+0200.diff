diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x D:/SeqAn/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/re2iaamwqjaf6msb_stats.txt -x D:/SeqAn/misc/seqan_instrumentation/userdata/re2iaamwqjaf6msb_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x D:/SeqAn/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x D:/SeqAn/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x D:/SeqAn/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x D:/SeqAn/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x D:/SeqAn/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/jennyann/apps/segmentaligner/segmentaligner.cpp ./sandbox/jennyann/apps/segmentaligner/segmentaligner.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/jennyann/apps/segmentaligner/segmentaligner.cpp	2012-05-11 03:12:50.480221100 +0200
+++ ./sandbox/jennyann/apps/segmentaligner/segmentaligner.cpp	2012-05-11 13:19:24.658339300 +0200
@@ -2,14 +2,20 @@
 #include <iostream>
 #include <seqan/misc/misc_cmdparser.h>
 #include <seqan/stream.h>
+#include <seqan/sequence.h>
+#include "../../../core/apps/stellar/stellar.h"
+#include "../../../core/apps/stellar/stellar_types.h"
+#include "../../../core/apps/stellar/stellar_extension.h"
+#include "../../../core/apps/stellar/stellar_output.h"
+#include <seqan/align.h>
+#include <seqan/seeds2.h>
 
 
 using namespace seqan;
 
-int main()
-{
-	typedef CharString const file;
-	file fileName = "./*.fasta";
+void blabla {
+typedef CharString const file;
+	file fileName = "./test1.fasta";
 
 	std::ifstream fasta(toCString(fileName), std::ios_base::in | std::ios_base::binary);
     if (!fasta.good())
@@ -29,4 +35,46 @@
         }
         std::cout << id << "\t" << seq << "\n";
     }
+}
+
+
+using namespace seqan;
+
+template<typename TSequence>
+void stellar_find_matches(TSequence & file1, TSequence & file2) {
+	double epsilon = 0.01;
+	unsigned minLength = 20;
+	unsigned xDrop = 2;
+	typedef String<char> TId;
+	
+	unsigned maxValue = (unsigned)-1;
+    unsigned compactThresh = 1000;
+    TId id = "db";
+
+	 // container for eps-matches
+    StringSet<QueryMatches<StellarMatch<TSequence, TId> > > matches;
+    //resize(matches, length(queries));
+
+	//pattern
+	typedef Index<StringSet<TSequence, Dependent<> >, IndexQGram<SimpleShape, OpenAddressing> > TQGramIndex;
+    TQGramIndex qgramIndex(queries);
+    Pattern<TQGramIndex, Swift<SwiftLocal> > swiftPattern(qgramIndex);
+
+	typedef Finder<TSequence, Swift<SwiftLocal> > TFinder;
+    TFinder swiftFinder(file1, 1000, 1);
+
+	//Tmatches matches;
+
+	stellar(swiftFinder, swiftPattern, epsilon, minLength, xDrop, matches, AllLocal());
+
+}
+
+int main()
+{
+	typedef String<Dna5> TSequence;
+	TSequence file1 = "test1.fasta";
+	TSequence file2 = "test2.fasta";
+
+	stellar_find_matches(file1,file2);
+
 }
\ No newline at end of file

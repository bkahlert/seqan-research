2012-07-05T17:20:57.280+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollowing these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:20:57.358+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollowing these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:20:57.274+02:00	RESIZE	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:20:58.187+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:20:49.359+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1009	1233
2012-07-05T17:20:33.940+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	385	1009	1233
2012-07-05T17:20:26.701+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	385	1009	1233
2012-07-05T17:20:28.725+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	385	1009	1233
2012-07-05T17:20:15.724+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	385	1009	1233
2012-07-05T17:19:57.106+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftFront	160.45.112.60	-	0	0	1009	1233
2012-07-05T17:19:57.112+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	0	1009	1233
2012-07-05T17:21:09.079+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollowing these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:09.012+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollowing these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:07.815+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:01.418+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	25	1302	1202
2012-07-05T17:21:00.241+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	25	1302	1202
2012-07-05T17:20:59.741+02:00	RESIZE	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	25	1302	1202
2012-07-05T17:21:09.732+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFllo these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:09.619+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFll these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:10.553+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFllow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:10.441+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFllow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:09.282+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nF these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:09.428+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFl these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:11.431+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFol these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:11.588+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFoll these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:11.296+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFo these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:11.161+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nF these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:10.969+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\n these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:10.879+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\n these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:46.452+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:43.821+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:15.334+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:11.667+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode"\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollo these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:57.294+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	845	1302	1202
2012-07-05T17:21:54.319+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	879	1302	1202
2012-07-05T17:21:48.038+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:51.884+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	631	1302	1202
2012-07-05T17:21:47.206+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:21:47.138+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G "Xcode\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.jpg, 700px, align=center)]]\n\nIn the top, now select ''razers2'' for compiling.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn the bottom you can see the console ouput of the program.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n}}}\n\nYou can close your Xcode window now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	310	1302	1202
2012-07-05T17:33:52.542+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G Xcode\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.png, align=center)]]\n\nIn the top, now select ''razers2''.\nYou have to select it both as the ''Active Target'' as well as the ''Active Executable''.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn successful execution, the bottom of the Xcode window will read:\n\n{{{\n#!IdeBox\nDebugging of "razers2" ended normally.\n}}}\n\nTo see the program's output, select ''Run -> Console''.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n\nDebugger stopped.\nProgram exited with status value:0.\n}}}\n\nYou can close Xcode now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	1797	1302	1227
2012-07-05T17:33:52.553+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	1797	1302	1227
2012-07-05T17:34:02.509+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G Xcode\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n{{{\n#!WarningBox\n'''TODO''' The following screenshot is outdated, we need to update it.\n}}}\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.png, align=center)]]\n\nIn the top, now select ''razers2''.\nYou have to select it both as the ''Active Target'' as well as the ''Active Executable''.\nPressing on the top left the play button will compile and then execute the program ''razers2''.\nOn successful execution, the bottom of the Xcode window will read:\n\n{{{\n#!IdeBox\nDebugging of "razers2" ended normally.\n}}}\n\nTo see the program's output, select ''Run -> Console''.\n\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n\nDebugger stopped.\nProgram exited with status value:0.\n}}}\n\nYou can close Xcode now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# cd ../..\n# open sandbox/my_sandbox/seqan_my_sandbox.xcodeproj\n}}}\n\n{{{\n#!WarningBox\nThe following needs to be updated, probably.\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top.\nThen, click the Play button.\n\nXcode will now compile your program and execute it.\nThe output at the bottom of Xcode should read as follows:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	1290	1302	1227
2012-07-05T17:34:00.654+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	1299	1302	1227
2012-07-05T17:33:55.262+02:00	RESIZE	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	1731	1302	1227
2012-07-05T17:33:53.780+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	1797	1302	1227
2012-07-05T17:33:44.980+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	1414	1302	1227
2012-07-05T17:33:39.570+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	959	1302	1227
2012-07-05T17:33:37.150+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	1	1302	1227
2012-07-05T17:41:20.954+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:41:21.252+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:41:14.266+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:41:09.347+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:41:18.172+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:41:01.343+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G Xcode\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# cd ../..\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.png, width=400px, align=center)]]\n\nIn the top, now select ''razers2''.\nYou have to select it both as the ''Active Target'' as well as the ''Active Executable''.\nThen, click the ''Build & Run'' button.\nOn successful execution, the bottom of the Xcode window will read:\n\n{{{\n#!IdeBox\nDebugging of "razers2" ended normally.\n}}}\n\nTo see the program's output, select ''Run -> Console'' in the program menu.\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n\nDebugger stopped.\nProgram exited with status value:0.\n}}}\n\nYou can close Xcode now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# open open sandbox/my_sandbox/seqan_sandbox_my_sandbox.xcodeproj\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top, both as ''Active Executable'' and ''Active Target''.\nThen, click the ''Build & Run'' button.\n\nXcode will now compile your program and execute it.\nIf Xcode displays a message ''Error from Debugger: The program being debugged is not being run.'' this is not a problem, the application simply stopped executing too fast for the debugger to connect to.\n\nAgain, select ''Run -> Console'' to see the program's output.\nThe console's output should show the following lines:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:41:02.073+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G Xcode\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# cd ../..\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.png, width=400px, align=center)]]\n\nIn the top, now select ''razers2''.\nYou have to select it both as the ''Active Target'' as well as the ''Active Executable''.\nThen, click the ''Build & Run'' button.\nOn successful execution, the bottom of the Xcode window will read:\n\n{{{\n#!IdeBox\nDebugging of "razers2" ended normally.\n}}}\n\nTo see the program's output, select ''Run -> Console'' in the program menu.\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n\nDebugger stopped.\nProgram exited with status value:0.\n}}}\n\nYou can close Xcode now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# open open sandbox/my_sandbox/seqan_sandbox_my_sandbox.xcodeproj\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top, both as ''Active Executable'' and ''Active Target''.\nThen, click the ''Build & Run'' button.\n\nXcode will now compile your program and execute it.\nIf Xcode displays a message ''Error from Debugger: The program being debugged is not being run.'' this is not a problem, the application simply stopped executing too fast for the debugger to connect to.\n\nAgain, select ''Run -> Console'' to see the program's output.\nThe console's output should show the following lines:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:41:01.893+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G Xcode\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# cd ../..\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.png, width=400px, align=center)]]\n\nIn the top, now select ''razers2''.\nYou have to select it both as the ''Active Target'' as well as the ''Active Executable''.\nThen, click the ''Build & Run'' button.\nOn successful execution, the bottom of the Xcode window will read:\n\n{{{\n#!IdeBox\nDebugging of "razers2" ended normally.\n}}}\n\nTo see the program's output, select ''Run -> Console'' in the program menu.\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n\nDebugger stopped.\nProgram exited with status value:0.\n}}}\n\nYou can close Xcode now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# open open sandbox/my_sandbox/seqan_sandbox_my_sandbox.xcodeproj\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top, both as ''Active Executable'' and ''Active Target''.\nThen, click the ''Build & Run'' button.\n\nXcode will now compile your program and execute it.\nIf Xcode displays a message ''Error from Debugger: The program being debugged is not being run.'' this is not a problem, the application simply stopped executing too fast for the debugger to connect to.\n\nAgain, select ''Run -> Console'' to see the program's output.\nThe console's output should show the following lines:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:41:01.668+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G Xcode\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# cd ../..\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.png, width=400px, align=center)]]\n\nIn the top, now select ''razers2''.\nYou have to select it both as the ''Active Target'' as well as the ''Active Executable''.\nThen, click the ''Build & Run'' button.\nOn successful execution, the bottom of the Xcode window will read:\n\n{{{\n#!IdeBox\nDebugging of "razers2" ended normally.\n}}}\n\nTo see the program's output, select ''Run -> Console'' in the program menu.\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n\nDebugger stopped.\nProgram exited with status value:0.\n}}}\n\nYou can close Xcode now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# open open sandbox/my_sandbox/seqan_sandbox_my_sandbox.xcodeproj\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top, both as ''Active Executable'' and ''Active Target''.\nThen, click the ''Build & Run'' button.\n\nXcode will now compile your program and execute it.\nIf Xcode displays a message ''Error from Debugger: The program being debugged is not being run.'' this is not a problem, the application simply stopped executing too fast for the debugger to connect to.\n\nAgain, select ''Run -> Console'' to see the program's output.\nThe console's output should show the following lines:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:41:02.028+02:00	TYPING-text-= Getting Started On Mac OS X With Xcode =\n\n{{{\n#!WarningBox\n'''TODO''' The previous version of the tutorial did not use RazerS 2 as the example program but another. We need to update the screenshots and verify the Xcode compiler output.\n}}}\n\n[[TOC()]]\n\nThis article describes how to get started with SeqAn on Mac Os X using XCode.\n\nWe assume that you want to use [http://www.macports.org/ MacPorts] for installing some dependencies (!MacPorts is a package management system that easily allows you to install Unix software on Os X).\nOf course, if you want to use a different way for installing the dependencies (e.g. using Homebrew) then you are free to do so.\n\n== Prerequisites ==\n\nFirst, you have to install the Apple [https://developer.apple.com/downloads/index.action Xcode SDK].\nPlease choose version 4.2 or lower, because the current version has some compatibility problems with the SeqAn build system.\n\nAfter installing the Xcode SDK, please install !MacPorts following [http://www.macports.org/install.php these instructions].\nTo check that the !MacPorts install was successful, enter the following on your shell.\nIf the `port` program is found then you can go on.\n\n{{{\n#!ShellBox\n# port info\n}}}\n\nNext, install CMake and Subversion using the `port` command.\n\n{{{\n#!ShellBox\n# port install cmake\n# port install subversion\n}}}\n\n== Installing SeqAn From Subversion ==\n\nWe simply use Subversion to retrieve the current SeqAn trunk:\n\n{{{\n#!ShellBox\n# cd Development\n# svn co http://svn.mi.fu-berlin.de/seqan/trunk/seqan seqan-trunk\n}}}\n\nYou can now find the whole tree with the SeqAn library and applications in `seqan-trunk`.\n\n== Sanity Check: Creating A First Build ==\n\nWe will now use CMake to create Makefiles for building the applications, demos, and tests. Then, we will build one application to see whether the install was successful.\n\nWe create a directory `build/Xcode` that will be the home of the Xcode project files.\n\n{{{\n#!ShellBox\n# cd seqan-trunk\n# mkdir -p build/Xcode\n# cd build/Xcode\n# cmake ../.. -G Xcode\n}}}\n\nThis will generate several Xcode project files, namely for the !SeqAn core applications, demos, and tests.\nThe same will happen for the extras and sandbox directories.\n\n{{{\n#!WarningBox\n'''Note'''\nThere currently is a problem with the generated forwards and Xcode projects.\nFollow these steps now and for each SeqAn Xcode project you create in the future:\n\n 1. Open seqan.xcodeproj in the root directory of the build files.\n 1. Select the target ''test_stream''.\n 1. Build this one target.\n\nYou now have built generated forwards for all projects in the build directory and can use any project file therein. If you create a new build directory, then you have to follow these steps again.\n}}}\n\nNow, open the project for the core applications:\n\n{{{\n#!ShellBox\n# cd ../..\n# open core/apps/seqan_core_apps.xcodeproj\n}}}\n\nYou will see (depending on your Xcode version) something similar like this:\n\n[[Image(source:/trunk/seqan/core/demos/tutorial/getting_started/xcode_start_up_view.png, width=400px, align=center)]]\n\nIn the top, now select ''razers2''.\nYou have to select it both as the ''Active Target'' as well as the ''Active Executable''.\nThen, click the ''Build & Run'' button.\nOn successful execution, the bottom of the Xcode window will read:\n\n{{{\n#!IdeBox\nDebugging of "razers2" ended normally.\n}}}\n\nTo see the program's output, select ''Run -> Console'' in the program menu.\nUpon successful compilation and execution, the last lines of the output should look as follows:\n\n{{{\n#!IdeBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2 [OPTION]... <GENOME FILE> <READS FILE>\n       razers2 [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2 --help' for more information.\n\nDebugger stopped.\nProgram exited with status value:0.\n}}}\n\nYou can close Xcode now.\n\n== Your Sandbox: Hello World! ==\n\nYou can create new applications using the code generator.\n\nBut beforehand, we have to create a new sandbox using the code generator.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe use the code generator to create a new sandbox:\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py repository sandbox/my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{\n#!ShellBox\n# ./util/bin/skel.py app first_app sandbox/my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app ''first_app'' with a very simple example program.\n\nOpen the file `sandbox/my_sandbox/first_app/first_app.cpp` and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again:\n\n{{{\n#!ShellBox\n# cd build/Xcode\n# cmake .\n}}}\n\nThis will make cmake detect your new application directory.\nYou have to call `cmake .` every time after adding a new application or when changing a `CMakeLists.txt` file, but only once.\nNote that we did not specify the generator or build mode again as CMake will remember this setting after the first call.\n\nNow, you can open the project file for your sandbox:\n\n{{{\n#!ShellBox\n# open open sandbox/my_sandbox/seqan_sandbox_my_sandbox.xcodeproj\n}}}\n\nSelect ''first_app'' in the drop-down menu at the top, both as ''Active Executable'' and ''Active Target''.\nThen, click the ''Build & Run'' button.\n\nXcode will now compile your program and execute it.\nIf Xcode displays a message ''Error from Debugger: The program being debugged is not being run.'' this is not a problem, the application simply stopped executing too fast for the debugger to connect to.\n\nAgain, select ''Run -> Console'' to see the program's output.\nThe console's output should show the following lines:\n\n{{{\n#!IdeBox\nHello World!\nHello SeqAn!\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system with Xcode!\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1302	1227
2012-07-05T17:34:02.870+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	1290	1302	1227
2012-07-05T17:40:55.786+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode	160.45.112.60	-	0	0	1302	1202
2012-07-05T17:41:00.288+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted/DraftMacXCode?action=edit	160.45.112.60	-	0	0	1302	1227

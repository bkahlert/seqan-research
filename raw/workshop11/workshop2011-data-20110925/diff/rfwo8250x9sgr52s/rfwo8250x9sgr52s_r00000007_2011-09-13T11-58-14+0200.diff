Binary files ./misc/seqan_instrumentation/last_revision_copy/sandbox/workshop/apps/ministellar/.ministellar.cpp.swp and ./sandbox/workshop/apps/ministellar/.ministellar.cpp.swp differ
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /Users/konrad/Projects/workshop11/seqan/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/rfwo8250x9sgr52s_stats.txt -x /Users/konrad/Projects/workshop11/seqan/misc/seqan_instrumentation/userdata/rfwo8250x9sgr52s_stats.txt -x .svn -x build -x util -x misc -x docs -x misc/seqan_instrumentation/bin -x /Users/konrad/Projects/workshop11/seqan/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /Users/konrad/Projects/workshop11/seqan/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /Users/konrad/Projects/workshop11/seqan/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/workshop/apps/ministellar/ministellar.cpp ./sandbox/workshop/apps/ministellar/ministellar.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/workshop/apps/ministellar/ministellar.cpp	2011-09-13 10:32:32.000000000 +0200
+++ ./sandbox/workshop/apps/ministellar/ministellar.cpp	2011-09-13 11:58:09.000000000 +0200
@@ -21,10 +21,13 @@
 
 template <typename TSequence>
 inline bool loadFasta(StringSet<CharString>& ids, StringSet<TSequence>& sequences, char const* filename) {
-    std::ifstream streamIn1(filename, std::ios::binary);
+    std::ifstream streamIn(filename, std::ios::binary);
+    if (not streamIn)
+        return false;
+
     RecordReader<std::ifstream, SinglePass<> > reader(streamIn);
     if (read2(ids, sequences, reader, Fasta()) != 0) {
-        std::cerr << "Could not read file " << argv[1] << std::endl;
+        std::cerr << "Could not read file " << filename << std::endl;
         return false;
     }
 
@@ -60,43 +63,56 @@
     // HINT: The tutorial on Pattern Matching describes the find interface. At the end of that
     //       tutorial page, you will find a link to a Swift HowTo page.
     
-    typedef Finder<StringSet<TSequence>, Swift<SwiftLocal> > TFinder;
-    typedef Index<StringSet<TSequence>, IndexQGram<Shape<TValue, SimpleShape>, OpenAddressing> > TIndex;
+    typedef Finder<TSequence, Swift<SwiftLocal> > TFinder;
+    typedef Index<TSequence, IndexQGram<Shape<TValue, UngappedShape<8> >, OpenAddressing> > TIndex;
     typedef Pattern<TQGramIndex, Swift<SwiftLocal> > TPattern;
 
     // TODO: Define variables of your pattern and finder types, and initialize them with the
     //       first sequences in the sequence sets seqs1 and seqs2.
 
+    TIndex index(seqs2[0]);
+    TPattern pattern(index);
+    TFinder finder(seqs1[0]);
+
     // TODO: Repeat the following steps for all hits of the finder.
 
     // call the function find to obtain a swift hit
     // TODO: uncomment the following line
 
-    //find(finder, pattern, errorRate, minimalLength);
+    while (find(finder, pattern, errorRate, minimalLength)) {
+        // extract infixes from hit
+        // TODO: uncomment the following three lines
+
+        typedef Infix<TSequence>::Type TInfix;
+        TInfix infix1 = infix(finder, seqs1[0]);
+        TInfix infix2 = infix(pattern, seqs2[0]);
+
+        // find best local alignment of infixes, and check for minimal score
+        // TODO: Define an align object and initialize it with the infixes. Find the best local
+        //       alignment of the infixes. Use the above defined scoring scheme. Make sure that
+        //       it reaches the minimal score minScore.
+
+        Align<TSequence> align;
+        reserve(rows(align), 2, Exact());
+        appendValue(rows(align), infix1);
+        appendValue(rows(align), infix2);
+        int alignScore = localAlignment(align, score, minScore);
+
+        // create a seed for the local alignment, and conduct gapped X-drop extension
+        // TODO: Define a seed on the original sequences but for the subsequences of the local
+        //       alignment. Extend this seed in both directions using gapped X-drop extension.
+        //       Check that the extended seed has a length of at least minimalLength.
+        // HINT: Have a look at the Seed-and-Extend tutorial.
+
+        typedef Seed<int, SimpleSeed> TSeed;
+        TSeed seed(toSourcePosition(row(align, 0), 0), toSourcePosition(row(align, 1), 0), 0);
+
+        // find best global alignment of extended seed
+        // TODO: Compute the best global alignment of extended seed and its score.
+        // HINT: Create an align object on infixes of the sequences.
 
-    // extract infixes from hit
-    // TODO: uncomment the following three lines
-
-    //typedef Infix<TSequence>::Type TInfix;
-    //TInfix infix1 = infix(finder, seqs1[0]);
-    //TInfix infix2 = infix(pattern, seqs2[0]);
-
-    // find best local alignment of infixes, and check for minimal score
-    // TODO: Define an align object and initialize it with the infixes. Find the best local
-    //       alignment of the infixes. Use the above defined scoring scheme. Make sure that
-    //       it reaches the minimal score minScore.
-
-    // create a seed for the local alignment, and conduct gapped X-drop extension
-    // TODO: Define a seed on the original sequences but for the subsequences of the local
-    //       alignment. Extend this seed in both directions using gapped X-drop extension.
-    //       Check that the extended seed has a length of at least minimalLength.
-    // HINT: Have a look at the Seed-and-Extend tutorial.
-
-    // find best global alignment of extended seed
-    // TODO: Compute the best global alignment of extended seed and its score.
-    // HINT: Create an align object on infixes of the sequences.
-
-    // TODO: Output the alignment as a match to the output file.
+        // TODO: Output the alignment as a match to the output file.
+    }
 
     outFile.close();
 

// ==========================================================================
//                                adapterStat
// ==========================================================================
// Copyright (c) 2006-2013, Knut Reinert, FU Berlin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
//       its contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ==========================================================================
// Author: Benjamin Strauch
// ==========================================================================

#include <seqan/basic.h>
#include <seqan/sequence.h>
#include <seqan/seq_io.h>
#include <seqan/arg_parse.h>

#include <unordered_map>

#include <unordered_map> // enable C++11 mode for this structure.

// ==========================================================================
// Classes
// ==========================================================================

// --------------------------------------------------------------------------
// Class AppOptions
// --------------------------------------------------------------------------

// This struct stores the options from the command line.
//
// You might want to rename this to reflect the name of your app.

struct AppOptions
{
    // Verbosity level.  0 -- quiet, 1 -- normal, 2 -- verbose, 3 -- very verbose.
    int verbosity;

    // The first (and only) argument of the program is stored here.
    seqan::CharString file1, file2;

    AppOptions() :
        verbosity(1)
    {}
};

// ==========================================================================
// Functions
// ==========================================================================

// --------------------------------------------------------------------------
// Function parseCommandLine()
// --------------------------------------------------------------------------

seqan::ArgumentParser::ParseResult
parseCommandLine(AppOptions & options, int argc, char const ** argv)
{
    // Setup ArgumentParser.
    seqan::ArgumentParser parser("adapterStat");
    // Set short description, version, and date.
    setShortDescription(parser, "Adapter trimming statistics");
    setVersion(parser, "0.1");
    setDate(parser, "July 2012");

    // Define usage line and long description.
    addUsageLine(parser, "[\\fIOPTIONS\\fP] \\fIREFERENCE\\fP \\fITRIMMED\\fP");
    addDescription(parser, "This program analyses fastq files generated by SimSeq and generates "
    		"statistics about the accuracy of the adapter trimming.");

    // We require one argument.
    addArgument(parser, seqan::ArgParseArgument(seqan::ArgParseArgument::INPUTFILE, "FILE", true));

    addOption(parser, seqan::ArgParseOption("q", "quiet", "Set verbosity to a minimum."));
    addOption(parser, seqan::ArgParseOption("v", "verbose", "Enable verbose output."));
    addOption(parser, seqan::ArgParseOption("vv", "very-verbose", "Enable very verbose output."));

    // Add Examples Section.
    addTextSection(parser, "Examples");
    addListItem(parser, "\\fBadapterStat\\fP \\fB-v\\fP \\fItext\\fP",
                "Call with \\fITEXT\\fP set to \"text\" with verbose output.");

    // Parse command line.
    seqan::ArgumentParser::ParseResult res = seqan::parse(parser, argc, argv);

    // Only extract  options if the program will continue after parseCommandLine()
    if (res != seqan::ArgumentParser::PARSE_OK)
        return res;

    // Extract option values.
    if (isSet(parser, "quiet"))
        options.verbosity = 0;
    if (isSet(parser, "verbose"))
        options.verbosity = 2;
    if (isSet(parser, "very-verbose"))
        options.verbosity = 3;
    seqan::getArgumentValue(options.file1, parser, 0, 0);
    seqan::getArgumentValue(options.file2, parser, 0, 1);

    return seqan::ArgumentParser::PARSE_OK;
}

// --------------------------------------------------------------------------
// Function insertSize(char* s)
// --------------------------------------------------------------------------

// Returns (num2 - num1 + 1) in a string "xxxx_num1_num2_xxx...".
int insertSize(char* s)
{
	int insert = 0;
	strtok(s, "_");
	insert -= atoi(strtok(NULL, "_"));
	insert += atoi(strtok(NULL, "_")) + 1;
	return insert;
}

// Since CharStrings can't be hashed so easily, we
// hash their CString representation and store the hash.
unsigned long hash2(const char *str)
{
  unsigned long n = 5381UL;
  int i;
  for (i = 0; str[i] != '\0'; i++)
  {
    n = n * 33UL + str[i];
  }
  return n;
}

template <typename key, typename map>
bool exists(key k, map m)
{
	return m.find(k) != m.end();
}

// --------------------------------------------------------------------------
// Function main()
// --------------------------------------------------------------------------

// Program entry point.

int main(int argc, char const ** argv)
{
    // Parse the command line.
    seqan::ArgumentParser parser;
    AppOptions options;
    seqan::ArgumentParser::ParseResult res = parseCommandLine(options, argc, argv);

    // If there was an error parsing or built-in argument parser functionality
    // was triggered then we exit the program.  The return code is 1 if there
    // were errors and 0 if there were none.
    if (res != seqan::ArgumentParser::PARSE_OK)
        return res == seqan::ArgumentParser::PARSE_ERROR;
    
    // Print the command line arguments back to the user.
    if (options.verbosity > 0)
    {
        std::cout << "__OPTIONS____________________________________________________________________\n"
                  << '\n'
                  << "VERBOSITY\t" << options.verbosity << '\n'
                  << "REF      \t" << options.file1 << '\n'
                  << "TRIM     \t" << options.file2 << "\n\n";
    }

    seqan::SequenceStream refStream(seqan::toCString(options.file1));
    seqan::SequenceStream trimStream(seqan::toCString(options.file2));

    if (!isGood(refStream) || !isGood(trimStream))
    {
    	std::cerr << "Could not open file.\n";
    	return 1;
    }
    seqan::CharString idRef, idTrim;
    seqan::String<seqan::Dna5Q> seqRef, seqTrim;

    std::unordered_map<unsigned long, unsigned> lengthMap;

    unsigned c =0;
    while (!atEnd(trimStream))
    {
    	if ( readRecord(idTrim, seqTrim, trimStream) == 0)
    	{
    		unsigned long h = hash2(seqan::toCString(idTrim));
    		lengthMap[h] = length(seqTrim);
    		c++;
    	}
    	else
    	{
    		std::cerr << "Error while reading reference file.\n";
    	}
    }

    std::cout << "Inserted " << c << " " << lengthMap.size() << " elements.\n";

    int count = 0;
    int false_pos = 0, true_pos = 0, false_neg = 0, true_neg = 0;

    while (!atEnd(refStream))
    {
    	if ( readRecord(idRef, seqRef, refStream) == 0)
    	{
			++count;
			unsigned long h = hash2(seqan::toCString(idRef));
			unsigned insert = insertSize(seqan::toCString(idRef));

			unsigned len_trim = 0;
			if (lengthMap.count(h) != 0)
				len_trim = lengthMap[h];

			// We know how much adapter sequence we have read.
			int overlap = length(seqRef) > insert ? length(seqRef) - insert : 0;
			int trimmed = length(seqRef) - len_trim;

			if (trimmed > overlap)  // Trimmed more than necessary.
				++false_pos;
			else if (trimmed == overlap && overlap > 0)  // Trimmed the adapter exactly.
				++true_pos;
			else if (trimmed < overlap)  // Trimmed less than necessary (or nothing at all).
				++false_neg;
			else if(trimmed == 0 && overlap == 0) // Correctly trimmed nothing.
				++true_neg;
    	}
    	else
    	{
    		std::cerr << "Error reading file reference file." << std::endl;
    		return 1;
    	}
    }

	double sensitivity = (double) true_pos / ((double) true_pos + (double) false_neg);
	double specifivity = (double) true_neg / ((double) true_neg + (double) false_pos);

	double exact = (double) (true_pos + true_neg) / (double) count;
	double wrong = (double) (false_pos + false_neg) / (double) count;

    std::cout << "Adapter trimming statistics\n";
    std::cout << "===========================\n" << std::setprecision(3);
    std::cout << "Sens:  " << std::setw(5) << sensitivity << " | Spec:  " << std::setw(5) << specifivity   << std::endl;
    std::cout << "Exact: " << std::setw(5) << exact       << " | Wrong: " << std::setw(5) << wrong << "\n" << std::endl;

    return 0;
}

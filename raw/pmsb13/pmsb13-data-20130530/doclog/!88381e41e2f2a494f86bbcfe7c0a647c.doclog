2013-04-02T15:29:13.820+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	532	1352	1324
2013-04-02T15:29:15.501+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	532	1352	1324
2013-04-02T15:31:08.339+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	532	1352	1324
2013-04-02T15:31:10.167+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	532	1352	1324
2013-04-02T15:32:56.811+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	532	1352	1324
2013-04-02T15:32:59.479+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	576	1352	1324
2013-04-02T15:33:00.599+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	576	1352	1324
2013-04-02T15:33:05.375+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	984	1352	1324
2013-04-02T15:33:09.428+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1304	1352	1324
2013-04-02T15:33:10.478+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1304	1352	1324
2013-04-02T15:33:15.479+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1236	1352	1324
2013-04-02T15:33:19.811+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1236	1352	1324
2013-04-02T15:34:34.972+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1328	1352	1324
2013-04-02T15:34:43.568+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1460	1352	1324
2013-04-02T15:34:50.119+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1488	1352	1324
2013-04-02T15:34:54.199+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1560	1352	1324
2013-04-02T15:34:59.136+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2044	1352	1324
2013-04-02T15:35:01.646+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1984	1352	1324
2013-04-02T15:35:46.648+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1904	1352	1324
2013-04-02T15:35:50.359+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1920	1352	1324
2013-04-02T15:35:55.897+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1336	1352	1324
2013-04-02T15:35:56.519+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1336	1352	1324
2013-04-02T15:36:04.134+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1240	1352	1324
2013-04-02T15:36:22.159+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1240	1352	1324
2013-04-02T15:38:47.128+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:38:57.886+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:38:59.396+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/IndexIterators#	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:39:01.153+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/IndexIterators#	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:39:06.778+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/IndexIterators#	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:39:11.332+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:40:47.832+02:00	LINK-http://docs.seqan.de/seqan/dev/SPEC_Top_Down_History+_Iterator.html	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:40:49.814+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:40:49.818+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:43:49.490+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:43:57.132+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/IndexIterators#	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:44:35.662+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/IndexIterators#	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1796	1352	1324
2013-04-02T15:44:44.943+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1752	1352	1324
2013-04-02T15:44:46.232+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1752	1352	1324
2013-04-02T16:03:14.763+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1752	1352	1324
2013-04-02T16:03:17.606+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1992	1352	1324
2013-04-02T16:03:18.446+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/IndexIterators#	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	1992	1352	1324
2013-04-02T16:03:20.863+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2084	1352	1324
2013-04-02T16:03:21.441+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/IndexIterators#	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2084	1352	1324
2013-04-02T16:03:24.270+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2188	1352	1324
2013-04-02T16:03:41.375+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2208	1352	1324
2013-04-02T16:03:51.158+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2508	1352	1324
2013-04-02T16:11:06.677+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2508	1352	1324
2013-04-02T16:11:15.124+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2508	1352	1324
2013-04-02T16:11:18.614+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2744	1352	1324
2013-04-02T16:12:04.352+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2748	1352	1324
2013-04-02T16:12:30.023+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2812	1352	1324
2013-04-02T16:12:40.502+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2900	1352	1324
2013-04-02T16:12:59.391+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	2920	1352	1324
2013-04-02T16:13:04.918+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3008	1352	1324
2013-04-02T16:13:13.736+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3008	1352	1324
2013-04-02T16:15:03.030+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3008	1352	1324
2013-04-02T16:15:08.660+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3008	1352	1324
2013-04-02T16:22:32.801+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3008	1352	1324
2013-04-02T16:22:36.975+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3308	1352	1324
2013-04-02T16:22:41.831+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3416	1352	1324
2013-04-02T16:23:13.893+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3416	1352	1324
2013-04-02T16:23:31.243+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3416	1352	1324
2013-04-02T16:23:46.218+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3432	1352	1324
2013-04-02T16:23:49.160+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3432	1352	1324
2013-04-02T16:27:32.733+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3432	1352	1324
2013-04-02T16:27:36.487+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3624	1352	1324
2013-04-02T16:27:42.406+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3844	1352	1324
2013-04-02T16:27:47.999+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3996	1352	1324
2013-04-02T16:27:50.351+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4000	1352	1324
2013-04-02T16:29:16.219+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	0	1352	1324
2013-04-02T16:29:24.830+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	52	1352	1324
2013-04-02T16:29:30.647+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	80	1352	1324
2013-04-02T16:29:35.392+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	88	1352	1324
2013-04-02T16:29:39.982+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	104	1352	1324
2013-04-02T16:29:48.334+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	116	1352	1324
2013-04-02T16:29:57.822+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	132	1352	1324
2013-04-02T16:30:02.695+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	148	1352	1324
2013-04-02T16:30:05.279+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	152	1352	1324
2013-04-02T16:30:12.487+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	156	1352	1324
2013-04-02T16:30:16.168+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	160	1352	1324
2013-04-02T16:30:22.703+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	164	1352	1324
2013-04-02T16:30:31.270+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	244	1352	1324
2013-04-02T16:31:55.853+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	244	1352	1324
2013-04-02T16:35:47.552+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment1	160.45.112.60	-	0	244	1352	1324
2013-04-02T16:35:52.776+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4016	1352	1324
2013-04-02T16:35:57.318+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4236	1352	1324
2013-04-02T16:36:06.303+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4236	1352	1324
2013-04-02T16:36:18.583+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4252	1352	1324
2013-04-02T16:36:26.816+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4300	1352	1324
2013-04-02T16:36:31.686+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4300	1352	1324
2013-04-02T16:42:28.157+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4300	1352	1324
2013-04-02T16:42:30.016+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment2	160.45.112.60	-	0	0	1367	1324
2013-04-02T16:43:23.857+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4300	1352	1324
2013-04-02T16:43:27.753+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment2	160.45.112.60	-	0	0	1367	1324
2013-04-02T16:43:29.479+02:00	LINK-http://docs.seqan.de/seqan/dev/SPEC_22_M_U_Ms.html	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment2	160.45.112.60	-	0	0	1367	1324
2013-04-02T16:43:32.696+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment2	160.45.112.60	-	0	0	1367	1324
2013-04-02T16:43:35.395+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment2	160.45.112.60	-	0	0	1367	1324
2013-04-02T16:43:43.027+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4300	1352	1324
2013-04-02T16:48:13.580+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4300	1352	1324
2013-04-02T16:48:18.584+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4456	1352	1324
2013-04-02T16:49:47.815+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4536	1352	1324
2013-04-02T16:49:57.631+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4540	1352	1324
2013-04-02T16:50:08.310+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4648	1352	1324
2013-04-02T16:50:15.037+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4648	1352	1324
2013-04-02T16:50:23.830+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4500	1352	1324
2013-04-02T16:50:24.239+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4500	1352	1324
2013-04-02T16:50:25.005+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment2	160.45.112.60	-	0	0	1367	1324
2013-04-02T16:50:28.000+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment2	160.45.112.60	-	0	0	1367	1324
2013-04-02T17:00:10.757+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment2	160.45.112.60	-	0	0	1367	1324
2013-04-02T17:00:11.902+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4500	1352	1324
2013-04-02T17:00:14.975+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4644	1352	1324
2013-04-02T17:01:11.223+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4936	1352	1324
2013-04-02T17:01:23.415+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	4940	1352	1324
2013-04-02T17:02:33.744+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	5068	1352	1324
2013-04-02T17:02:39.463+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	5076	1352	1324
2013-04-02T17:03:05.900+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	5076	1352	1324
2013-04-02T17:36:18.362+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	5076	1352	1249
2013-04-02T17:36:19.872+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	5152	1352	1249
2013-04-02T17:36:24.689+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	6232	1352	1249
2013-04-02T17:36:48.407+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	6228	1352	1249
2013-04-02T17:37:12.223+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	6260	1352	1249
2013-04-02T17:38:11.031+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	6261	1352	1249
2013-04-03T10:48:19.203+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	0	1352	1249
2013-04-03T10:48:23.919+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	520	1352	1249
2013-04-03T10:48:25.453+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	0	1352	1249
2013-04-03T10:48:33.960+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	3440	1352	1249
2013-04-03T10:48:43.566+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	160.45.112.60	-	0	6108	1352	1249
2013-04-03T10:49:23.946+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	520	1352	1249
2013-04-03T10:49:26.721+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	0	1352	1249
2013-04-03T10:49:50.085+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	0	1352	1249
2013-04-03T10:50:19.836+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	480	1352	1249
2013-04-03T10:50:20.608+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	480	1352	1249
2013-04-03T10:50:26.303+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	588	1352	1249
2013-04-03T10:50:29.079+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	568	1352	1249
2013-04-03T10:50:31.144+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	568	1352	1249
2013-04-03T10:50:34.116+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	568	1352	1249
2013-04-03T10:50:37.137+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	568	1352	1249
2013-04-03T10:50:46.413+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	568	1352	1249
2013-04-03T10:50:55.258+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	568	1352	1249
2013-04-03T10:51:00.023+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:53:03.796+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:53:04.460+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:53:08.240+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:53:11.088+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:56:19.105+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:56:26.672+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:56:29.228+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:56:47.933+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:56:58.587+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:57:01.709+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:57:53.086+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	572	1352	1249
2013-04-03T10:57:55.991+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	204	1352	1249
2013-04-03T10:57:57.803+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	204	1352	1249
2013-04-03T10:58:08.973+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	204	1352	1249
2013-04-03T10:58:10.955+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	204	1352	1249
2013-04-03T11:03:56.784+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	204	1352	1249
2013-04-03T11:03:57.312+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	204	1352	1249
2013-04-03T11:04:09.645+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	204	1352	1249
2013-04-03T11:04:10.118+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	204	1352	1249
2013-04-03T11:04:11.412+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	204	1352	1249
2013-04-03T11:04:15.806+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	236	1352	1249
2013-04-03T11:05:34.144+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	240	1352	1249
2013-04-03T11:05:40.151+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	244	1352	1249
2013-04-03T11:05:44.696+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	260	1352	1249
2013-04-03T11:05:51.167+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	268	1352	1249
2013-04-03T11:05:58.055+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	728	1352	1249
2013-04-03T11:07:59.816+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	740	1352	1249
2013-04-03T11:08:04.654+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	744	1352	1249
2013-04-03T11:08:08.935+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	760	1352	1249
2013-04-03T11:08:18.784+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	768	1352	1249
2013-04-03T11:10:12.963+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	768	1352	1249
2013-04-03T11:12:28.813+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	768	1352	1249
2013-04-03T11:12:31.167+02:00	LINK-http://docs.seqan.de/seqan/dev/SPEC_Index_Q_Gram.html	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	768	1352	1249
2013-04-03T11:12:32.505+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	768	1352	1249
2013-04-03T11:14:43.339+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	768	1352	1249
2013-04-03T11:14:47.167+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	760	1352	1249
2013-04-03T11:16:48.960+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	760	1352	1249
2013-04-03T11:16:52.479+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	760	1352	1249
2013-04-03T11:17:00.085+02:00	READY	http://trac.seqan.de/wiki/HowTo/AccessIndexFibres	160.45.112.60	-	0	0	1352	1249
2013-04-03T11:17:11.591+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/AccessIndexFibres	160.45.112.60	-	0	12	1352	1249
2013-04-03T11:17:48.830+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/AccessIndexFibres	160.45.112.60	-	0	660	1352	1249
2013-04-03T11:17:52.314+02:00	READY	http://trac.seqan.de/wiki/HowTo/AccessIndexFibres	160.45.112.60	-	0	660	1352	1249
2013-04-03T11:18:01.894+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/AccessIndexFibres	160.45.112.60	-	0	1116	1352	1249
2013-04-03T11:18:33.591+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/AccessIndexFibres	160.45.112.60	-	0	1508	1352	1249
2013-04-03T11:19:46.687+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/AccessIndexFibres	160.45.112.60	-	0	2311	1352	1249
2013-04-03T11:22:10.631+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	760	1352	1249
2013-04-03T11:22:15.351+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T11:22:18.555+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T11:22:37.289+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T11:22:38.689+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T11:24:54.015+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T11:24:57.907+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	160.45.112.60	-	0	0	1367	1249
2013-04-03T11:25:54.895+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	160.45.112.60	-	0	0	1367	1249
2013-04-03T11:26:00.333+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	160.45.112.60	-	0	0	1367	1249
2013-04-03T11:26:01.001+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	160.45.112.60	-	0	0	1367	1249
2013-04-03T11:27:57.479+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	160.45.112.60	-	0	0	1367	1249
2013-04-03T11:27:57.538+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	160.45.112.60	-	0	0	1367	1249
2013-04-03T11:40:19.490+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	160.45.112.60	-	0	0	1367	1249
2013-04-03T11:40:36.856+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	160.45.112.60	-	0	0	1367	1249
2013-04-03T11:55:24.230+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	160.45.112.60	-	0	0	1367	1249
2013-04-03T11:56:18.885+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T11:56:21.220+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T11:59:26.065+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	0	1352	1249
2013-04-03T11:59:26.074+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	0	1352	1249
2013-04-03T11:59:26.295+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	0	1352	1249
2013-04-03T12:01:26.791+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	0	1352	1249
2013-04-03T12:01:30.616+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T12:02:27.330+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T12:03:11.986+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T12:03:12.999+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T12:09:18.242+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T12:09:21.510+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	520	1352	1249
2013-04-03T12:09:24.116+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	0	1352	1249
2013-04-03T12:09:26.464+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	72	1352	1249
2013-04-03T12:09:28.199+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	72	1352	1249
2013-04-03T12:09:44.982+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	72	1352	1249
2013-04-03T12:09:50.073+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	788	1352	1249
2013-04-03T12:09:59.775+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	1044	1352	1249
2013-04-03T12:10:04.445+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	1030	1352	1249
2013-04-03T12:10:05.263+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	1030	1352	1249
2013-04-03T12:10:12.494+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	662	1352	1249
2013-04-03T12:11:19.445+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	662	1352	1249
2013-04-03T12:11:19.960+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	662	1352	1249
2013-04-03T12:11:22.633+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	662	1352	1249
2013-04-03T12:11:28.942+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:12:11.592+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:12:24.109+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:12:27.330+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:12:32.490+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:13:17.744+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:16:18.301+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:16:30.879+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:16:32.685+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:16:33.992+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:16:34.937+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequencesInDepth	160.45.112.60	-	0	558	1352	1249
2013-04-03T12:16:39.055+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	524	1352	1249
2013-04-03T12:16:43.000+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	4	1352	1249
2013-04-03T12:16:46.127+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	933	1352	1249
2013-04-03T12:16:46.679+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	933	1352	1249
2013-04-03T12:19:32.785+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	933	1352	1249
2013-04-03T12:19:35.031+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	556	1352	1249
2013-04-03T12:19:44.529+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	0	1352	1249
2013-04-03T12:19:47.486+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	12	1352	1249
2013-04-03T12:19:51.144+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	12	1352	1249
2013-04-03T12:20:03.845+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	16	1352	1249
2013-04-03T12:20:07.143+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	64	1352	1249
2013-04-03T12:20:18.577+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	72	1352	1249
2013-04-03T12:20:28.183+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	408	1352	1249
2013-04-03T12:20:34.335+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	956	1352	1249
2013-04-03T12:20:43.023+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	161	1352	1249
2013-04-03T12:20:44.910+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	161	1352	1249
2013-04-03T12:20:55.397+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	161	1352	1249
2013-04-03T12:21:00.921+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	161	1352	1249
2013-04-03T12:23:21.170+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Randomness	160.45.112.60	-	0	161	1352	1249
2013-04-03T12:23:22.960+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	788	1352	1249
2013-04-03T12:23:25.369+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Alphabets	160.45.112.60	-	0	0	1352	1249
2013-04-03T12:23:30.408+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	160.45.112.60	-	0	548	1352	1249
2013-04-03T12:23:40.823+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	160.45.112.60	-	0	1136	1352	1249
2013-04-03T12:23:42.419+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Alphabets#	http://trac.seqan.de/wiki/Tutorial/Alphabets	160.45.112.60	-	0	1272	1352	1249
2013-04-03T12:23:44.942+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	160.45.112.60	-	0	1636	1352	1249
2013-04-03T12:24:12.493+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	476	1352	1249
2013-04-03T12:24:13.065+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	476	1352	1249
2013-04-03T12:31:01.932+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	476	1352	1249
2013-04-03T12:31:03.841+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	476	1352	1249
2013-04-03T12:31:24.365+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	476	1352	1249
2013-04-03T12:31:25.791+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	0	1352	1249
2013-04-03T12:31:28.399+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T12:32:30.224+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T12:33:47.094+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T12:33:49.212+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-03T12:34:09.478+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	32	1352	1249
2013-04-03T12:34:21.885+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	32	1352	1249
2013-04-03T12:36:26.995+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	32	1352	1249
2013-04-03T12:36:31.951+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	84	1352	1249
2013-04-03T12:36:37.967+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	96	1352	1249
2013-04-03T12:36:42.671+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	224	1352	1249
2013-04-03T12:36:48.079+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	256	1352	1249
2013-04-03T12:37:02.831+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	504	1352	1249
2013-04-03T12:37:08.311+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	608	1352	1249
2013-04-03T12:37:12.950+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	624	1352	1249
2013-04-03T12:37:25.784+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	996	1352	1249
2013-04-03T12:37:35.255+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1016	1352	1249
2013-04-03T12:37:42.823+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1096	1352	1249
2013-04-03T12:37:53.502+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	984	1352	1249
2013-04-03T12:38:35.424+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	992	1352	1249
2013-04-03T12:38:37.695+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1000	1352	1249
2013-04-03T12:38:43.807+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1012	1352	1249
2013-04-03T12:38:48.127+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1012	1352	1249
2013-04-03T12:38:54.544+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1016	1352	1249
2013-04-03T12:39:00.695+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1032	1352	1249
2013-04-03T12:39:06.786+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	448	1352	1249
2013-04-03T12:39:08.079+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	448	1352	1249
2013-04-03T12:39:13.359+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	436	1352	1249
2013-04-03T12:39:34.599+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	304	1352	1249
2013-04-03T12:39:38.679+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	392	1352	1249
2013-04-03T12:39:41.942+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	396	1352	1249
2013-04-03T12:39:55.430+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	216	1352	1249
2013-04-03T12:39:59.817+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	372	1352	1249
2013-04-03T12:40:12.423+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	396	1352	1249
2013-04-03T12:40:24.039+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	428	1352	1249
2013-04-03T12:40:31.207+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	452	1352	1249
2013-04-03T12:40:38.222+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	624	1352	1249
2013-04-03T12:41:18.022+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	644	1352	1249
2013-04-03T12:42:06.992+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	744	1352	1249
2013-04-03T12:42:11.767+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1024	1352	1249
2013-04-03T12:42:23.399+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	188	1352	1249
2013-04-03T12:42:24.528+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	188	1352	1249
2013-04-03T12:42:45.231+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	444	1352	1249
2013-04-03T12:43:11.157+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	444	1352	1249
2013-04-03T12:43:15.983+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	444	1352	1249
2013-04-03T12:43:23.058+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	444	1352	1249
2013-04-03T12:43:37.114+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	444	1352	1249
2013-04-03T12:47:17.710+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	444	1352	1249
2013-04-03T12:47:20.112+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-03T12:47:20.287+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-03T12:49:14.225+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-03T12:49:17.121+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	797	1352	1249
2013-04-03T12:49:20.759+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	629	1352	1249
2013-04-03T12:49:54.959+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	629	1352	1249
2013-04-03T12:50:42.397+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	629	1352	1249
2013-04-03T12:50:42.368+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	629	1352	1249
2013-04-03T12:57:36.543+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	629	1352	1249
2013-04-03T12:57:38.410+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	40	1352	1249
2013-04-03T12:57:40.831+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	688	1352	1249
2013-04-03T12:57:42.115+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	688	1352	1249
2013-04-03T12:57:44.884+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	688	1352	1249
2013-04-03T12:57:47.191+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	629	1352	1249
2013-04-03T12:57:47.393+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	629	1352	1249
2013-04-03T14:05:30.547+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	985	1352	1249
2013-04-03T14:05:30.982+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	985	1352	1249
2013-04-03T14:05:32.689+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	476	1352	1249
2013-04-03T14:05:36.599+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	528	1352	1249
2013-04-03T14:05:43.976+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	0	1352	1249
2013-04-03T14:05:47.151+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	16	1352	1249
2013-04-03T14:06:01.094+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	2952	1352	1249
2013-04-03T14:06:12.033+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	3541	1352	1249
2013-04-03T14:06:20.617+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	528	1352	1249
2013-04-03T14:06:25.992+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	576	1352	1249
2013-04-03T14:06:28.358+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	576	1352	1249
2013-04-03T14:09:31.763+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	576	1352	1249
2013-04-03T14:09:42.918+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	872	1352	1249
2013-04-03T14:09:45.390+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	816	1352	1249
2013-04-03T14:09:46.287+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	816	1352	1249
2013-04-03T14:10:21.844+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	816	1352	1249
2013-04-03T14:10:25.732+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	816	1352	1249
2013-04-03T14:39:15.318+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	816	1352	1249
2013-04-03T14:39:18.808+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	0	1352	1249
2013-04-03T14:39:23.626+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T14:39:29.063+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T14:45:26.800+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	937	1352	1249
2013-04-03T14:45:30.631+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T14:45:30.991+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T14:45:31.592+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T14:56:52.463+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T14:56:54.337+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T15:22:30.824+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T15:22:43.964+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T15:23:32.685+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T15:23:33.558+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-03T15:23:36.079+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	268	1352	1249
2013-04-03T15:29:30.388+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	268	1352	1249
2013-04-03T15:32:32.407+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	540	1352	1249
2013-04-03T15:32:38.478+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	52	1352	1249
2013-04-03T15:32:42.677+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	52	1352	1249
2013-04-03T15:32:42.719+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	52	1352	1249
2013-04-03T15:39:28.333+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	52	1352	1249
2013-04-03T15:39:29.486+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T15:39:31.872+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	816	1352	1249
2013-04-03T15:39:35.777+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	0	1352	1249
2013-04-03T15:39:38.919+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	868	1352	1249
2013-04-03T15:39:45.645+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	868	1352	1249
2013-04-03T15:39:58.389+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	796	1352	1249
2013-04-03T15:39:58.429+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	796	1352	1249
2013-04-03T15:39:58.411+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	796	1352	1249
2013-04-03T15:40:01.561+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	796	1352	1249
2013-04-03T15:40:04.798+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	880	1352	1249
2013-04-03T15:40:12.319+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	300	1352	1249
2013-04-03T15:40:17.464+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	420	1352	1249
2013-04-03T15:40:22.800+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	0	1352	1249
2013-04-03T15:40:23.545+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	0	1352	1249
2013-04-03T15:41:18.460+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	0	1352	1249
2013-04-03T15:41:20.152+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	0	1352	1249
2013-04-03T16:06:05.075+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.112.60	-	0	0	1352	1249
2013-04-03T16:06:08.384+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	700	1352	1249
2013-04-03T16:06:17.422+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	700	1352	1249
2013-04-03T16:06:22.350+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	748	1352	1249
2013-04-03T16:06:23.891+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	748	1352	1249
2013-04-03T16:06:27.886+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	0	1352	1249
2013-04-03T16:06:30.375+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-03T16:06:31.281+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-03T16:06:34.894+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	564	1352	1249
2013-04-03T16:06:53.919+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	600	1352	1249
2013-04-03T16:06:59.086+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	616	1352	1249
2013-04-03T16:07:20.616+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	620	1352	1249
2013-04-03T16:07:32.726+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	660	1352	1249
2013-04-03T16:07:45.735+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	680	1352	1249
2013-04-03T16:10:09.102+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	680	1352	1249
2013-04-03T16:15:36.959+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	656	1352	1249
2013-04-03T16:16:00.470+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	624	1352	1249
2013-04-03T16:16:12.718+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	852	1352	1249
2013-04-03T16:16:39.322+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	852	1352	1249
2013-04-03T16:16:42.054+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	852	1352	1249
2013-04-03T16:16:55.494+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1024	1352	1249
2013-04-03T16:17:05.873+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1048	1352	1249
2013-04-03T16:17:06.151+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1048	1352	1249
2013-04-03T16:17:07.871+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1048	1352	1249
2013-04-03T16:17:15.946+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1016	1352	1249
2013-04-03T16:17:16.134+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1016	1352	1249
2013-04-03T16:17:31.790+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1000	1352	1249
2013-04-03T16:17:35.213+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1000	1352	1249
2013-04-03T16:23:29.589+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1000	1352	1249
2013-04-03T16:23:29.622+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1000	1352	1249
2013-04-03T16:28:46.917+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	1000	1352	1249
2013-04-03T16:28:53.096+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	996	1352	1249
2013-04-03T16:28:57.165+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	996	1352	1249
2013-04-03T16:29:47.864+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	996	1352	1249
2013-04-03T16:29:57.773+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	996	1352	1249
2013-04-03T16:42:52.935+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	996	1352	1249
2013-04-03T16:42:53.793+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	996	1352	1249
2013-04-03T16:44:56.292+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	996	1352	1249
2013-04-03T16:44:59.799+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	952	1352	1249
2013-04-03T16:45:02.295+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	952	1352	1249
2013-04-03T16:45:50.313+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	952	1352	1249
2013-04-03T16:45:57.909+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	952	1352	1249
2013-04-03T16:46:33.236+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	952	1352	1249
2013-04-03T16:46:38.621+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	952	1352	1249
2013-04-03T16:46:48.221+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	952	1352	1249
2013-04-03T16:46:48.256+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	952	1352	1249
2013-04-03T16:48:34.813+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	952	1352	1249
2013-04-03T16:48:39.535+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	700	1352	1249
2013-04-03T16:48:45.838+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	692	1352	1249
2013-04-03T16:48:48.887+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	688	1352	1249
2013-04-03T16:48:49.478+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	688	1352	1249
2013-04-03T17:14:47.890+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	688	1352	1249
2013-04-03T17:14:50.791+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	660	1352	1249
2013-04-03T17:14:57.438+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	656	1352	1249
2013-04-03T17:14:59.646+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	660	1352	1249
2013-04-03T17:15:19.845+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	660	1352	1249
2013-04-03T17:17:06.506+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	868	1352	1249
2013-04-03T17:17:09.578+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	868	1352	1249
2013-04-03T17:17:12.508+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	832	1352	1249
2013-04-03T17:17:13.609+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	832	1352	1249
2013-04-03T17:17:13.694+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	832	1352	1249
2013-04-03T17:17:19.055+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	420	1352	1249
2013-04-03T17:17:40.408+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	420	1352	1249
2013-04-03T17:22:06.691+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	420	1352	1249
2013-04-03T17:22:12.079+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	420	1352	1249
2013-04-03T17:22:14.520+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	420	1352	1249
2013-04-03T17:22:18.847+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	420	1352	1249
2013-04-03T17:22:22.953+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	884	1352	1249
2013-04-03T17:22:23.894+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	884	1352	1249
2013-04-03T17:22:27.087+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	884	1352	1249
2013-04-03T17:23:11.496+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-03T17:26:41.176+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-03T17:26:41.191+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:29:22.657+02:00	READY	http://trac.seqan.de/	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:29:27.024+02:00	READY	http://trac.seqan.de/search	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:29:30.548+02:00	READY	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:29:32.966+02:00	READY	http://trac.seqan.de/report/1	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:29:40.183+02:00	SCROLL	http://trac.seqan.de/report/1	160.45.112.60	-	0	4	1352	1249
2013-04-03T18:29:51.342+02:00	SCROLL	http://trac.seqan.de/report/1	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:29:54.106+02:00	READY	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:29:59.711+02:00	READY	http://trac.seqan.de/report/4	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:07.084+02:00	READY	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:11.439+02:00	READY	http://trac.seqan.de/report/10	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:30:18.295+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:25.125+02:00	TYPING-field-summary-	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:25.213+02:00	TYPING-field-summary-a	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:25.340+02:00	TYPING-field-summary-at	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:25.492+02:00	TYPING-field-summary-at	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:25.772+02:00	TYPING-field-summary-atE	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:25.868+02:00	TYPING-field-summary-atEn	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:26.012+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:29.981+02:00	TYPING-field-summary-atEnd 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:31.004+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:34.636+02:00	TYPING-field-summary-atEnd 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:35.980+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.230+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.263+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.297+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.330+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.364+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.398+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.431+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.466+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.499+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.716+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.772+02:00	TYPING-field-summary-atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:36.940+02:00	TYPING-field-summary-"atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:37.116+02:00	TYPING-field-summary-"atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:37.268+02:00	TYPING-field-summary-"atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:37.420+02:00	TYPING-field-summary-"atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:37.588+02:00	TYPING-field-summary-"atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:37.740+02:00	TYPING-field-summary-"atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:38.340+02:00	TYPING-field-summary-"atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:38.660+02:00	TYPING-field-summary-"atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:38.724+02:00	TYPING-field-summary-"atEnd(	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:39.180+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:39.540+02:00	TYPING-field-summary-"atEnd()"	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:40.524+02:00	TYPING-field-summary-"atEnd()" 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:40.756+02:00	TYPING-field-summary-"atEnd()"	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:41.212+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:41.463+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:41.496+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:41.530+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:41.563+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:41.597+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:41.630+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:41.664+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:41.697+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:42.052+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:42.484+02:00	TYPING-field-summary-"atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:42.908+02:00	TYPING-field-summary-atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:43.159+02:00	TYPING-field-summary-atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:43.192+02:00	TYPING-field-summary-atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:43.225+02:00	TYPING-field-summary-atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:43.259+02:00	TYPING-field-summary-atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:43.293+02:00	TYPING-field-summary-atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:43.326+02:00	TYPING-field-summary-atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:43.360+02:00	TYPING-field-summary-atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:43.394+02:00	TYPING-field-summary-atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:43.732+02:00	TYPING-field-summary-atEnd()	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:46.436+02:00	TYPING-field-summary-atEnd() 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:46.564+02:00	TYPING-field-summary-atEnd() b	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:46.660+02:00	TYPING-field-summary-atEnd() be	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:46.836+02:00	TYPING-field-summary-atEnd() beh	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:47.596+02:00	TYPING-field-summary-atEnd() beha	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:47.636+02:00	TYPING-field-summary-atEnd() behav	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:47.860+02:00	TYPING-field-summary-atEnd() behave	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:47.972+02:00	TYPING-field-summary-atEnd() behaves	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:49.356+02:00	TYPING-field-summary-atEnd() behaves 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:49.516+02:00	TYPING-field-summary-atEnd() behaves n	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:49.620+02:00	TYPING-field-summary-atEnd() behaves no	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:49.932+02:00	TYPING-field-summary-atEnd() behaves non	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:50.844+02:00	TYPING-field-summary-atEnd() behaves non-	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:50.924+02:00	TYPING-field-summary-atEnd() behaves non-i	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:51.244+02:00	TYPING-field-summary-atEnd() behaves non-in	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:51.444+02:00	TYPING-field-summary-atEnd() behaves non-int	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:51.532+02:00	TYPING-field-summary-atEnd() behaves non-intu	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:53.372+02:00	TYPING-field-summary-atEnd() behaves non-intui	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:53.644+02:00	TYPING-field-summary-atEnd() behaves non-intuit	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:53.988+02:00	TYPING-field-summary-atEnd() behaves non-intuiti	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:54.628+02:00	TYPING-field-summary-atEnd() behaves non-intuitib	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:54.764+02:00	TYPING-field-summary-atEnd() behaves non-intuiti	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:55.204+02:00	TYPING-field-summary-atEnd() behaves non-intuitiv	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:55.260+02:00	TYPING-field-summary-atEnd() behaves non-intuitive	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:55.540+02:00	TYPING-field-summary-atEnd() behaves non-intuitiveö	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:55.772+02:00	TYPING-field-summary-atEnd() behaves non-intuitiveöy	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:55.932+02:00	TYPING-field-summary-atEnd() behaves non-intuitiveö	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:56.156+02:00	TYPING-field-summary-atEnd() behaves non-intuitive	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:56.260+02:00	TYPING-field-summary-atEnd() behaves non-intuitiveö	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:56.708+02:00	TYPING-field-summary-atEnd() behaves non-intuitiveöy	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:56.876+02:00	TYPING-field-summary-atEnd() behaves non-intuitiveö	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:57.084+02:00	TYPING-field-summary-atEnd() behaves non-intuitive	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:57.220+02:00	TYPING-field-summary-atEnd() behaves non-intuitivel	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:57.564+02:00	TYPING-field-summary-atEnd() behaves non-intuitively	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:58.428+02:00	TYPING-field-summary-atEnd() behaves non-intuitively 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:58.580+02:00	TYPING-field-summary-atEnd() behaves non-intuitively w	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:58.844+02:00	TYPING-field-summary-atEnd() behaves non-intuitively wh	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:59.236+02:00	TYPING-field-summary-atEnd() behaves non-intuitively whn	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:59.404+02:00	TYPING-field-summary-atEnd() behaves non-intuitively wh	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:30:59.540+02:00	TYPING-field-summary-atEnd() behaves non-intuitively w	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:00.716+02:00	TYPING-field-summary-atEnd() behaves non-intuitively 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:00.772+02:00	TYPING-field-summary-atEnd() behaves non-intuitively i	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:01.020+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:01.980+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:02.077+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:02.500+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:02.996+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:03.348+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a S	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:04.028+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Se	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:04.404+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Seg	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:04.548+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segm	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:04.684+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segme	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:04.732+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segmen	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:04.884+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:05.300+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:05.484+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment i	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:05.708+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment it	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:05.772+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment ite	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:06.028+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment iter	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:07.476+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment itera	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:07.557+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment iterat	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:08.108+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment iterati	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:08.380+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment iterat	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:08.716+02:00	TYPING-field-summary-atEnd() behaves non-intuitively in a Segment iterato	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:47.428+02:00	TYPING-field-keywords-	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:47.605+02:00	TYPING-field-keywords-i	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:47.772+02:00	TYPING-field-keywords-it	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:47.836+02:00	TYPING-field-keywords-ite	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:48.052+02:00	TYPING-field-keywords-iter	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:48.268+02:00	TYPING-field-keywords-itera	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:48.380+02:00	TYPING-field-keywords-iterat	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:48.540+02:00	TYPING-field-keywords-iterato	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:48.740+02:00	TYPING-field-keywords-iterator	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:48.932+02:00	TYPING-field-keywords-iterator,	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:49.060+02:00	TYPING-field-keywords-iterator, 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:49.252+02:00	TYPING-field-keywords-iterator, a	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:49.484+02:00	TYPING-field-keywords-iterator, at	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:49.604+02:00	TYPING-field-keywords-iterator, at	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:49.812+02:00	TYPING-field-keywords-iterator, atE	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:49.924+02:00	TYPING-field-keywords-iterator, atEn	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:50.068+02:00	TYPING-field-keywords-iterator, atEnd	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:51.580+02:00	TYPING-field-keywords-iterator, atEnd,	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:51.748+02:00	TYPING-field-keywords-iterator, atEnd, 	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:52.012+02:00	TYPING-field-keywords-iterator, atEnd, s	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:52.196+02:00	TYPING-field-keywords-iterator, atEnd, se	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:52.396+02:00	TYPING-field-keywords-iterator, atEnd, seg	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:52.508+02:00	TYPING-field-keywords-iterator, atEnd, segm	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:52.668+02:00	TYPING-field-keywords-iterator, atEnd, segma	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:52.998+02:00	TYPING-field-keywords-iterator, atEnd, segman	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:53.156+02:00	TYPING-field-keywords-iterator, atEnd, segma	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:55.436+02:00	TYPING-field-keywords-iterator, atEnd, segm	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:55.572+02:00	TYPING-field-keywords-iterator, atEnd, segme	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:31:55.628+02:00	TYPING-field-keywords-iterator, atEnd, segmen	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:32:04.795+02:00	READY	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:32:08.571+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:32:17.685+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:32:19.236+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:32:20.398+02:00	LINK-http://trac.seqan.de/wiki/WikiFormatting	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:32:21.038+02:00	READY	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:32:27.318+02:00	LINK-http://trac.seqan.de/report	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:32:27.653+02:00	READY	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:32:28.479+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:32:28.485+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:32:28.483+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:32:29.080+02:00	BLUR	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:32:29.089+02:00	FOCUS	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:32:29.086+02:00	FOCUS	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:32:31.939+02:00	READY	http://trac.seqan.de/report/1	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:32:53.750+02:00	SCROLL	http://trac.seqan.de/report/1	160.45.112.60	-	0	8	1352	1249
2013-04-03T18:33:05.793+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:33:05.785+02:00	BLUR	http://trac.seqan.de/report/1	160.45.112.60	-	0	8	1352	1249
2013-04-03T18:33:08.021+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:08.015+02:00	BLUR	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:33:10.007+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:10.011+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:33:11.472+02:00	BLUR	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:33:11.477+02:00	FOCUS	http://trac.seqan.de/report/1	160.45.112.60	-	0	8	1352	1249
2013-04-03T18:33:20.028+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:33:20.023+02:00	BLUR	http://trac.seqan.de/report/1	160.45.112.60	-	0	8	1352	1249
2013-04-03T18:33:21.194+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:21.191+02:00	BLUR	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:33:22.552+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:27.531+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:29.084+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:33:29.077+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:37.519+02:00	SCROLL	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1136	1352	1249
2013-04-03T18:33:41.951+02:00	SCROLL	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1156	1352	1249
2013-04-03T18:33:50.728+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:50.719+02:00	BLUR	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1224	1352	1249
2013-04-03T18:33:51.462+02:00	SCROLL	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1224	1352	1249
2013-04-03T18:33:53.260+02:00	TYPING-field-description-	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:53.692+02:00	TYPING-field-description-	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:53.828+02:00	TYPING-field-description-{	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:53.996+02:00	TYPING-field-description-{{	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:54.732+02:00	TYPING-field-description-{{{	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:55.420+02:00	TYPING-field-description-{{{\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:55.604+02:00	TYPING-field-description-{{{\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:55.988+02:00	TYPING-field-description-{{{\n/ ==========================================================================\n// Author: Sascha Meiers<meiers@inf.fu-berlin.de>\n// ==========================================================================\n\n\n//#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:56.556+02:00	TYPING-field-description-{{{\n/ ==========================================================================\n// Author: Sascha Meiers<meiers@inf.fu-berlin.de>\n// ==========================================================================\n\n\n//#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:57.764+02:00	TYPING-field-description-{{{\n/ ==========================================================================\n// Author: Sascha Meiers<meiers@inf.fu-berlin.de>\n// ==========================================================================\n\n\n//#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:57.916+02:00	TYPING-field-description-{{{\n/ ==========================================================================\n// Author: Sascha Meiers<meiers@inf.fu-berlin.de>\n// ==========================================================================\n\n\n//#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:33:58.084+02:00	TYPING-field-description-{{{\n/ ==========================================================================\n// Author: Sascha Meiers<meiers@inf.fu-berlin.de>\n// ==========================================================================\n\n\n//#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:34:01.871+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:34:06.326+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:34:13.735+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	36	1352	1249
2013-04-03T18:34:19.045+02:00	TYPING-field-description-{{{\n/ ==========================================================================\n// Author: Sascha Meiers<meiers@inf.fu-berlin.de>\n// ==========================================================================\n\n\n//#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	36	1352	1249
2013-04-03T18:34:19.612+02:00	TYPING-field-description-{{{\n\n\n\n//#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	36	1352	1249
2013-04-03T18:34:20.060+02:00	TYPING-field-description-{{{\n\n\n//#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	36	1352	1249
2013-04-03T18:34:20.372+02:00	TYPING-field-description-{{{\n\n//#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	36	1352	1249
2013-04-03T18:34:20.700+02:00	TYPING-field-description-{{{\n//#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	36	1352	1249
2013-04-03T18:34:21.012+02:00	TYPING-field-description-{{{\n/#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	36	1352	1249
2013-04-03T18:34:29.703+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	251	1352	1249
2013-04-03T18:34:38.439+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:34:54.685+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	148	1352	1249
2013-04-03T18:34:55.102+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	148	1352	1249
2013-04-03T18:34:56.481+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	148	1352	1249
2013-04-03T18:35:01.327+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	76	1352	1249
2013-04-03T18:35:02.271+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	76	1352	1249
2013-04-03T18:35:02.279+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1224	1352	1249
2013-04-03T18:35:03.120+02:00	BLUR	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1224	1352	1249
2013-04-03T18:35:03.132+02:00	FOCUS	http://trac.seqan.de/report/1	160.45.112.60	-	0	8	1352	1249
2013-04-03T18:35:07.044+02:00	READY	http://trac.seqan.de/ticket/1001	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:35:22.503+02:00	SCROLL	http://trac.seqan.de/ticket/1001	160.45.112.60	-	0	4	1352	1249
2013-04-03T18:35:25.918+02:00	SCROLL	http://trac.seqan.de/ticket/1001	160.45.112.60	-	0	26	1352	1249
2013-04-03T18:35:27.463+02:00	LINK-http://trac.seqan.de/ticket/1001#propertyform	http://trac.seqan.de/ticket/1001	160.45.112.60	-	0	26	1352	1249
2013-04-03T18:35:29.505+02:00	SCROLL	http://trac.seqan.de/ticket/1001#propertyform	160.45.112.60	-	0	109	1352	1249
2013-04-03T18:35:38.839+02:00	SCROLL	http://trac.seqan.de/ticket/1001#propertyform	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:35:41.353+02:00	SCROLL	http://trac.seqan.de/ticket/1001	160.45.112.60	-	0	26	1352	1249
2013-04-03T18:35:42.858+02:00	READY	http://trac.seqan.de/report/1	160.45.112.60	-	0	8	1352	1249
2013-04-03T18:35:45.553+02:00	SCROLL	http://trac.seqan.de/report/1	160.45.112.60	-	0	316	1352	1249
2013-04-03T18:35:46.707+02:00	READY	http://trac.seqan.de/ticket/910	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:35:51.730+02:00	READY	http://trac.seqan.de/report/1	160.45.112.60	-	0	352	1352	1249
2013-04-03T18:35:54.276+02:00	READY	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:35:59.015+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	4	1352	1249
2013-04-03T18:36:13.566+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	304	1352	1249
2013-04-03T18:36:18.311+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	368	1352	1249
2013-04-03T18:36:22.512+02:00	READY	http://trac.seqan.de/report/1	160.45.112.60	-	0	480	1352	1249
2013-04-03T18:36:25.146+02:00	SCROLL	http://trac.seqan.de/report/1	160.45.112.60	-	0	1008	1352	1249
2013-04-03T18:36:31.366+02:00	READY	http://trac.seqan.de/ticket/95	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:36:45.603+02:00	READY	http://trac.seqan.de/report/1	160.45.112.60	-	0	1008	1352	1249
2013-04-03T18:36:49.404+02:00	READY	http://trac.seqan.de/ticket/95	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:36:56.086+02:00	SCROLL	http://trac.seqan.de/ticket/95	160.45.112.60	-	0	200	1352	1249
2013-04-03T18:37:01.542+02:00	SCROLL	http://trac.seqan.de/ticket/95	160.45.112.60	-	0	28	1352	1249
2013-04-03T18:37:04.919+02:00	SCROLL	http://trac.seqan.de/ticket/95	160.45.112.60	-	0	212	1352	1249
2013-04-03T18:37:09.855+02:00	SCROLL	http://trac.seqan.de/ticket/95	160.45.112.60	-	0	476	1352	1249
2013-04-03T18:37:25.559+02:00	SCROLL	http://trac.seqan.de/ticket/95	160.45.112.60	-	0	548	1352	1249
2013-04-03T18:37:35.605+02:00	READY	http://trac.seqan.de/report/1	160.45.112.60	-	0	1008	1352	1249
2013-04-03T18:37:43.672+02:00	READY	http://trac.seqan.de/ticket/370	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:37:51.885+02:00	READY	http://trac.seqan.de/report/1	160.45.112.60	-	0	1008	1352	1249
2013-04-03T18:37:54.183+02:00	BLUR	http://trac.seqan.de/report/1	160.45.112.60	-	0	876	1352	1249
2013-04-03T18:37:54.190+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1224	1352	1249
2013-04-03T18:37:54.790+02:00	SCROLL	http://trac.seqan.de/report/1	160.45.112.60	-	0	876	1352	1249
2013-04-03T18:38:02.703+02:00	SCROLL	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	884	1352	1249
2013-04-03T18:38:10.078+02:00	SCROLL	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	920	1352	1249
2013-04-03T18:38:15.094+02:00	SCROLL	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1036	1352	1249
2013-04-03T18:38:23.455+02:00	BLUR	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1508	1352	1249
2013-04-03T18:38:23.461+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	76	1352	1249
2013-04-03T18:38:23.846+02:00	SCROLL	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1508	1352	1249
2013-04-03T18:38:26.767+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	56	1352	1249
2013-04-03T18:38:28.084+02:00	TYPING-field-description-{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	56	1352	1249
2013-04-03T18:38:28.228+02:00	TYPING-field-description-{{{#\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	56	1352	1249
2013-04-03T18:38:28.460+02:00	TYPING-field-description-{{{#\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	56	1352	1249
2013-04-03T18:38:29.100+02:00	TYPING-field-description-{{{#!\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	56	1352	1249
2013-04-03T18:38:29.292+02:00	TYPING-field-description-{{{#!c\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	56	1352	1249
2013-04-03T18:38:29.430+02:00	TYPING-field-description-{{{#!c+\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	56	1352	1249
2013-04-03T18:38:33.476+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:38:37.687+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	4	1352	1249
2013-04-03T18:38:49.073+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	4	1352	1249
2013-04-03T18:39:09.121+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	4	1352	1249
2013-04-03T18:39:11.463+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	176	1352	1249
2013-04-03T18:39:14.636+02:00	TYPING-field-description-{{{#!c++\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	176	1352	1249
2013-04-03T18:39:16.045+02:00	TYPING-field-description-{{{#!c++\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananamama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n    \n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	176	1352	1249
2013-04-03T18:39:17.332+02:00	TYPING-field-description-{{{#!c++\n\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	176	1352	1249
2013-04-03T18:39:17.548+02:00	TYPING-field-description-{{{#!c++\n\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	176	1352	1249
2013-04-03T18:39:20.532+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:27.951+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:31.948+02:00	TYPING-field-description-{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:32.084+02:00	TYPING-field-description-{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:32.228+02:00	TYPING-field-description-W{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:32.404+02:00	TYPING-field-description-Wh{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:32.468+02:00	TYPING-field-description-Whe{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:32.644+02:00	TYPING-field-description-When{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:32.932+02:00	TYPING-field-description-When {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:33.308+02:00	TYPING-field-description-When i{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:33.500+02:00	TYPING-field-description-When it{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:33.540+02:00	TYPING-field-description-When ite{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:33.780+02:00	TYPING-field-description-When iter{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:34.052+02:00	TYPING-field-description-When itera{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:34.252+02:00	TYPING-field-description-When iterat{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:34.566+02:00	TYPING-field-description-When iterati{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:34.636+02:00	TYPING-field-description-When iteratin{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:34.876+02:00	TYPING-field-description-When iterating{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:38.460+02:00	TYPING-field-description-When iterating {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:38.588+02:00	TYPING-field-description-When iterating o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:38.756+02:00	TYPING-field-description-When iterating ov{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:38.820+02:00	TYPING-field-description-When iterating ove{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:38.892+02:00	TYPING-field-description-When iterating over{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:40.724+02:00	TYPING-field-description-When iterating over {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:40.796+02:00	TYPING-field-description-When iterating over a{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:41.028+02:00	TYPING-field-description-When iterating over a {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:41.668+02:00	TYPING-field-description-When iterating over a s{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:41.916+02:00	TYPING-field-description-When iterating over a se{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:42.068+02:00	TYPING-field-description-When iterating over a seg{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:42.260+02:00	TYPING-field-description-When iterating over a segm{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:42.404+02:00	TYPING-field-description-When iterating over a segme{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:42.492+02:00	TYPING-field-description-When iterating over a segmen{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:42.612+02:00	TYPING-field-description-When iterating over a segment{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:42.820+02:00	TYPING-field-description-When iterating over a segment {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:42.908+02:00	TYPING-field-description-When iterating over a segment {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:43.404+02:00	TYPING-field-description-When iterating over a segment ({{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:43.516+02:00	TYPING-field-description-When iterating over a segment (h{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:43.604+02:00	TYPING-field-description-When iterating over a segment (he{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:43.748+02:00	TYPING-field-description-When iterating over a segment (her{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:44.004+02:00	TYPING-field-description-When iterating over a segment (here{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:44.053+02:00	TYPING-field-description-When iterating over a segment (here{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:44.260+02:00	TYPING-field-description-When iterating over a segment (here:{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:44.428+02:00	TYPING-field-description-When iterating over a segment (here: {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:44.540+02:00	TYPING-field-description-When iterating over a segment (here: i{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:44.612+02:00	TYPING-field-description-When iterating over a segment (here: in{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:44.788+02:00	TYPING-field-description-When iterating over a segment (here: inf{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:44.956+02:00	TYPING-field-description-When iterating over a segment (here: infi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:45.164+02:00	TYPING-field-description-When iterating over a segment (here: infix{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:45.308+02:00	TYPING-field-description-When iterating over a segment (here: infix{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:45.828+02:00	TYPING-field-description-When iterating over a segment (here: infix){{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:47.460+02:00	TYPING-field-description-When iterating over a segment (here: infix) {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:47.772+02:00	TYPING-field-description-When iterating over a segment (here: infix){{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:48.252+02:00	TYPING-field-description-When iterating over a segment (here: infix),{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:51.340+02:00	TYPING-field-description-When iterating over a segment (here: infix), {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:51.508+02:00	TYPING-field-description-When iterating over a segment (here: infix), t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:51.564+02:00	TYPING-field-description-When iterating over a segment (here: infix), th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:51.708+02:00	TYPING-field-description-When iterating over a segment (here: infix), the{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:52.132+02:00	TYPING-field-description-When iterating over a segment (here: infix), the {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:52.324+02:00	TYPING-field-description-When iterating over a segment (here: infix), the f{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:52.420+02:00	TYPING-field-description-When iterating over a segment (here: infix), the fu{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:52.564+02:00	TYPING-field-description-When iterating over a segment (here: infix), the fun{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:52.940+02:00	TYPING-field-description-When iterating over a segment (here: infix), the func{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:53.020+02:00	TYPING-field-description-When iterating over a segment (here: infix), the funct{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:53.100+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:53.372+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functio{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:53.452+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:53.548+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:54.236+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:54.444+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions a{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:54.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions at{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:54.860+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions at{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:55.084+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atE{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:55.100+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEn{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:56.012+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:56.236+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:56.292+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd({{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:39:56.492+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd(){{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:00.972+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:01.050+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() r{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:01.236+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() re{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:01.356+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() ret{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:01.524+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() retu{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:01.676+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() retur{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:01.804+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() return{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:01.884+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:05.900+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:06.004+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:06.068+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:06.140+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:07.524+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:07.676+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the e{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:07.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the en{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:07.836+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:08.412+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:08.628+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end p{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:08.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end po{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:08.908+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end pos{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:09.076+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end posi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:09.228+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end posit{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:09.292+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end positi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:09.548+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end positio{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:09.644+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:09.844+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:09.988+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:10.076+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:10.260+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:10.332+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:10.412+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:10.452+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:12.444+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:12.500+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the w{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:12.676+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the wh{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:12.884+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the who{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:13.012+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whol{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:13.116+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:13.468+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:13.620+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:13.716+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole C{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:13.908+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Co{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:14.124+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Con{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:14.332+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Cont{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:14.364+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Conta{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:14.444+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Contai{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:14.612+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Contain{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:14.668+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Containe{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:15.108+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Container{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:15.252+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Container,{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:15.604+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Container, {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:15.973+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Container, n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:16.226+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Container, {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:16.256+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Container,{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:16.290+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Container{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:16.325+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Containe{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:16.358+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Contain{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:16.391+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Contai{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:16.425+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Conta{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:16.459+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Cont{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:16.660+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Con{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:16.844+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole Co{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:17.012+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole C{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:17.156+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:17.724+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole v{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:17.900+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:18.100+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole c{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:18.316+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole co{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:18.516+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole con{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:18.700+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole cont{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:18.740+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole conta{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:18.820+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole contai{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:18.956+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole contain{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:19.044+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole containe{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:19.156+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:19.300+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container,{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:19.492+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:19.732+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:19.804+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, no{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:19.956+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:20.884+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:20.988+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:21.036+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:21.340+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:21.436+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:21.524+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:21.580+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:21.924+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:22.140+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the s{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:22.236+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the se{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:22.468+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the seg{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:22.556+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segm{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:22.644+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segme{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:22.780+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segmen{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:23.092+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:25.732+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment.{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:26.068+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:26.196+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:26.388+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:26.492+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. thi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:26.820+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. this{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:27.116+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. thi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:27.300+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:27.604+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:28.124+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:28.284+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:28.404+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. T{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:28.596+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. Th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:28.692+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. Thi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:28.820+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:29.020+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:29.204+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This c{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:29.236+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This ca{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:29.340+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:29.700+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:29.876+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can l{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:30.116+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can le{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:30.156+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can lea{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:30.524+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can lead{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:30.774+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can lea{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:30.808+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can le{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:30.841+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can l{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:30.874+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:30.908+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This can{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:30.942+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This ca{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:30.975+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This c{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:31.009+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:31.804+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:32.268+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:32.404+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This l{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:32.652+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This le{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:32.692+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This lea{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:32.820+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This lead{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:33.308+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This lead {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:33.396+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This lead{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:33.404+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:34.364+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:34.468+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:34.564+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:34.900+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:35.156+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to u{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:35.484+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to un{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:35.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to une{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:36.236+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unex{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:36.420+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexp{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:36.636+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpe{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:36.876+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpec{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:36.996+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpect{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:37.236+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpecte{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:37.348+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:37.612+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:37.660+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected b{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:37.988+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected be{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:38.148+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected beh{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:38.493+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected beha{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:38.908+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behav{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:39.076+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behavi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:39.252+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behavio{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:39.484+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviou{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:41.398+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:41.484+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour,{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:42.868+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:42.981+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, i{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:42.997+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:43.188+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:43.436+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:43.516+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if on{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:43.588+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:43.756+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:43.868+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one i{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:44.020+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:44.268+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:44.460+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:44.596+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is no{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:44.684+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:45.116+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:45.900+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not a{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:46.108+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aw{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:46.204+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not awa{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:46.292+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not awar{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:46.860+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:47.140+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:47.236+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:47.348+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:48.796+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:48.868+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of i{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:49.044+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:50.188+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:50.372+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:50.500+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of i{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:51.396+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:51.532+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:51.588+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:51.612+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of tha{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:54.076+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:57.860+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:58.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:59.156+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:59.308+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:59.604+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nS{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:59.732+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSe{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:40:59.828+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:00.140+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:00.244+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:01.324+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:01.420+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a s{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:01.588+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a sh{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:01.772+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a sho{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:01.820+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a shor{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:02.188+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a short{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:02.372+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a shor{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:02.532+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a sho{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:02.684+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a sh{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:02.844+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a s{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:02.940+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:03.124+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee a{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:03.804+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:03.948+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:04.012+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:04.116+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:04.340+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:04.612+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the s{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:04.908+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the sh{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:05.092+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the sho{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:05.164+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the shor{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:05.260+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:05.836+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:06.188+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short e{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:06.476+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short ex{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:06.628+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short exa{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:07.228+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short exam{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:07.340+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short examl{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:07.604+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short examle{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:07.748+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short examle{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:08.596+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example:{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:09.164+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:09.340+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:09.508+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: T{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:09.596+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: Th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:09.732+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:10.148+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:10.292+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The f{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:10.388+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The fi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:10.937+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The fis{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:12.437+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The fisr{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:12.612+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The fis{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:12.852+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The fi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:13.188+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The fir{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:13.252+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The firs{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:13.508+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:14.076+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:14.500+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first i{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:14.668+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first it{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:14.748+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first ite{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:14.948+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iter{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:15.180+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first itera{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:15.300+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iterat{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:15.396+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iterati{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:15.652+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteratio{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:15.804+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:16.812+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:16.860+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration r{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:17.108+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration re{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:17.580+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration ret{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:17.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration re{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:17.924+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration r{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:18.716+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:18.948+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:19.260+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration ou{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:19.388+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration out{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:19.652+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration outp{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:19.860+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration outpu{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:20.180+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration output{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:20.628+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration output {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:20.796+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration output{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:20.956+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration outpu{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:21.108+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration outp{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:21.244+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration out{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:21.396+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration ou{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:21.548+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:22.500+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:22.924+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration p{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:23.044+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration pr{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:23.124+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration pri{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:23.244+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prin{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:23.444+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration print{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:23.596+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:23.876+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:24.828+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:24.924+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:25.028+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:25.124+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:25.412+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:25.556+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the c{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:25.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the co{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:25.916+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the cor{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:25.932+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the corr{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:26.156+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the corre{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:26.436+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correc{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:26.524+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:28.300+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:28.372+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct i{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:28.444+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct in{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:28.572+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct inf{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:28.900+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infi{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:29.020+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:29.180+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:29.340+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:30.804+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:30.876+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:31.004+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "na{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:31.092+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nan{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:31.292+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:31.436+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:32.204+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:32.284+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana",{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:32.860+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:32.980+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:33.068+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:33.156+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:33.500+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:33.684+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the s{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:33.892+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the se{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:34.060+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the sec{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:34.252+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the seco{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:34.836+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the secon{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:34.892+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the seco{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:35.052+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the secod{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:35.508+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the secod {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:35.692+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the secod o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:35.972+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the secod on{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:36.132+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the secod o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:36.292+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the secod {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:36.444+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the secod{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:36.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the seco{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:37.004+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the secon{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:37.132+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:37.380+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:37.516+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:37.636+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second on{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:37.692+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:38.364+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:38.724+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one p{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:38.876+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one pr{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:38.988+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one pri{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:39.076+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prin{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:39.164+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one print{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:39.620+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one print {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:39.828+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one print{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:39.908+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:40.468+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:40.636+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:41.436+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one print{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:41.444+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:43.268+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:44.124+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:44.724+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:45.366+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints \n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:47.484+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:41:48.588+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:00.916+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:01.540+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints i{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:01.700+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:01.780+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:02.036+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints ti{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:02.244+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:02.780+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:02.916+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:03.004+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:03.124+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:03.420+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:03.540+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the e{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:03.684+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the en{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:03.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:04.108+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:04.356+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end o{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:04.468+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:04.708+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:04.804+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:04.900+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of th{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:05.028+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:05.452+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:05.572+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the t{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:06.116+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the te{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:06.268+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the tet{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:06.484+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the tet {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:07.012+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the tet {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:07.484+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the tet {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:07.660+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the tet{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:08.284+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the te{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:09.188+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the tex{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:09.300+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:09.516+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:09.644+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text {{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:10.044+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ({{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:11.412+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:11.484+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:11.628+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("na{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:11.700+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nan{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:12.005+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nana{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:13.988+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanam{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:14.188+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nana{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:14.276+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nana{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:14.540+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaM{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:14.652+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMa{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:14.756+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMam{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:15.052+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:15.212+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:16.996+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:17.247+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:17.280+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:17.314+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:17.347+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:17.381+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:17.414+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:17.448+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:17.482+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:17.515+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:18.236+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text ("nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:18.508+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:18.668+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.228+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text :"nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.412+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.663+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.696+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.730+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.763+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.797+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.830+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.864+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.898+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:19.932+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:20.588+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:25.815+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:41.094+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:41.940+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of that.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:41.980+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of i.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:42.796+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:42.972+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:43.354+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:42:45.070+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:43:03.983+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	64	1352	1249
2013-04-03T18:43:34.999+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	116	1352	1249
2013-04-03T18:43:40.806+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	188	1352	1249
2013-04-03T18:43:41.788+02:00	TYPING-author-anonymous	http://trac.seqan.de/newticket	160.45.112.60	-	0	188	1352	1249
2013-04-03T18:43:41.988+02:00	TYPING-author-m	http://trac.seqan.de/newticket	160.45.112.60	-	0	188	1352	1249
2013-04-03T18:43:42.140+02:00	TYPING-author-me	http://trac.seqan.de/newticket	160.45.112.60	-	0	188	1352	1249
2013-04-03T18:43:42.204+02:00	TYPING-author-mei	http://trac.seqan.de/newticket	160.45.112.60	-	0	188	1352	1249
2013-04-03T18:43:42.276+02:00	TYPING-author-meie	http://trac.seqan.de/newticket	160.45.112.60	-	0	188	1352	1249
2013-04-03T18:43:42.508+02:00	TYPING-author-meier	http://trac.seqan.de/newticket	160.45.112.60	-	0	188	1352	1249
2013-04-03T18:43:51.324+02:00	TYPING-author-meiers	http://trac.seqan.de/newticket	160.45.112.60	-	0	188	1352	1249
2013-04-03T18:43:51.580+02:00	TYPING-author-meiers 	http://trac.seqan.de/newticket	160.45.112.60	-	0	188	1352	1249
2013-04-03T18:43:55.438+02:00	TYPING-author-meiers <	http://trac.seqan.de/newticket	160.45.112.60	-	0	188	1352	1249
2013-04-03T18:43:57.318+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:43:57.326+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	1508	1352	1249
2013-04-03T18:43:58.422+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:44:00.798+02:00	SCROLL	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:44:31.336+02:00	READY	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:44:32.692+02:00	READY	http://trac.seqan.de/prefs	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:44:46.631+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:44:46.623+02:00	BLUR	http://trac.seqan.de/prefs	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:44:50.564+02:00	TYPING-author-meiers 	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:50.943+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:52.756+02:00	TYPING-author-meiers	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:53.060+02:00	TYPING-author-meiers	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:54.444+02:00	TYPING-author-meiers@	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:54.532+02:00	TYPING-author-meiers@i	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:54.652+02:00	TYPING-author-meiers@in	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:54.990+02:00	TYPING-author-meiers@inf	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:55.212+02:00	TYPING-author-meiers@inf.	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:55.300+02:00	TYPING-author-meiers@inf.f	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:55.700+02:00	TYPING-author-meiers@inf.fu	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:56.004+02:00	TYPING-author-meiers@inf.fu-	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:56.164+02:00	TYPING-author-meiers@inf.fu-b	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:56.212+02:00	TYPING-author-meiers@inf.fu-be	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:56.276+02:00	TYPING-author-meiers@inf.fu-ber	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:56.500+02:00	TYPING-author-meiers@inf.fu-berl	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:56.572+02:00	TYPING-author-meiers@inf.fu-berli	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:56.804+02:00	TYPING-author-meiers@inf.fu-berlin	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:56.956+02:00	TYPING-author-meiers@inf.fu-berlin.	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:44:56.980+02:00	TYPING-author-meiers@inf.fu-berlin.d	http://trac.seqan.de/newticket	160.45.112.60	-	0	108	1352	1249
2013-04-03T18:45:04.067+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:45:07.559+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	20	1352	1249
2013-04-03T18:45:25.403+02:00	FOCUS	http://trac.seqan.de/prefs	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:45:25.399+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	20	1352	1249
2013-04-03T18:45:28.551+02:00	BLUR	http://trac.seqan.de/prefs	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:45:28.597+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	20	1352	1249
2013-04-03T18:45:31.070+02:00	LINK-http://trac.seqan.de/wiki/WikiFormatting	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:31.710+02:00	READY	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:45:31.846+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:32.313+02:00	FOCUS	http://trac.seqan.de/report/1	160.45.112.60	-	0	876	1352	1249
2013-04-03T18:45:32.303+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:33.653+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:45:33.656+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:45:33.648+02:00	BLUR	http://trac.seqan.de/report/1	160.45.112.60	-	0	876	1352	1249
2013-04-03T18:45:33.665+02:00	UNLOAD	http://trac.seqan.de/report/1	160.45.112.60	-	0	876	1352	1249
2013-04-03T18:45:40.567+02:00	SCROLL	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	32	1352	1249
2013-04-03T18:45:45.107+02:00	FOCUS	http://trac.seqan.de/prefs	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:45:45.104+02:00	BLUR	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	32	1352	1249
2013-04-03T18:45:46.316+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:46.311+02:00	BLUR	http://trac.seqan.de/prefs	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:45:51.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:51.972+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:52.140+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions 'atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:52.300+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions ''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:53.228+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:53.478+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:53.512+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:53.545+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:53.579+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:53.612+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:53.646+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:53.679+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:53.713+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:53.996+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:54.172+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:54.764+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:55.012+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd() returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:55.164+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd()' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:45:55.324+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd()'' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	24	1352	1249
2013-04-03T18:46:00.546+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:46:08.845+02:00	TYPING-field-description-When iterating over a segment (here: infix), the functions '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:46:34.336+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	32	1352	1249
2013-04-03T18:46:34.430+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	32	1352	1249
2013-04-03T18:46:39.456+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	32	1352	1249
2013-04-03T18:46:42.116+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:42.294+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:44.245+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:44.548+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:44.708+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:44.868+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:45.404+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:45.580+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:45.788+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:46.116+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:47.460+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:48.916+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:50.196+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:50.436+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:50.588+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n}	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:50.740+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	213	1352	1249
2013-04-03T18:46:53.130+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:47:02.103+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	288	1352	1249
2013-04-03T18:47:06.878+02:00	SCROLL	http://trac.seqan.de/newticket	160.45.112.60	-	0	309	1352	1249
2013-04-03T18:47:08.805+02:00	TYPING-field-cc-	http://trac.seqan.de/newticket	160.45.112.60	-	0	309	1352	1249
2013-04-03T18:47:09.254+02:00	TYPING-field-cc-w	http://trac.seqan.de/newticket	160.45.112.60	-	0	309	1352	1249
2013-04-03T18:47:12.084+02:00	TYPING-field-cc-we	http://trac.seqan.de/newticket	160.45.112.60	-	0	309	1352	1249
2013-04-03T18:47:20.509+02:00	READY	http://trac.seqan.de/newticket	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:47:43.076+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	309	1352	1249
2013-04-03T18:47:43.404+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	309	1352	1249
2013-04-03T18:47:44.757+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	309	1352	1249
2013-04-03T18:47:45.164+02:00	TYPING-field-description-When iterating over a segment (here: infix), the function '''atEnd()''' returns the end position of the whole container, not of the segment. This leads to unexpected behaviour, if one is not aware of it.\n\nSee the short example: The first iteration prints the correct infix "nana", the second one prints til the end of the text : "nanaMama"\n{{{#!c++\n#include <seqan/sequence.h>\nusing namespace seqan;\n\nint main ()\n{\n    String<char>                                text = "bananaMama";\n    Infix<String<char> >::Type                  inf = infix(text, 2, 6); // nana\n    \n    Iterator<Infix<String<char> >::Type >::Type infixIterator;\n    Iterator<Infix<String<char> >::Type >::Type infixIteratorEnd = end(inf);\n    \n    \n    std::cout << "Iterating while 'infixIterator != infixIteratorEnd':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; infixIterator != infixIteratorEnd; ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl << std::endl;\n    \n    \n    std::cout << "Iterating while '!atEnd(infixIterator)':" << std::endl;\n    goBegin(infixIterator, inf);\n    \n    for(; !atEnd(infixIterator); ++infixIterator)\n        std::cout << *(infixIterator);\n    std::cout << std::endl;\n}\n}}}\n{{{\n\nIterating while 'infixIterator != infixIteratorEnd':\nnana\n\nIterating while '!atEnd(infixIterator)':\nnanaMama\n}}}	http://trac.seqan.de/newticket	160.45.112.60	-	0	309	1352	1249
2013-04-03T18:47:46.656+02:00	BLUR	http://trac.seqan.de/newticket	160.45.112.60	-	0	309	1352	1249
2013-04-03T18:48:51.995+02:00	FOCUS	http://trac.seqan.de/newticket	160.45.112.60	-	0	309	1352	1249
2013-04-03T18:48:56.393+02:00	READY	http://trac.seqan.de/captcha	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:48:59.877+02:00	TYPING-captcha_response-	http://trac.seqan.de/captcha	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:00.052+02:00	TYPING-captcha_response-f	http://trac.seqan.de/captcha	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:00.100+02:00	TYPING-captcha_response-fu	http://trac.seqan.de/captcha	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:01.244+02:00	TYPING-captcha_response-fuz	http://trac.seqan.de/captcha	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:01.749+02:00	TYPING-captcha_response-fuzd	http://trac.seqan.de/captcha	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:01.828+02:00	TYPING-captcha_response-fuzde	http://trac.seqan.de/captcha	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:05.657+02:00	READY	http://trac.seqan.de/ticket/1003	160.45.112.60	-	0	0	1352	1249
2013-04-03T18:49:17.642+02:00	READY	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:19.625+02:00	READY	http://trac.seqan.de/report/7	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:28.921+02:00	READY	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:31.964+02:00	READY	http://trac.seqan.de/report/4	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:36.026+02:00	READY	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:49:44.534+02:00	BLUR	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:50:46.839+02:00	FOCUS	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:50:51.265+02:00	BLUR	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:50:51.270+02:00	FOCUS	http://trac.seqan.de/prefs	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:50:51.309+02:00	UNLOAD	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:50:52.700+02:00	TYPING-name-	http://trac.seqan.de/prefs	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:50:52.852+02:00	TYPING-name-	http://trac.seqan.de/prefs	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:50:52.864+02:00	FOCUS	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	32	1352	1249
2013-04-03T18:50:52.857+02:00	BLUR	http://trac.seqan.de/prefs	160.45.112.60	-	0	0	1367	1249
2013-04-03T18:50:53.752+02:00	BLUR	http://trac.seqan.de/wiki/WikiFormatting	160.45.112.60	-	0	32	1352	1249
2013-04-04T11:07:52.856+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:08:05.068+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:11:45.630+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:11:45.639+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:18:28.433+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:18:31.839+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	332	1352	1249
2013-04-04T11:18:42.575+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	332	1352	1249
2013-04-04T11:19:05.676+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	332	1352	1249
2013-04-04T11:19:29.367+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	332	1352	1249
2013-04-04T11:20:04.423+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	336	1352	1249
2013-04-04T11:20:33.822+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	336	1352	1249
2013-04-04T11:20:36.399+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	656	1352	1249
2013-04-04T11:20:41.093+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	656	1352	1249
2013-04-04T11:23:51.734+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	656	1352	1249
2013-04-04T11:23:51.747+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	656	1352	1249
2013-04-04T11:33:43.132+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment6	160.45.112.60	-	0	656	1352	1249
2013-04-04T11:33:47.695+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-04T11:33:56.975+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-04T11:34:02.735+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-04T11:34:02.773+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-04T11:35:08.774+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-04T11:35:09.491+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-04T11:37:49.017+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.112.60	-	0	1017	1352	1249
2013-04-04T11:37:51.129+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.112.60	-	0	748	1352	1249
2013-04-04T11:37:55.448+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:38:00.311+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:40:31.416+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:42:35.395+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:42:39.128+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:42:44.982+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:42:48.463+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:42:51.477+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	0	1352	1249
2013-04-04T11:43:32.767+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	36	1352	1249
2013-04-04T11:43:35.254+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	40	1352	1249
2013-04-04T11:43:42.127+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	44	1352	1249
2013-04-04T11:43:57.935+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	128	1352	1249
2013-04-04T11:43:59.447+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	104	1352	1249
2013-04-04T11:44:00.338+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	104	1352	1249
2013-04-04T11:44:13.357+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	104	1352	1249
2013-04-04T11:44:18.503+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	220	1352	1249
2013-04-04T11:44:41.065+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	428	1352	1249
2013-04-04T11:44:55.872+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	532	1352	1249
2013-04-04T11:44:56.271+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	532	1352	1249
2013-04-04T11:45:28.347+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	532	1352	1249
2013-04-04T11:45:33.096+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	768	1352	1249
2013-04-04T11:45:36.191+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	776	1352	1249
2013-04-04T11:45:43.878+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	816	1352	1249
2013-04-04T11:45:48.398+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	816	1352	1249
2013-04-04T11:49:05.381+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	816	1352	1249
2013-04-04T11:49:07.931+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1112	1352	1249
2013-04-04T11:49:15.142+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1248	1352	1249
2013-04-04T11:49:59.813+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1248	1352	1249
2013-04-04T11:50:14.670+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1248	1352	1249
2013-04-04T11:50:16.073+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1248	1352	1249
2013-04-04T11:56:15.679+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1668	1352	1249
2013-04-04T11:56:18.839+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1308	1352	1249
2013-04-04T11:57:10.487+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1308	1352	1249
2013-04-04T11:57:10.988+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1308	1352	1249
2013-04-04T11:57:34.037+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1308	1352	1249
2013-04-04T11:57:37.039+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1312	1352	1249
2013-04-04T11:57:44.504+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1312	1352	1249
2013-04-04T11:59:25.043+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1660	1352	1249
2013-04-04T11:59:31.464+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1668	1352	1249
2013-04-04T12:02:06.857+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1668	1352	1249
2013-04-04T12:02:13.318+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1284	1352	1249
2013-04-04T12:02:16.016+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1284	1352	1249
2013-04-04T12:02:29.386+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1284	1352	1249
2013-04-04T12:02:32.866+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	180	1352	1249
2013-04-04T12:02:41.167+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1096	1352	1249
2013-04-04T12:02:43.886+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1096	1352	1249
2013-04-04T12:02:51.404+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1620	1352	1249
2013-04-04T12:02:51.413+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1620	1352	1249
2013-04-04T12:02:51.646+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1620	1352	1249
2013-04-04T12:11:03.068+02:00	READY	http://trac.seqan.de/	160.45.112.60	-	0	0	1367	1249
2013-04-04T12:11:08.711+02:00	READY	http://trac.seqan.de/search	160.45.112.60	-	0	0	1367	1249
2013-04-04T12:11:12.383+02:00	READY	http://trac.seqan.de/report	160.45.112.60	-	0	0	1367	1249
2013-04-04T12:11:18.891+02:00	READY	http://trac.seqan.de/query	160.45.112.60	-	0	0	1352	1249
2013-04-04T12:11:39.221+02:00	READY	http://trac.seqan.de/query?summary=%7Efinder&col=milestone&order=priority	160.45.112.60	-	0	0	1367	1249
2013-04-04T12:11:56.704+02:00	READY	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	0	1352	1249
2013-04-04T12:12:12.519+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	116	1352	1249
2013-04-04T12:12:14.642+02:00	READY	http://trac.seqan.de/query?summary=%7Efinder&col=milestone&order=priority	160.45.112.60	-	0	0	1367	1249
2013-04-04T12:12:16.906+02:00	READY	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	0	1352	1249
2013-04-04T12:12:26.934+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	52	1352	1249
2013-04-04T12:12:32.718+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	72	1352	1249
2013-04-04T12:12:35.574+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	80	1352	1249
2013-04-04T12:12:40.815+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	180	1352	1249
2013-04-04T12:12:45.678+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	304	1352	1249
2013-04-04T12:12:49.386+02:00	READY	http://trac.seqan.de/query?summary=%7Efinder&col=milestone&order=priority	160.45.112.60	-	0	0	1367	1249
2013-04-04T12:12:53.611+02:00	READY	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	0	1352	1249
2013-04-04T12:12:57.046+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	0	1352	1249
2013-04-04T12:13:00.623+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	52	1352	1249
2013-04-04T12:13:04.974+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	480	1352	1249
2013-04-04T12:13:08.577+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	484	1352	1249
2013-04-04T12:13:18.137+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	504	1352	1249
2013-04-04T12:13:26.031+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	796	1352	1249
2013-04-04T12:13:39.062+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	862	1352	1249
2013-04-04T12:13:43.825+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	0	1352	1249
2013-04-04T12:13:56.047+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	862	1352	1249
2013-04-04T12:14:03.478+02:00	SCROLL	http://trac.seqan.de/ticket/321	160.45.112.60	-	0	862	1352	1249
2013-04-04T12:14:09.231+02:00	READY	http://trac.seqan.de/query?summary=%7Efinder&col=milestone&order=priority	160.45.112.60	-	0	0	1367	1249
2013-04-04T12:14:16.532+02:00	READY	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	0	1352	1249
2013-04-04T12:14:19.487+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	188	1352	1249
2013-04-04T12:14:23.767+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	24	1352	1249
2013-04-04T12:14:33.608+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	68	1352	1249
2013-04-04T12:15:26.646+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	312	1352	1249
2013-04-04T12:15:33.678+02:00	READY	http://trac.seqan.de/query?summary=%7Efinder&col=milestone&order=priority	160.45.112.60	-	0	0	1367	1249
2013-04-04T12:15:41.527+02:00	READY	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	0	1352	1249
2013-04-04T12:15:51.575+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	100	1352	1249
2013-04-04T12:16:03.511+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	368	1352	1249
2013-04-04T12:16:05.920+02:00	BLUR	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	4	1352	1249
2013-04-04T12:16:06.726+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	4	1352	1249
2013-04-04T12:16:15.989+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1620	1352	1249
2013-04-04T12:16:19.569+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1392	1352	1249
2013-04-04T12:16:20.678+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.112.60	-	0	1392	1352	1249
2013-04-04T12:16:20.877+02:00	FOCUS	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	4	1352	1249
2013-04-04T12:16:45.182+02:00	READY	http://trac.seqan.de/query?summary=%7Efinder&col=milestone&order=priority	160.45.112.60	-	0	0	1367	1249
2013-04-04T12:16:58.126+02:00	READY	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	0	1352	1249
2013-04-04T12:16:59.749+02:00	READY	http://trac.seqan.de/query?summary=%7Efinder&col=milestone&order=priority	160.45.112.60	-	0	0	1367	1249
2013-04-04T12:17:05.975+02:00	READY	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	0	1352	1249
2013-04-04T12:17:10.039+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	392	1352	1249
2013-04-04T12:17:18.111+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	428	1352	1249
2013-04-04T12:17:22.734+02:00	SCROLL	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	536	1352	1249
2013-04-04T12:17:23.333+02:00	TYPING-author-anonymous	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	536	1352	1249
2013-04-04T12:17:23.492+02:00	TYPING-author-m	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	536	1352	1249
2013-04-04T12:17:23.620+02:00	TYPING-author-me	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	536	1352	1249
2013-04-04T12:17:23.700+02:00	TYPING-author-mei	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	536	1352	1249
2013-04-04T12:17:23.732+02:00	TYPING-author-meie	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	536	1352	1249
2013-04-04T12:17:23.956+02:00	TYPING-author-meier	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	536	1352	1249
2013-04-04T12:17:24.716+02:00	TYPING-author-meiers@inf.fu-berlin.de	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	536	1352	1249
2013-04-04T12:17:24.796+02:00	TYPING-author-meiers@inf.fu-berlin.de	http://trac.seqan.de/ticket/865	160.45.112.60	-	0	536	1352	1249

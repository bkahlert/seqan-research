2012-07-23T12:20:25.738+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:25.759+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:20:25.777+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	2551	784
2012-07-23T12:20:25.870+02:00	TYPING-search-s	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:25.909+02:00	TYPING-search-se	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:26.072+02:00	TYPING-search-set	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:26.168+02:00	TYPING-search-setq	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:26.206+02:00	TYPING-search-setqu	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:26.322+02:00	TYPING-search-setqua	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:26.456+02:00	TYPING-search-setqual	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:27.700+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.set_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:20:34.949+02:00	TYPING-search-setqualig	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:34.838+02:00	TYPING-search-setquali	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:36.536+02:00	TYPING-search-setqualige	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:36.614+02:00	TYPING-search-g	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:36.705+02:00	TYPING-search-ge	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:36.874+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:37.076+02:00	TYPING-search-getq	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:37.199+02:00	TYPING-search-getqu	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:37.312+02:00	TYPING-search-getqua	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:37.515+02:00	TYPING-search-getqual	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:38.810+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:20:42.058+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	784
2012-07-23T12:20:42.061+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:20:42.942+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:20:44.849+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:22:54.955+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:22:55.639+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:23:28.630+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:26:39.164+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	784
2012-07-23T12:26:39.454+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	784
2012-07-23T13:15:24.816+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	2551	784
2012-07-23T13:15:28.306+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:30.911+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:31.961+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:42.704+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsEclipse	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:44.630+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:45.728+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:47.240+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:15:55.252+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:01.209+02:00	READY	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:01.466+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:02.026+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:03.181+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:07.758+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:10.138+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	0	2215	1128
2012-07-23T13:16:11.582+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	188	2215	1128
2012-07-23T13:16:13.931+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	1492	2215	1128
2012-07-23T13:16:29.695+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5334	2215	1128
2012-07-23T13:26:29.175+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5509	2215	1128
2012-07-23T13:36:05.926+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5509	2215	1128
2012-07-23T13:36:05.946+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5509	2215	1128
2012-07-23T14:37:03.009+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T14:55:34.114+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T14:55:34.115+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T14:56:21.333+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T14:56:21.334+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T15:25:59.191+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T15:25:59.193+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	188.40.166.99	-	0	5636	2215	1128
2012-07-23T16:17:14.564+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	982
2012-07-23T16:17:15.294+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	982
2012-07-23T16:17:16.067+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	2551	982
2012-07-23T16:17:16.070+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	982
2012-07-23T16:17:16.072+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2250	982
2012-07-23T16:55:34.878+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.convert_Quality.html	188.40.166.99	-	0	0	2151	1025
2012-07-25T13:45:35.810+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1260	1284
2012-07-25T13:45:36.078+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:45:36.174+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1260	1284
2012-07-25T13:45:36.309+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:37.702+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:37.735+02:00	TYPING-search-i	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:37.860+02:00	TYPING-search-it	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:37.946+02:00	TYPING-search-ite	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:37.962+02:00	TYPING-search-iter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:38.094+02:00	TYPING-search-itera	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:38.163+02:00	TYPING-search-iterat	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:38.263+02:00	TYPING-search-iterato	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:41.497+02:00	READY	http://docs.seqan.de/seqan/dev2/files/DEMO_Iterator+_Basics.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:45:47.446+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:45:47.448+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/DEMO_Iterator+_Basics.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:45:48.072+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:46:04.400+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	291	959	1284
2012-07-25T13:46:12.043+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	1008	959	1284
2012-07-25T13:46:17.192+02:00	LINK-http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html#	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	1008	959	1284
2012-07-25T13:46:20.420+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	1260	959	1284
2012-07-25T13:46:20.827+02:00	LINK-http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html#	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	1018	959	1284
2012-07-25T13:46:22.830+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	1018	959	1284
2012-07-25T13:46:43.804+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:47:57.836+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:47:57.839+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:47:58.325+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TAG_Iterator+_Spec.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:00.087+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1284
2012-07-25T13:48:00.090+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TAG_Iterator+_Spec.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:00.465+02:00	READY	http://docs.seqan.de/seqan/dev2/files/DEMO_Rooted+_Iterators.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:06.200+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Iterator.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:14.738+02:00	READY	http://docs.seqan.de/seqan/dev2/files/DEMO_Rooted+_Iterators.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:22.617+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TAG_Iterator+_Spec.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:23.499+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:25.693+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:29.880+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Random_Access_Iterator_Concept.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:48:35.754+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T13:49:01.126+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T14:08:55.727+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T14:08:55.794+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T14:18:05.693+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T14:18:07.038+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-25T14:20:10.051+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	188.40.166.99	-	0	0	959	1284
2012-07-31T11:34:19.296+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1574	1266
2012-07-31T11:34:19.311+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:34:19.783+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:19.989+02:00	TYPING-search-A	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.112+02:00	TYPING-search-Al	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.180+02:00	TYPING-search-Ali	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.258+02:00	TYPING-search-Alig	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.341+02:00	TYPING-search-Align	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.394+02:00	TYPING-search-Align	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.456+02:00	TYPING-search-AlignC	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.563+02:00	TYPING-search-AlignCo	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.630+02:00	TYPING-search-AlignCon	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.687+02:00	TYPING-search-AlignConf	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:20.776+02:00	TYPING-search-AlignConfi	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:21.970+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:34:22.400+02:00	TYPING-search-AlignConfig	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:34:46.005+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:43:41.920+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:43:42.022+02:00	TYPING-search-AlignConfig	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:43:42.089+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:43:46.000+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:44:01.727+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:44:51.232+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:44:54.989+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1266
2012-07-31T11:44:54.990+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:45:00.090+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:48:54.954+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:49:40.048+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:51:58.175+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T11:51:58.350+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Align_Config.html	188.40.166.99	-	0	0	1273	1266
2012-07-31T17:32:50.956+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T17:32:50.977+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:32:50.992+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.532+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.595+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.763+02:00	TYPING-search-co	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.780+02:00	TYPING-search-con	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.866+02:00	TYPING-search-cons	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:52.928+02:00	TYPING-search-const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.300+02:00	TYPING-search-const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.323+02:00	TYPING-search-const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.469+02:00	TYPING-search-const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.581+02:00	TYPING-search-const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.683+02:00	TYPING-search-U	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.775+02:00	TYPING-search-Ut	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.863+02:00	TYPING-search-Ute	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:55.921+02:00	TYPING-search-Uter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:56.019+02:00	TYPING-search-Utera	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:56.098+02:00	TYPING-search-Uterat	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:56.167+02:00	TYPING-search-Uterati	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:56.999+02:00	TYPING-search-Uteratir	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.133+02:00	TYPING-search-Uterati	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.167+02:00	TYPING-search-Uterati	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.302+02:00	TYPING-search-Uterati	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.404+02:00	TYPING-search-Uterati	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.560+02:00	TYPING-search-I	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.686+02:00	TYPING-search-It	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.752+02:00	TYPING-search-Ite	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.850+02:00	TYPING-search-Iter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:57.933+02:00	TYPING-search-Itera	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:58.020+02:00	TYPING-search-Iterat	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:58.091+02:00	TYPING-search-Iterato	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:58.258+02:00	TYPING-search-Iterator	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:58.462+02:00	TYPING-search-Iterator	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.016+02:00	TYPING-search-IteratorC	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.034+02:00	TYPING-search-IteratorC	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.157+02:00	TYPING-search-IteratorC	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.249+02:00	TYPING-search-IteratorC	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.340+02:00	TYPING-search-C	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.451+02:00	TYPING-search-Co	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.518+02:00	TYPING-search-Con	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.608+02:00	TYPING-search-Cons	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.833+02:00	TYPING-search-Const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:32:59.935+02:00	TYPING-search-Const	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:00.093+02:00	TYPING-search-ConstI	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:00.182+02:00	TYPING-search-ConstIt	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:00.273+02:00	TYPING-search-ConstIte	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:01.847+02:00	TYPING-search-ConstIter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:01.869+02:00	TYPING-search-ConstIter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.129+02:00	TYPING-search-ConstIter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.275+02:00	TYPING-search-ConstIter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.410+02:00	TYPING-search-I	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.465+02:00	TYPING-search-It	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.555+02:00	TYPING-search-Ite	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.673+02:00	TYPING-search-Iter	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:02.742+02:00	TYPING-search-Itera	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:03.096+02:00	TYPING-search-Iterat	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:03.141+02:00	TYPING-search-Iterato	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:06.268+02:00	READY	http://docs.seqan.de/seqan/dev2/files/DEMO_Iterator+_Basics.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T17:33:07.338+02:00	TYPING-search-Iterator	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:07.399+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:07.394+02:00	TYPING-search-Iterator	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:10.327+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:10.329+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/DEMO_Iterator+_Basics.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T17:33:10.332+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:33:10.630+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:33:10.633+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/DEMO_Iterator+_Basics.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T17:33:10.636+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:33:22.950+02:00	READY	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:33:23.509+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:33:30.571+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:33:32.433+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:46:43.404+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:46:43.517+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:47:59.287+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:48:01.856+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:48:05.583+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:48:06.581+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:52:35.856+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:52:39.736+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:53:06.627+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:53:07.795+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-07-31T17:53:07.810+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T17:53:07.814+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:35.326+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:35.344+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1441	1304
2012-07-31T18:05:35.360+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T18:05:36.025+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.127+02:00	TYPING-search-g	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.214+02:00	TYPING-search-ge	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.299+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.413+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.801+02:00	TYPING-search-getQ	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:36.929+02:00	TYPING-search-getQu	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:37.013+02:00	TYPING-search-getQua	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:37.173+02:00	TYPING-search-getQual	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:37.274+02:00	TYPING-search-getQuali	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:38.015+02:00	TYPING-search-getQualit	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:38.342+02:00	TYPING-search-getQualit	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:05:38.689+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	188.40.166.99	-	0	0	1140	1304
2012-07-31T18:05:40.328+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:14:31.609+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:14:33.965+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:14:33.966+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1304
2012-07-31T18:14:34.175+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1441	1304
2012-08-06T17:17:37.777+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1585	1199
2012-08-06T17:17:38.028+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:17:38.047+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:38.870+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:38.927+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:39.112+02:00	TYPING-search-A	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:39.184+02:00	TYPING-search-Al	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:39.264+02:00	TYPING-search-Ali	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:39.319+02:00	TYPING-search-Alig	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:17:41.679+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:17:44.619+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	231	1284	1199
2012-08-06T17:17:47.222+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	305	1284	1199
2012-08-06T17:17:51.890+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	6	1284	1199
2012-08-06T17:18:02.431+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	17	1284	1199
2012-08-06T17:18:03.339+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1199
2012-08-06T17:18:03.341+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	17	1284	1199
2012-08-06T17:18:03.758+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:18:06.310+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	17	1284	1199
2012-08-06T17:18:11.077+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:18:14.540+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:18:43.544+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:18:44.276+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-06T17:22:23.436+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1284	1199
2012-08-08T16:05:01.603+02:00	READY	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:05:33.333+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:05:33.598+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:43:21.845+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:43:21.876+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:43:22.989+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:43:24.635+02:00	BLUR	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-08T16:43:28.658+02:00	FOCUS	http://trac.seqan.de/ticket/280	188.40.166.99	-	0	0	1636	1346
2012-08-10T15:39:37.163+02:00	READY	http://trac.seqan.de/ticket/90	141.42.200.12	-	0	367	1719	827
2012-08-10T15:39:40.056+02:00	READY	http://trac.seqan.de/ticket/90	141.42.200.12	-	0	844	1719	827
2012-08-10T15:39:42.586+02:00	SCROLL	http://trac.seqan.de/ticket/90	141.42.200.12	-	0	43	1719	827
2012-08-10T15:39:47.826+02:00	SCROLL	http://trac.seqan.de/ticket/90	141.42.200.12	-	0	432	1719	827
2012-08-10T15:39:52.277+02:00	READY	http://trac.seqan.de/browser/trunk/seqan/projects/benchmarks/find/src/iterator/myers.h?rev=5837	141.42.200.12	-	0	0	1719	827
2012-08-10T15:39:57.220+02:00	READY	http://trac.seqan.de/ticket/317	141.42.200.12	-	0	0	1719	827
2012-08-10T15:40:03.951+02:00	READY	http://trac.seqan.de/ticket/280	141.42.200.12	-	0	0	1719	827
2012-08-10T15:40:07.632+02:00	SCROLL	http://trac.seqan.de/ticket/280	141.42.200.12	-	0	177	1719	827
2012-08-10T15:40:10.034+02:00	BLUR	http://trac.seqan.de/ticket/280	141.42.200.12	-	0	177	1719	827
2012-08-10T15:40:12.337+02:00	FOCUS	http://trac.seqan.de/ticket/280	141.42.200.12	-	0	177	1719	827
2012-08-14T12:08:28.282+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:28.302+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:28.351+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:08:28.582+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:28.671+02:00	TYPING-search-s	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:28.813+02:00	TYPING-search-st	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:28.999+02:00	TYPING-search-str	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:29.075+02:00	TYPING-search-stri	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:29.189+02:00	TYPING-search-strin	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:34.127+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:08:39.431+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	1355	1359	1179
2012-08-14T12:08:42.216+02:00	TYPING-search-string	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:42.245+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:42.238+02:00	TYPING-search-string	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:42.747+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:42.876+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	639	1359	1179
2012-08-14T12:08:42.878+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:42.881+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:42.959+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:42.958+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	639	1359	1179
2012-08-14T12:08:42.962+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:43.028+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:43.027+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	639	1359	1179
2012-08-14T12:08:43.030+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:44.820+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:08:44.822+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:46.627+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:08:46.806+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:48.863+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:08:48.865+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:48.869+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:49.009+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:08:49.246+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:08:49.248+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:49.251+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:49.463+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:08:49.465+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1660	1179
2012-08-14T12:08:49.467+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1179
2012-08-14T12:08:50.410+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:09:04.093+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move_Value.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:10.169+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:12.812+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move_Value.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:14.913+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:15.887+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.swap.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:27.353+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:30.042+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.move_Value.html	188.40.166.99	-	0	0	1359	1179
2012-08-14T12:09:30.943+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	987	1359	1179
2012-08-14T12:09:34.685+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	1509	1359	1179
2012-08-14T12:09:38.573+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T12:09:48.200+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T12:12:50.076+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T12:12:50.349+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T13:42:16.479+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T13:42:16.527+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T13:42:37.371+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T13:42:37.434+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	572	1359	1179
2012-08-14T13:52:10.318+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	141.42.200.12	-	0	572	1359	1179
2012-08-14T13:52:10.377+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	141.42.200.12	-	0	572	1359	1179
2012-08-14T13:52:27.942+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:04:02.194+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:04:02.196+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:05:39.752+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:05:39.809+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:15:47.345+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T14:15:47.409+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T17:44:16.520+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-14T17:44:16.575+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String.html	188.40.166.99	-	0	619	1359	1179
2012-08-16T10:57:00.628+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1314	1343
2012-08-16T10:57:01.097+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1314	1343
2012-08-16T10:57:01.148+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:57:01.294+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:08.829+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:08.903+02:00	TYPING-search-r	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:09.007+02:00	TYPING-search-ro	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:09.075+02:00	TYPING-search-roo	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:09.177+02:00	TYPING-search-root	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:09.300+02:00	TYPING-search-roote	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:12.079+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:57:20.090+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	968	1013	1343
2012-08-16T10:57:22.994+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1343
2012-08-16T10:57:22.996+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	968	1013	1343
2012-08-16T10:57:23.328+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Dna5_Iterator.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:57:30.042+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:57:32.961+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	970	1013	1343
2012-08-16T10:57:38.597+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Dna5_Iterator.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:57:39.790+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:57:42.728+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	970	1013	1343
2012-08-16T10:57:50.295+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Peptide_Iterator.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:57:55.743+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Peptide.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:58:00.809+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Peptide_Iterator.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:58:01.276+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:58:04.059+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	970	1013	1343
2012-08-16T10:58:15.691+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Char_Iterator.html	188.40.166.99	-	0	0	1013	1343
2012-08-16T10:58:18.595+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:58:19.302+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:58:58.743+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:58:59.494+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:59:58.676+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T10:59:58.765+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:01:39.315+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:01:40.219+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:02:06.159+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:02:06.849+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:04:40.754+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:04:41.747+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:04:51.348+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T11:04:52.178+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1013	1343
2012-08-16T13:32:41.613+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1369
2012-08-16T13:32:41.681+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CONCEPT_Rooted_Iterator_Concept.html	188.40.166.99	-	0	711	1511	1369
2012-08-16T13:32:41.752+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1812	1369
2012-08-20T10:50:35.949+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:50:38.636+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:50:42.599+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:50:46.204+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	517	1748	1206
2012-08-20T10:50:53.596+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	600	1748	1206
2012-08-20T10:50:54.813+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	600	1748	1206
2012-08-20T10:51:26.893+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	600	1748	1206
2012-08-20T10:51:30.355+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:51:30.429+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:51:31.696+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:51:34.419+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:51:39.192+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:51:48.753+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:57:01.002+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:57:01.277+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T10:57:03.581+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:57:04.106+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:57:04.284+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:05.903+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:05.959+02:00	TYPING-search-v	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:06.082+02:00	TYPING-search-va	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:06.218+02:00	TYPING-search-val	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:06.274+02:00	TYPING-search-valu	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:17.200+02:00	TYPING-search-value	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:57:20.193+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:08.916+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:10.865+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:21.194+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:21.201+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:21.547+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:21.942+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1748	1206
2012-08-20T10:58:22.001+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:24.105+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:24.179+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:55.520+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:58:58.228+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:59:43.388+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:59:43.528+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T10:59:43.627+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T11:18:19.577+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1206
2012-08-20T11:18:19.739+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T11:18:19.950+02:00	UNLOAD	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	696	1748	1206
2012-08-20T15:54:56.046+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	2203	1265
2012-08-20T15:54:56.166+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	2203	1265
2012-08-20T15:54:56.356+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1265
2012-08-20T15:54:56.970+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1265
2012-08-20T15:54:57.023+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	2203	1265
2012-09-04T11:14:50.679+02:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	129	1276	706
2012-09-04T11:14:52.426+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:14:54.332+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:14:55.434+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:01.321+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:07.846+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	215	1276	706
2012-09-04T11:15:12.099+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:25.519+02:00	READY	https://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:28.889+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	69	1276	706
2012-09-04T11:15:33.847+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:44.233+02:00	TYPING-text-= Getting Started =\n\nThis chapter gives you the necessary steps to get started with SeqAn:\n\n * Necessary Prerequisites\n * Installing SeqAn from Subversion\n * Creating a first build.\n * Creating your own first application.\n\nUse the following links to select your target operating system and IDE/build system.\nThe bold items show the recommended build system for the given platforms.\n\n{{{#!th style="align:center; text-align:top; width:200px"\n[[Image(/static/Tutorial/GettingStarted/Linux.png,width=80px,height=80px,link=)]] [[br]] Linux\n}}}\n{{{#!th style="align:center; text-align:top; width:200px"\n[[Image(/static/Tutorial/GettingStarted/MacOsX.png,width=80px,height=80pxlink=)]] [[br]] Mac Os X\n}}}\n{{{#!th style="align:center; text-align:top; width:200px"\n[[Image(/static/Tutorial/GettingStarted/Windows7.png,width=80px,height=80px,link=)]] [[br]] Windows\n}}}\n|--------------------------------------------------------\n{{{#!td valign="top" align="center"\nGetting started on Linux using\n\n{{{#!table style="border:none;"\n{{{#!td style="border:none; padding-left:20px; padding-right:20px;" align="center"\n[[Image(/static/Tutorial/GettingStarted/LinuxTerminal.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/LinuxMakefiles)]] [[br]]\n'''[wiki:Tutorial/GettingStarted/LinuxMakefiles Makefiles]'''\n}}}\n{{{#!td style="border:none; padding-left:20px; padding-right:20px;" align="center"\n[[Image(/static/Tutorial/GettingStarted/Eclipse.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/LinuxEclipse)]] [[br]]\n[wiki:Tutorial/GettingStarted/LinuxEclipse Eclipse]\n}}}\n}}}\n}}}\n{{{#!td valign="top" align="center"\nGetting started on Mac Os X using\n\n{{{#!table style="border:none;" \n{{{#!td style="border:none; padding-left:20px; padding-right:20px;" align="center"\n[[Image(/static/Tutorial/GettingStarted/Xcode.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/MacXcode)]] [[br]]\n'''[wiki:Tutorial/GettingStarted/MacXcode Xcode]'''\n}}}\n{{{#!td style="border:none; padding-left:20px; padding-right:20px;" align="center"\n[[Image(/static/Tutorial/GettingStarted/MacTerminal.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/MacMakefiles)]] [[br]]\n[wiki:Tutorial/GettingStarted/MacMakefiles Makefiles]\n}}}\n}}}\n}}}\n{{{#!td valign="top" align="center"\nGetting started on Windows using\n\n{{{#!table style="border:none;"\n{{{#!td style="border:none;" align="center"\n[[Image(/static/Tutorial/GettingStarted/VisualStudio2010.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/WindowsVisualStudio)]] [[br]]\n'''[wiki:Tutorial/GettingStarted/WindowsVisualStudio Visual Studio 8, 9, 10]'''\n}}}\n{{{#!td style="border:none;" colspan=2 align="center"\n[[Image(/static/Tutorial/GettingStarted/Eclipse.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/WindowsEclipse)]] [[br]]\n~~[wiki:Tutorial/GettingStarted/WindowsEclipse MinGW + Eclipse]~~\n}}}\n}}}\n}}}\n\n{{{\n#!comment\nMinGW Makefiles are not described yet\n[[Image(/static/Tutorial/GettingStarted/WindowsTerminal.png,width=50px,height=50px,link=wiki:Tutorial/GettingStarted/WindowsMinGW)]] [[br]]\n[wiki:Tutorial/GettingStarted/WindowsMinGW MinGW Makefiles]\n}}}\n\n{{{\n#!FoldOut\nClick "more" for details on the supported development platforms.\n----\n\n{{{\n#!InfoBox\n'''In-Depth Information:''' Supported OS, Build Systems, and Compilers\n\nThe content of this box is meant as additional information.\nYou do not need to understand it to use SeqAn or follow the tutorials.\n\nThere are three degrees of freedom when selecting a SeqAn development platform.\nThe degrees of freedom are:\n\n 1. The '''operating system'''.\n    We support Linux, Mac Os X and Windows.\n 1. The '''build system'''.\n    This is partially orthogonal to the operating system, although each build system is only available on some platforms (e.g. Visual Studio is only supported on Windows).\n    We use CMake to generate the actual build files and the build system maps to "CMake generators".\n    A CMake generator creates either build files for a build system (e.g. GNU Make) or a project file for an IDE (e.g. for Visual Studio 2008).\n 1. The '''compiler'''.\n    This is partially orthogonal to the operating system and build system, although only some combinations of each are possible.\n    For example, Visual Studio projects of a particular version can only use the Visual Studio compiler of the same version.\n\nThe SeqAn team offers support for the following operating systems, build systems, and compilers:\n\n * '''Operating System:''' Linux, Mac Os X, Windows.\n * '''Build System:''' Makefiles, Visual Studio projects, XCode projects, Eclipse CDT projects.\n * '''Compilers:''' GNU g++ from version 4.1, LLVM/Clang from version 3.0, Visual C++ from Version 8.\n\nWe are told that SeqAn also works on FreeBSD.\nIt should work with all [http://www.cmake.org/cmake/help/v2.8.8/cmake.html#section_Generators generators available in CMake] that work with the supported compilers (e.g. the !CodeBlocks generator will probably work as long as you use it on a operating system with a supported compiler, although we cannot offer any support for !CodeBlocks).\n}}}\n}}}\n\n== Relevant How-Tos ==\n\nAlthough slightly more advanced than "getting started", the following How-Tos apply to setting up your build environment:\n\n [wiki:HowTo/UseParallelBuildDirectories How To: Use Parallel Build Directories] ::\n   With CMake, it is easy to create multiple build directories and thus different Makefile configurations or project files for different IDEs.\n   This is important to know if you want to have debug and release Makefiles next to each other.\n   Also, if you want to have build files for more than one Visual Studio version, then this How-To is for you!\n [wiki:HowTo/UseSeqAnInYourProjects How To: Use SeqAn In Your Projects] ::\n   This How-To explains how to use SeqAn in your projects with your own build system.\n   It deals with the precompiler defines to set, paths etc.\n [wiki:HowTo/UseLatestClangInXcode How To: Use The Latest Clang In XCode] ::\n   Clang is a new C++ compiler with very nice error output.\n   This How-To describes how to use the latest in XCode on Mac Os X.\n [wiki:HowTo/InstallContribsWindows How To: Install Contribs on Windows] ::\n   Installing and compiling libraries such as zlib or libbz2 on Windows can be tricky.\n   We provide prebuilt binaries which we recommend to use with SeqAn on Windows.\n   This How-To describes how to install them (it's as easy as extracting one ZIP file).	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:51.727+02:00	TYPING-comment-	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:51.878+02:00	TYPING-comment-t	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:52.463+02:00	TYPING-comment-ty	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:52.599+02:00	TYPING-comment-typ	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:52.775+02:00	TYPING-comment-typo	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:52.839+02:00	TYPING-comment-typo,	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:54.239+02:00	TYPING-comment-typo, os 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:54.159+02:00	TYPING-comment-typo, os	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:54.071+02:00	TYPING-comment-typo, o	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:54.039+02:00	TYPING-comment-typo, 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:54.279+02:00	TYPING-comment-typo, os x	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.039+02:00	TYPING-comment-typo, os x 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.199+02:00	TYPING-comment-typo, os x l	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.262+02:00	TYPING-comment-typo, os x lo	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.335+02:00	TYPING-comment-typo, os x log	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.424+02:00	TYPING-comment-typo, os x logo	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:55.951+02:00	TYPING-comment-typo, os x logo 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.039+02:00	TYPING-comment-typo, os x logo w	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.103+02:00	TYPING-comment-typo, os x logo wa	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.166+02:00	TYPING-comment-typo, os x logo was	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.231+02:00	TYPING-comment-typo, os x logo was 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.319+02:00	TYPING-comment-typo, os x logo was a	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.551+02:00	TYPING-comment-typo, os x logo was a 	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.687+02:00	TYPING-comment-typo, os x logo was a l	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.751+02:00	TYPING-comment-typo, os x logo was a li	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:15:56.838+02:00	TYPING-comment-typo, os x logo was a lin	https://trac.seqan.de/wiki/Tutorial/GettingStarted?action=edit	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:06.639+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	476	1276	706
2012-09-04T11:16:11.258+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:12.862+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:18.591+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:20.175+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:33.970+02:00	READY	https://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:41.159+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:16:45.062+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:22:28.953+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:34:33.712+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:34:33.867+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:34:34.630+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T11:34:39.114+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	496	1276	706
2012-09-04T11:34:43.043+02:00	READY	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	92	1276	706
2012-09-04T11:34:46.612+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:34:46.634+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:35:00.624+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:35:13.635+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:35:13.823+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:35:16.836+02:00	READY	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:35:27.402+02:00	FOCUS	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:35:33.450+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	39	1276	706
2012-09-04T11:35:44.235+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:35:51.842+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:36:21.592+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:36:26.122+02:00	BLUR	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:36:42.675+02:00	FOCUS	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:36:45.978+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:36:49.307+02:00	BLUR	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:36:53.030+02:00	FOCUS	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:36:57.507+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	0	1276	706
2012-09-04T11:37:09.707+02:00	SCROLL	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:37:37.926+02:00	BLUR	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:37:46.309+02:00	FOCUS	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:44:16.420+02:00	BLUR	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:44:53.766+02:00	FOCUS	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:44:54.457+02:00	BLUR	https://dalak.imp.fu-berlin.de/SUAsrv/static/register.html	130.133.52.211	-	0	177	1276	706
2012-09-04T11:44:54.463+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T11:44:54.468+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	988	1276	706
2012-09-04T13:22:17.516+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T13:22:17.540+02:00	READY	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1276	706
2012-09-04T13:22:17.597+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	130.133.52.211	-	0	0	975	706
2012-09-04T13:22:17.603+02:00	TYPING-search-read	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T13:22:17.647+02:00	TYPING-search-readr	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T13:22:18.114+02:00	TYPING-search-readre	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T13:22:19.902+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	97	975	706
2012-09-04T13:22:23.184+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	861	975	706
2012-09-04T13:22:25.284+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T13:22:25.287+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	861	975	706
2012-09-04T13:22:49.720+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	861	975	706
2012-09-04T13:28:12.472+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	861	975	706
2012-09-04T13:28:12.635+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	130.133.52.211	-	0	861	975	706
2012-09-04T13:28:17.688+02:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-09-04T13:28:20.777+02:00	SCROLL	http://trac.seqan.de/	130.133.52.211	-	0	22	1276	706
2012-09-04T13:28:22.377+02:00	READY	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	0	1276	706
2012-09-04T13:28:29.498+02:00	READY	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	0	1276	706
2012-09-04T13:28:38.065+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	775	1276	706
2012-09-04T13:28:59.609+02:00	READY	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	946	1276	706
2012-09-04T13:29:10.991+02:00	READY	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	0	1276	706
2012-09-04T13:29:20.754+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1388	1276	706
2012-09-04T13:29:23.396+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1693	1276	706
2012-09-04T13:29:35.359+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1693	1276	706
2012-09-04T13:29:39.846+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2321	1276	706
2012-09-04T13:29:43.907+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2169	1276	706
2012-09-04T13:29:55.913+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	3327	1276	706
2012-09-04T13:29:58.001+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	3383	1276	706
2012-09-04T13:29:59.070+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	3383	1276	706
2012-09-04T13:32:43.910+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	3383	1276	706
2012-09-04T13:32:49.501+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1775	1276	706
2012-09-04T13:32:50.651+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1775	1276	706
2012-09-04T13:33:56.224+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1775	1276	706
2012-09-04T13:33:59.764+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1974	1276	706
2012-09-04T13:34:02.114+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1974	1276	706
2012-09-04T13:34:12.797+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1974	1276	706
2012-09-04T13:34:18.135+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:18.521+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:19.009+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:21.467+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:21.847+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:24.133+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:35.145+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:36.309+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:53.028+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:34:54.470+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:35:25.685+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2028	1276	706
2012-09-04T13:35:29.925+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2057	1276	706
2012-09-04T13:35:36.083+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2057	1276	706
2012-09-04T13:35:45.946+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2057	1276	706
2012-09-04T13:35:51.934+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	4480	1276	706
2012-09-04T13:35:52.920+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	4341	1276	706
2012-09-04T13:35:55.860+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1623	1276	706
2012-09-04T13:35:57.255+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	1623	1276	706
2012-09-04T13:36:08.134+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	6893	1276	706
2012-09-04T13:36:12.995+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	5954	1276	706
2012-09-04T13:36:17.955+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2588	1276	706
2012-09-04T13:36:18.985+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2588	1276	706
2012-09-04T13:36:19.881+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2588	1276	706
2012-09-04T13:36:21.538+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:36:22.570+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:36:33.963+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:36:37.063+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:36:46.088+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:36:48.158+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:38:15.862+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:38:24.418+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:38:31.782+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:38:32.473+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:41:44.518+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:41:45.174+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:42:45.789+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:42:58.331+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:43:12.757+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T13:43:13.109+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	130.133.52.211	-	0	2842	1276	706
2012-09-04T14:30:14.651+02:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-09-04T14:30:20.668+02:00	SCROLL	http://trac.seqan.de/	130.133.52.211	-	0	168	1276	706
2012-09-04T14:30:21.328+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	0	1276	706
2012-09-04T14:30:30.107+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:31:59.732+02:00	READY	http://trac.seqan.de/changeset/12818	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:06.706+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:08.944+02:00	READY	http://trac.seqan.de/ticket/965	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:12.339+02:00	SCROLL	http://trac.seqan.de/ticket/965	130.133.52.211	-	0	63	1276	706
2012-09-04T14:32:14.514+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:19.500+02:00	READY	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=diff&version=36	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:21.927+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:23.624+02:00	READY	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=diff&version=37	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:27.574+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:27.968+02:00	READY	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=diff&version=37	130.133.52.211	-	0	0	1276	706
2012-09-04T14:32:29.161+02:00	READY	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:02.223+02:00	BLUR	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:23.634+02:00	FOCUS	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:23.832+02:00	BLUR	http://trac.seqan.de/timeline?precision=second&from=2012-09-04T11%3A16%3A17%2B02%3A00	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:26.078+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:33:25.951+02:00	READY	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:26.256+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1276	706
2012-09-04T14:33:26.405+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:26.659+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:26.691+02:00	TYPING-search-e	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:26.783+02:00	TYPING-search-en	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:26.909+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:27.043+02:00	TYPING-search-endp	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:27.096+02:00	TYPING-search-endpo	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:27.658+02:00	TYPING-search-endpos	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:27.826+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.end_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:33:31.508+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.end_Position.html	130.133.52.211	-	0	96	975	706
2012-09-04T14:33:38.707+02:00	TYPING-search-endpos	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:33:38.800+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:02.249+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:02.939+02:00	TYPING-search-endpos	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:03.025+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:21.931+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:29.739+02:00	TYPING-search-endpos	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:29.850+02:00	TYPING-search-endpo	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:30.018+02:00	TYPING-search-endp	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:30.162+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:31.098+02:00	TYPING-search-en	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:31.298+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:31.490+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:32.754+02:00	TYPING-search-endV	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:32.865+02:00	TYPING-search-endVi	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:33.195+02:00	TYPING-search-endVie	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:34.538+02:00	TYPING-search-endView	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:34.674+02:00	TYPING-search-endVie	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:34.817+02:00	TYPING-search-endVi	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:35.339+02:00	TYPING-search-endV	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:36.930+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:36.994+02:00	TYPING-search-endc	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:37.170+02:00	TYPING-search-endcl	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:38.042+02:00	TYPING-search-endcli	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:38.329+02:00	TYPING-search-endcl	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:39.178+02:00	TYPING-search-endc	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:39.314+02:00	TYPING-search-end	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:39.602+02:00	TYPING-search-e	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:39.475+02:00	TYPING-search-en	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.194+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.302+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.490+02:00	TYPING-search-cl	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.698+02:00	TYPING-search-cli	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.833+02:00	TYPING-search-clip	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.866+02:00	TYPING-search-clipp	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:40.946+02:00	TYPING-search-clippe	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:41.530+02:00	TYPING-search-clipped	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:41.626+02:00	TYPING-search-clippede	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:41.722+02:00	TYPING-search-clippeden	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:46.531+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:34:49.023+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	706
2012-09-04T14:34:49.026+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:34:52.632+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	80	975	706
2012-09-04T14:34:56.480+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	262	975	706
2012-09-04T14:37:29.883+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	262	975	706
2012-09-04T14:37:34.970+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	262	975	706
2012-09-04T14:37:38.984+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_Begin_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:37:41.504+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_Begin_Position.html	130.133.52.211	-	0	262	975	706
2012-09-04T14:37:44.430+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:37:46.793+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:38:05.996+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:38:06.695+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:42:27.430+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:42:27.655+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:42:53.196+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:42:53.874+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:43:45.113+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:43:45.796+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:43:55.516+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:43:56.293+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:46:28.889+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:46:29.085+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:01.424+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:01.908+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:02.407+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:02.973+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:03.327+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:03.854+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:16.243+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T14:48:16.840+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:00:10.224+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:00:13.298+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:01:44.004+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:01:45.261+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:01:45.921+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:02:29.167+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:42:38.284+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:42:38.429+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Gaps_23clipped_End_Position.html	130.133.52.211	-	0	0	975	706
2012-09-04T15:46:33.241+02:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-09-04T15:47:00.245+02:00	READY	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	0	1276	706
2012-09-04T15:47:03.076+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	739	1276	706
2012-09-04T15:47:03.835+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	739	1276	706
2012-09-04T15:47:04.688+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	2311	1276	706
2012-09-04T15:47:06.018+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	2311	1276	706
2012-09-04T15:47:12.423+02:00	READY	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	2311	1276	706
2012-09-04T15:47:15.876+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	-11	1276	706
2012-09-04T15:47:18.186+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	0	1276	706
2012-09-04T15:47:23.255+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:48:15.155+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:48:46.768+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:48:47.111+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:54:32.388+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:54:32.540+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1205	1276	706
2012-09-04T15:55:08.618+02:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-09-04T15:55:10.675+02:00	READY	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	0	1276	706
2012-09-04T15:55:10.761+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	0	1276	706
2012-09-04T15:55:11.669+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	2311	1276	706
2012-09-04T15:55:13.023+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	130.133.52.211	-	0	2311	1276	706
2012-09-04T15:55:14.424+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	0	1276	706
2012-09-04T15:55:17.874+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5643	1276	706
2012-09-04T15:55:21.825+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5643	1276	706
2012-09-04T15:55:23.831+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5720	1276	706
2012-09-04T15:55:27.310+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5720	1276	706
2012-09-04T15:59:26.501+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5720	1276	706
2012-09-04T15:59:32.426+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2049	1276	706
2012-09-04T15:59:34.912+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2339	1276	706
2012-09-04T15:59:40.548+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2970	1276	706
2012-09-04T15:59:40.658+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2970	1276	706
2012-09-04T16:00:41.485+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2970	1276	706
2012-09-04T16:00:47.551+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2471	1276	706
2012-09-04T16:00:48.789+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3031	1276	706
2012-09-04T16:00:49.853+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3031	1276	706
2012-09-04T16:00:50.156+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3031	1276	706
2012-09-04T16:00:51.514+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3102	1276	706
2012-09-04T16:00:52.438+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3102	1276	706
2012-09-04T16:00:52.610+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3102	1276	706
2012-09-04T16:00:57.301+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2021	1276	706
2012-09-04T16:01:15.606+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2371	1276	706
2012-09-04T16:01:25.596+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1797	1276	706
2012-09-04T16:01:38.255+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1582	1276	706
2012-09-04T16:02:35.995+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1271	1276	706
2012-09-04T16:02:36.703+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1271	1276	706
2012-09-04T16:02:38.776+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1271	1276	706
2012-09-04T16:02:40.047+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1311	1276	706
2012-09-04T16:02:40.415+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1311	1276	706
2012-09-04T16:02:44.348+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	604	1276	706
2012-09-04T16:02:50.254+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	811	1276	706
2012-09-04T16:02:53.619+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	989	1276	706
2012-09-04T16:03:00.230+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1092	1276	706
2012-09-04T16:03:35.086+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1981	1276	706
2012-09-04T16:03:35.773+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1981	1276	706
2012-09-04T16:03:36.278+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1981	1276	706
2012-09-04T16:03:38.714+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1981	1276	706
2012-09-04T16:03:39.060+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1981	1276	706
2012-09-04T16:03:43.685+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:03:44.041+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:03:44.552+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:03:44.698+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:03:45.961+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:04:09.320+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	1998	1270	642
2012-09-04T16:04:13.403+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3080	1270	642
2012-09-04T16:04:17.960+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	1	3217	1270	642
2012-09-04T16:04:20.636+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:04:22.173+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:04:22.631+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:04:41.702+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:04:51.787+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:04:53.374+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3291	1270	526
2012-09-04T16:05:00.019+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:00.597+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:27.617+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:31.553+02:00	LINK-http://docs.seqan.de/seqan/dev/FUNCTION.read.html	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:32.187+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:32.285+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Fragment+_Store.html#read	130.133.52.211	-	0	0	180	572
2012-09-04T16:05:32.602+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:32.606+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:32.608+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:38.131+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	76	1270	526
2012-09-04T16:05:40.920+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:41.059+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:41.060+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3104	1270	526
2012-09-04T16:05:43.983+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3057	1270	526
2012-09-04T16:05:44.010+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3057	1270	526
2012-09-04T16:05:51.210+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3057	1270	526
2012-09-04T16:05:53.701+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3057	1270	526
2012-09-04T16:05:53.703+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:54.568+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:58.396+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:05:59.880+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:06:01.132+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:06:02.400+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:06:08.068+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:06:09.029+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3057	1270	526
2012-09-04T16:06:09.027+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:06:14.633+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6952	1270	526
2012-09-04T16:06:14.829+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6952	1270	526
2012-09-04T16:06:26.028+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6952	1270	526
2012-09-04T16:06:30.458+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2960	1270	526
2012-09-04T16:06:31.612+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2960	1270	526
2012-09-04T16:06:31.812+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2960	1270	526
2012-09-04T16:06:39.779+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3249	1270	526
2012-09-04T16:06:49.972+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3249	1270	526
2012-09-04T16:07:18.459+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3249	1270	526
2012-09-04T16:07:21.965+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3132	1270	526
2012-09-04T16:07:22.187+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3132	1270	526
2012-09-04T16:07:25.401+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3132	1270	526
2012-09-04T16:07:25.752+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3132	1270	526
2012-09-04T16:07:25.754+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:07:27.973+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:08:28.360+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	0	1270	526
2012-09-04T16:08:32.919+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:08:36.504+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:08:41.176+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:09:00.402+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:09:01.855+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:09:02.398+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3132	1270	526
2012-09-04T16:09:02.396+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:09:06.744+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3113	1270	526
2012-09-04T16:09:13.235+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3223	1270	526
2012-09-04T16:09:15.827+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:09:49.697+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:08.844+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:29.570+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:30.450+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:31.118+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:52.058+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:10:54.754+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:11:54.404+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3531	1270	526
2012-09-04T16:11:57.616+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3298	1270	526
2012-09-04T16:11:58.975+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3298	1270	526
2012-09-04T16:11:58.976+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:12:51.448+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:14:50.116+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:14:50.982+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:15:28.860+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:15:30.544+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:17:15.195+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:17:17.622+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read.html	130.133.52.211	-	0	35	1270	526
2012-09-04T16:17:20.268+02:00	READY	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1270	526
2012-09-04T16:17:20.368+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1270	526
2012-09-04T16:17:20.485+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:20.699+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:20.808+02:00	TYPING-search-f	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:20.915+02:00	TYPING-search-fr	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:20.934+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	130.133.52.211	-	0	0	969	526
2012-09-04T16:17:21.010+02:00	TYPING-search-fra	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.140+02:00	TYPING-search-frag	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.161+02:00	TYPING-search-fragm	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.260+02:00	TYPING-search-fragme	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.276+02:00	TYPING-search-fragmen	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.376+02:00	TYPING-search-fragment	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.429+02:00	TYPING-search-fragments	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.577+02:00	TYPING-search-fragmentst	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.681+02:00	TYPING-search-fragmentstor	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:21.618+02:00	TYPING-search-fragmentsto	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:26.365+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	969	526
2012-09-04T16:17:27.823+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	526
2012-09-04T16:17:28.002+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	0	969	526
2012-09-04T16:17:30.561+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:17:30.931+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:00.444+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:01.016+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:02.197+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:03.396+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:04.038+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Fragment_Store.html	130.133.52.211	-	0	411	969	526
2012-09-04T16:18:07.640+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	969	526
2012-09-04T16:18:09.996+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	969	526
2012-09-04T16:18:09.998+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3298	1270	526
2012-09-04T16:18:13.204+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3626	1270	526
2012-09-04T16:18:27.356+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3626	1270	526
2012-09-04T16:18:38.439+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3626	1270	526
2012-09-04T16:18:40.984+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	7364	1270	526
2012-09-04T16:18:43.049+02:00	READY	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/small.sam	130.133.52.211	-	0	0	1270	526
2012-09-04T16:18:46.117+02:00	RESIZE	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/small.sam	130.133.52.211	-	0	2592	1054	536
2012-09-04T16:18:47.930+02:00	SCROLL	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/small.sam	130.133.52.211	-	0	2592	1054	536
2012-09-04T16:18:48.930+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5890	1054	536
2012-09-04T16:19:02.635+02:00	READY	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:19:17.796+02:00	BLUR	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:21:18.653+02:00	FOCUS	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:21:28.046+02:00	BLUR	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:21:30.640+02:00	FOCUS	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:21:30.771+02:00	BLUR	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:22:52.368+02:00	FOCUS	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:22:53.157+02:00	BLUR	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:23:00.181+02:00	FOCUS	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	536
2012-09-04T16:23:03.820+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	0	1054	536
2012-09-04T16:23:06.796+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	1591	1054	662
2012-09-04T16:23:09.966+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2580	1054	662
2012-09-04T16:24:43.119+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2599	1054	662
2012-09-04T16:24:43.253+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2599	1054	662
2012-09-04T16:24:43.997+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2599	1054	662
2012-09-04T16:24:45.020+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2599	1054	662
2012-09-04T16:24:55.006+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2599	1054	662
2012-09-04T16:25:03.449+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2614	1054	662
2012-09-04T16:25:17.026+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2614	1054	662
2012-09-04T16:25:18.746+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2614	1054	662
2012-09-04T16:25:43.627+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:49.358+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:49.829+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:50.368+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:51.034+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:51.862+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:54.548+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:27:56.937+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:28:02.958+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2634	1054	662
2012-09-04T16:28:05.614+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2648	1054	662
2012-09-04T16:28:06.243+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2648	1054	662
2012-09-04T16:28:19.195+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2648	1054	662
2012-09-04T16:28:20.536+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2803	1054	662
2012-09-04T16:28:21.110+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2803	1054	662
2012-09-04T16:28:21.911+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2803	1054	662
2012-09-04T16:28:23.229+02:00	LINK-http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2757	1054	662
2012-09-04T16:28:23.765+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:24.032+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2757	1054	662
2012-09-04T16:28:24.059+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:28:24.173+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2757	1054	662
2012-09-04T16:28:24.178+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:24.180+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:33.221+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:35.161+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:36.284+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:47.009+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:48.230+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:53.722+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:28:54.715+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:30:36.686+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:30:38.489+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	2757	1054	662
2012-09-04T16:30:38.485+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:30:40.229+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5687	1054	662
2012-09-04T16:30:42.235+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5764	1054	662
2012-09-04T16:30:43.177+02:00	LINK-http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5764	1054	662
2012-09-04T16:30:44.326+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5764	1054	662
2012-09-04T16:30:45.300+02:00	READY	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	662
2012-09-04T16:30:49.015+02:00	BLUR	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	662
2012-09-04T16:31:08.435+02:00	FOCUS	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	662
2012-09-04T16:31:29.321+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:31:30.013+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:31:36.630+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:31:47.212+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:32:26.874+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:32:29.000+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5764	1054	662
2012-09-04T16:32:28.999+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:32:32.659+02:00	READY	http://trac.seqan.de/attachment/wiki/Tutorial/SimpleRnaSeq/Mus_musculus.ucsc.MM9.gtf.zip	130.133.52.211	-	0	0	1054	662
2012-09-04T16:32:34.368+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5764	1054	662
2012-09-04T16:32:39.060+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3220	1054	662
2012-09-04T16:34:12.098+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3225	1054	662
2012-09-04T16:34:13.245+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3225	1054	662
2012-09-04T16:34:13.373+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3225	1054	662
2012-09-04T16:34:15.184+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:34:15.320+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:34:23.784+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3225	1054	662
2012-09-04T16:34:29.951+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2905	1054	662
2012-09-04T16:34:34.954+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3452	1054	662
2012-09-04T16:34:36.859+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3452	1054	662
2012-09-04T16:34:38.749+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3452	1054	662
2012-09-04T16:34:41.014+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3452	1054	662
2012-09-04T16:35:11.808+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3452	1054	662
2012-09-04T16:35:19.903+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:20.721+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:23.615+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:25.161+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:25.820+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:26.216+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:26.678+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:28.803+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:41.083+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:50.654+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3420	1054	662
2012-09-04T16:35:53.169+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3490	1054	662
2012-09-04T16:35:59.702+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3185	1054	662
2012-09-04T16:36:01.205+02:00	LINK-http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2925	1054	662
2012-09-04T16:36:02.107+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2925	1054	662
2012-09-04T16:36:02.340+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:36:02.449+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:36:05.000+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2629	1054	662
2012-09-04T16:36:08.586+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2629	1054	662
2012-09-04T16:36:08.591+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:36:08.593+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:36:13.554+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:17.209+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:46.110+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:48.691+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:49.946+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:51.563+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:52.310+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:36:59.651+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:10.418+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:17.605+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:19.307+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:22.626+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:24.935+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:25.442+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:37.521+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	662
2012-09-04T16:37:41.682+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	225
2012-09-04T16:37:43.187+02:00	RESIZE	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	1643	1054	225
2012-09-04T16:38:15.913+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:38:17.158+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:38:17.160+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2629	1054	662
2012-09-04T16:38:20.237+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3554	1054	662
2012-09-04T16:38:22.739+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3837	1054	662
2012-09-04T16:38:24.545+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3837	1054	662
2012-09-04T16:38:39.799+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3837	1054	662
2012-09-04T16:38:41.579+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3837	1054	662
2012-09-04T16:38:41.581+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:38:47.377+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	428	1054	662
2012-09-04T16:38:55.709+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	305	1054	662
2012-09-04T16:39:23.482+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	474	1054	662
2012-09-04T16:39:26.140+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	703	1054	662
2012-09-04T16:39:32.137+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	126	1054	662
2012-09-04T16:39:32.885+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	126	1054	662
2012-09-04T16:39:33.309+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	126	1054	662
2012-09-04T16:39:42.728+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:39:43.133+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Right.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:39:43.269+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Fragment+_Store.html#AnnotationTree%23goRight	130.133.52.211	-	0	0	180	662
2012-09-04T16:39:49.151+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Right.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:39:58.851+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Right.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:39:59.603+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:39:59.714+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:40:01.243+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Down.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:40:01.264+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Fragment+_Store.html#AnnotationTree%23goDown	130.133.52.211	-	0	0	180	662
2012-09-04T16:40:02.951+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Down.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:40:09.626+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION_Annotation_Tree_23go_Down.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:40:10.616+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:40:10.651+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:40:11.236+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:40:12.689+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:40:28.015+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:40:29.549+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:41:17.216+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:41:18.478+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:41:19.254+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	904	1054	662
2012-09-04T16:41:23.016+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:25.929+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	217	1054	662
2012-09-04T16:41:26.451+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:26.454+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:26.586+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:26.588+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:26.749+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:26.750+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:26.833+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:26.834+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:27.202+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:27.204+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:27.303+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:27.305+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:27.459+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:27.461+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:28.100+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:28.609+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:28.610+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:28.739+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:28.741+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:29.057+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:29.059+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:29.626+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:29.628+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Spec_Fragment_Store.html#AnnotationTree%20Iterator	130.133.52.211	-	0	0	180	2276
2012-09-04T16:41:33.148+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	407	1054	662
2012-09-04T16:41:33.532+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Annotation_Tree+_Iterator.html	130.133.52.211	-	0	407	1054	662
2012-09-04T16:41:34.822+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:35.019+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Fragment+_Store.html#getAnnotation	130.133.52.211	-	0	0	180	662
2012-09-04T16:41:36.208+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:41:36.272+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	0	180	789
2012-09-04T16:41:38.761+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:41:39.459+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:41:55.914+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:41:57.119+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:42:05.885+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:42:06.359+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:10.760+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:12.995+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:14.281+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:14.731+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:15.317+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:15.885+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:16.597+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3837	1054	662
2012-09-04T16:43:16.595+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:43:27.070+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3563	1054	662
2012-09-04T16:43:33.396+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2635	1054	662
2012-09-04T16:43:51.201+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:06.326+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:37.173+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:37.915+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:40.476+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:42.537+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:44:42.539+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:44:46.522+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:44:46.524+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:46.604+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:44:47.336+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:47.961+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:48.063+02:00	BLUR	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:48.815+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:49.218+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:49.361+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:49.448+02:00	TYPING-search-ca	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:49.792+02:00	TYPING-search-car	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:49.896+02:00	TYPING-search-carg	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:44:52.597+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	191	180	789
2012-09-04T16:44:52.884+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:44:53.373+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Miscellaneous.html#IntervalAndCargo	130.133.52.211	-	0	0	180	688
2012-09-04T16:44:56.537+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Interval_And_Cargo.html	130.133.52.211	-	0	55	1054	662
2012-09-04T16:44:57.396+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Interval_And_Cargo.html	130.133.52.211	-	0	55	1054	662
2012-09-04T16:44:59.633+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:00.376+02:00	READY	http://docs.seqan.de/seqan/dev/MEMFUNC_Interval_And_Cargo_23_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:00.453+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class.html#	130.133.52.211	-	0	0	180	662
2012-09-04T16:45:06.551+02:00	BLUR	http://docs.seqan.de/seqan/dev/MEMFUNC_Interval_And_Cargo_23_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:17.989+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MEMFUNC_Interval_And_Cargo_23_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:19.464+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Interval_And_Cargo.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:19.506+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Miscellaneous.html#IntervalAndCargo	130.133.52.211	-	0	0	180	688
2012-09-04T16:45:20.360+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:45:20.391+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Fragment+_Store.html#AnnotationStoreElement	130.133.52.211	-	0	84	180	789
2012-09-04T16:45:22.915+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:45:23.646+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:45:29.723+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	156	1054	662
2012-09-04T16:45:45.063+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	103	1054	662
2012-09-04T16:46:26.183+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	137	1054	662
2012-09-04T16:46:38.462+02:00	BLUR	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	137	1054	662
2012-09-04T16:50:39.144+02:00	FOCUS	http://docs.seqan.de/seqan/dev/CLASS_Annotation_Store_Element.html	130.133.52.211	-	0	137	1054	662
2012-09-04T16:50:42.268+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:50:42.309+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Fragment+_Store.html#getAnnotation	130.133.52.211	-	0	0	180	662
2012-09-04T16:50:44.362+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:50:45.003+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:50:46.266+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:51:02.292+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:51:02.953+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:51:30.683+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:51:31.306+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:52:00.769+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:52:02.163+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	2636	1054	662
2012-09-04T16:52:02.160+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:52:07.772+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	7	3949	1054	662
2012-09-04T16:52:09.381+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:11.267+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:32.849+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:42.935+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:47.262+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:47.954+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:54.562+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:55.442+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:56.148+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:58.785+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:52:59.668+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:53:00.865+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:53:02.463+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:53:02.770+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:53:31.327+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	3949	1054	662
2012-09-04T16:53:35.778+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4461	1054	662
2012-09-04T16:53:36.181+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4461	1054	662
2012-09-04T16:53:38.849+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4695	1054	662
2012-09-04T16:53:40.168+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4695	1054	662
2012-09-04T16:53:40.693+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4695	1054	662
2012-09-04T16:53:41.169+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4695	1054	662
2012-09-04T16:53:51.366+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4695	1054	662
2012-09-04T16:53:54.987+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4726	1054	662
2012-09-04T16:53:55.505+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4726	1054	662
2012-09-04T16:53:58.201+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4726	1054	662
2012-09-04T16:54:00.645+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4882	1054	662
2012-09-04T16:54:01.001+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4882	1054	662
2012-09-04T16:54:27.130+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4882	1054	662
2012-09-04T16:54:37.360+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	7216	1054	662
2012-09-04T16:54:42.505+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6214	1054	662
2012-09-04T16:54:48.150+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5594	1054	662
2012-09-04T16:54:53.981+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5303	1054	662
2012-09-04T16:55:01.563+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5303	1054	662
2012-09-04T16:55:02.104+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5303	1054	662
2012-09-04T16:55:02.506+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5303	1054	662
2012-09-04T16:55:03.540+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5303	1054	662
2012-09-04T16:55:06.664+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4997	1054	662
2012-09-04T16:55:07.317+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4997	1054	662
2012-09-04T16:55:09.714+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5091	1054	662
2012-09-04T16:55:10.826+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5091	1054	662
2012-09-04T16:57:02.145+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5091	1054	662
2012-09-04T16:57:09.767+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4905	1054	662
2012-09-04T16:57:12.573+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	4992	1054	662
2012-09-04T16:57:15.096+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:20.769+02:00	LINK-http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:21.282+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:21.628+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Miscellaneous.html#createIntervalTree	130.133.52.211	-	0	0	180	662
2012-09-04T16:57:21.869+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:21.873+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:21.875+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:53.235+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:53.236+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:53.819+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:57:53.822+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:57.314+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:59.428+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:59.915+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:57:59.918+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:01.083+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:01.085+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:02.634+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:02.636+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:02.795+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1054	662
2012-09-04T16:58:02.797+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5128	1054	662
2012-09-04T16:58:07.282+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5123	1054	662
2012-09-04T16:58:09.001+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5123	1054	662
2012-09-04T17:04:27.445+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5123	1054	662
2012-09-04T17:04:28.136+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5123	1054	662
2012-09-04T17:04:30.208+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5123	1054	662
2012-09-04T17:06:26.551+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:26.684+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:31.784+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:32.178+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:33.606+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:35.199+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:38.882+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	5695	1054	662
2012-09-04T17:06:42.115+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6073	1054	662
2012-09-04T17:06:43.711+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6073	1054	662
2012-09-04T17:06:46.409+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6217	1054	662
2012-09-04T17:06:50.350+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6289	1054	662
2012-09-04T17:06:50.771+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6289	1054	662
2012-09-04T17:06:55.652+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6289	1054	662
2012-09-04T17:06:59.936+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6492	1054	662
2012-09-04T17:07:00.138+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6492	1054	662
2012-09-04T17:07:09.059+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6492	1054	662
2012-09-04T17:07:11.245+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6492	1054	662
2012-09-04T17:07:13.720+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6648	1054	662
2012-09-04T17:07:13.800+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6648	1054	662
2012-09-04T17:07:30.173+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6648	1054	662
2012-09-04T17:07:34.092+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6608	1054	662
2012-09-04T17:07:59.276+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6608	1054	662
2012-09-04T17:08:00.144+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6608	1054	662
2012-09-04T17:08:04.428+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6608	1054	662
2012-09-04T17:08:08.937+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6720	1054	662
2012-09-04T17:08:15.099+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6837	1054	662
2012-09-04T17:08:18.594+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6837	1054	662
2012-09-04T17:08:24.505+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6837	1054	662
2012-09-04T17:08:27.223+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6838	1054	662
2012-09-04T17:08:37.160+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	7028	1054	662
2012-09-04T17:08:53.055+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6757	1054	662
2012-09-04T17:08:55.216+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6686	1054	662
2012-09-04T17:09:04.859+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6750	1054	662
2012-09-04T17:09:17.043+02:00	LINK-http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6750	1054	662
2012-09-04T17:09:18.193+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	0	1054	662
2012-09-04T17:09:18.285+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Miscellaneous.html#findIntervals	130.133.52.211	-	0	0	180	662
2012-09-04T17:09:23.078+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6750	1054	662
2012-09-04T17:09:23.082+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	0	1054	662
2012-09-04T17:09:23.084+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:00.882+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:10:05.525+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#no1	130.133.52.211	-	0	6750	1054	662
2012-09-04T17:10:05.522+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:10:10.346+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:11.725+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:16.424+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:16.752+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(counters, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:16.806+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(r, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:16.872+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(re, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:16.983+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(rea, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.080+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(read, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.183+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(reads, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.287+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(reads, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.455+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsP, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.502+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPe, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:18.096+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerG, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:18.176+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerGe, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:18.224+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerGen, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.942+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPer, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:17.646+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPer, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:19.631+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerGene, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:20.218+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:20.019+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:19.823+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerGene, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:20.008+02:00	TYPING-text-= Simple RNA-Seq Tutorial =\n\n[[TOC]]\n\n Learning Objective ::\n  You will learn how to write a simple gene quantification tool based on RNA-Seq data.\n Difficulty ::\n  Hard\n Duration ::\n  2h\n Prerequisites ::\n  [wiki:Tutorial/AnnotationStore] or [wiki:Tutorial/FragmentStore] and optionally experiences with OpenMP.\n\nRNA-Seq refers to high-throughput sequencing of cDNA in order to get information about the RNA molecules available in a sample.\nKnowing the sequence and abundance of mRNA allows to determine the (differential) expression of genes, to detect alternative splicing variants, or to annotate yet unknown genes.\n\nIn the following tutorial you will develop a simple gene quantification tool.\nIt will load a file containing gene annotations and a file with RNA-Seq read alignments, computes abundances, and outputs RPKM values for each expressed gene.\n\nAlbeit its simplicity, this example can be seen as a starting point for more complex applications, e.g. to extend the tool from quantification of genes to the quantification of (alternatively spliced) isoforms, or to de-novo detect yet unannotated isoforms/genes.\n\nYou will learn how to use the seqan:Class.FragmentStore to access gene annotations and alignments and how to use the seqan:Class.IntervalTree to efficiently determine which genes overlap a read alignment.\n\n== Introduction to the used Data Structures ==\n\nThis section introduces the seqan:Class.FragmentStore and the seqan:Class.IntervalTree, which are the fundamental data structures used in this tutorial to represent annotations and read alignments and to efficiently find overlaps between them.\nYou may skip one or both subsections if you are already familiar with one or both data structures.\n\n=== Fragment Store ===\n\nThe seqan:Class.FragmentStore is a data structure specifically designed for read mapping, genome assembly or gene annotation.\nThese tasks typically require lots of data structures that are related to each other like:\n   * reads, mate-pairs, reference genome\n   * pairwise alignments\n   * genome annotation \n\nThe Fragment Store subsumes all these data structures in an easy to use interface.\nIt represents a multiple alignment of millions of reads or mate-pairs against a reference genome consisting of multiple contigs.\nAdditionally, regions of the reference genome can be annotated with features like 'gene', 'mRNA', 'exon', 'intro' or custom features.\nThe Fragment Store supports I/O functionality to read/write a read alignment in [http://samtools.sourceforge.net/ SAM] or [http://www.cbcb.umd.edu/research/contig_representation.shtml AMOS] format and to read/write annotations in [http://genome.ucsc.edu/FAQ/FAQformat.html#format3 GFF]/[http://genome.ucsc.edu/FAQ/FAQformat.html#format4 GTF] format.\n\nThe Fragment Store can be compared with a database where each table (called "store") is implemented as a seqan:Class.String member of the seqan:Class.FragmentStore class.\nThe rows of each table (implemented as structs) are referred by their ids which are their positions in the string and not stored explicitly.\nThe only exception is the alignedReadStore whose elements of type seqan:Class.AlignedReadStoreElement contain an id-member as they may be rearranged in arbitrary order, e.g. by increasing genomic positions or by readId.\nMany stores have an associated name store to store element names.\nEach name store is a seqan:Class.StringSet that stores the element name at the position of its id.\nAll stores are present in the Fragment Store and empty if unused.\nThe concrete types, e.g. the position types or read/contig alphabet, can be easily changed by defining a custom config struct which is a template parameter of the Fragment Store class.\n\n=== Annotation Tree ===\n\nAnnotations are represented as a tree that at least contains a root node where all annotations are children or grandchildren of. \nA typical annotation tree looks as follows:\n\n|| [[Image(source:trunk/seqan/docs2/images/AnnotationTree.png, 400px)]] ||\n|| Annotation tree example ||\n\nIn the Fragment Store the tree is represented by seqan:Memvar.FragmentStore#annotationStore, seqan:Memvar.FragmentStore#annotationTypeStore, seqan:Memvar.FragmentStore#annotationKeyStore, and others.\nInstead of accessing these tables directly, the seqan:"Spec.AnnotationTree Iterator" provides a high-level interface to traverse and access the annotation tree.\n\n=== Interval Tree ===\n\nThe seqan:Class.IntervalTree is a data structure that stores one-dimensional intervals in a balanced tree and efficiently answers [http://en.wikipedia.org/wiki/Range_query range queries].\nA range query is an operation that returns all tree intervals that overlap a given query point or interval.\n\nThe interval tree implementation provided in SeqAn is based on a seqan:Spec.Tree which is balanced if all intervals are given at construction time.\nInterval tree nodes are objects of the seqan:Class.IntervalAndCargo class and consist of 2 interval boundaries and additional user-defined information, called cargo.\nTo construct the tree on a set of given interval nodes use the function seqan:Function.createIntervalTree.\nThe functions seqan:Function.addInterval and seqan:Function.removeInterval should only be used if the interval tree needs to be changed dynamically (as they not yet balance the tree).\n\n== Import Alignments and Gene Annotations from File ==\n\nAt first, our application should create an empty `FragmentStore` object into which we import a gene annotation file and a file with RNA-Seq alignments.\nAn empty `FragmentStore` can simply be created with:\n{{{#!cpp\nFragmentStore<> store;\n}}}\nFiles can be read from disk with the function seqan:Function.read that expects an open stream (e.g. a STL [http://www.cplusplus.com/reference/iostream/ifstream ifstream]), a `FragmentStore`object, and a seqan:"Tag.File Format" tag.\nThe contents of different files can be loaded with subsequent calls of `read`.\nAs we want the user to specify the files via command line, our application will parse them using the seqan:Class.ArgumentParser and store them in an option object. \n\nIn your first assignment you need to complete a given code template and implement a function that loads a SAM file and a GTF file into the `FragmentStore`.\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp genequant_assignment1.cpp] (or unfold more...) and implement the function `loadFiles` to load the annotation and alignment files. Use the file paths given in the options object and report an error if the files could not be opened. \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment1.cpp)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nOpen STL [http://www.cplusplus.com/reference/iostream/ifstream std::ifstream] objects and use the function seqan:Function.read with a SAM or GTF seqan:"Tag.File Format" tag.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\n[http://www.cplusplus.com/reference/iostream/ifstream/open ifstream::open] requires the file path to be given as a C-style string ({{{const char *}}}).\nUse [http://www.cplusplus.com/reference/string/string/c_str string::c_str] to convert the option strings into C-style strings.\nThe function seqan:Function.read expects a stream, a seqan:Class.FragmentStore and a seqan:"Tag.File Format" tag, i.e. `Sam()` or `Gtf()`.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution1.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Extract Gene Intervals ==\n\nNow that the Fragment Store contains the whole annotation tree, we want to traverse the genes and extract the genomic ranges they span.\nIn the annotation tree, genes are (the only) children of the root node.\nTo efficiently retrieve the genes that overlap read alignments later, we want to use interval trees, one for each contig.\nTo construct an interval tree, we first need to collect seqan:Class.IntervalAndCargo objects in a string and pass them to seqan:Function.createIntervalTree.\nSee the [source:trunk/seqan/core/demos/interval_tree.cpp interval tree demo] for more details.\nAs cargo we use the gene's annotation id to later retrieve all gene specific information.\nThe strings of `IntervalAndCargo` objects should be grouped by `contigId` and stored in an (outer) string of strings.\nFor the sake of simplicity we don't differ between genes on the forward or reverse strand and instead always consider the corresponding intervals on the forward strand.\n\nTo define this string of strings of `IntervalAndCargo` objects, we first need to determine the types used to represent an annotation.\nAll annotations are stored in the seqan:Memvar.FragmentStore#annotationStore which is a Fragment Store member and whose type is seqan:Typedef.FragmentStore#TAnnotationStore.\nThe value type of the annotation store is the class seqan:Class.AnnotationStoreElement.\nIts member typedefs seqan:Typedef.AnnotationStoreElement#TPos and seqan:Typedef.AnnotationStoreElement#TId define the types it uses to represent a genomic position or the annotation or contig id:\n{{{#!cpp\ntypedef FragmentStore<> TStore;\ntypedef Value<TStore::TAnnotationStore>::Type TAnnotation;\ntypedef TAnnotation::TId TId;\ntypedef TAnnotation::TId TPos;\ntypedef IntervalAndCargo<TPos, TId> TInterval;\n}}}\nThe string of strings of intervals can now be defined as:\n{{{#!cpp\nString<String<TInterval> > intervals;\n}}}\n\nIn your second assignment you should use an [seqan:"Spec.AnnotationTree Iterator" annotation tree iterator] to traverse all genes in the annotation tree.\nFor each gene, determine its genomic range (projected to the forward strand) and add a new `TInterval` object to the `intervals[contigId]` string, where `contigId` is the id of the contig containing that gene.\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp genequant_assignment2.cpp] or extend your code as shown below (unfold more...). Implement the function `extractGeneIntervals` that should extract genes from the annotation tree (see seqan:"Spec.AnnotationTree Iterator") and create strings of seqan:Class.IntervalAndCargo objects - one for each config - that contains the interval on the forward contig strand and the gene's annotation id.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=yourcode)]]\nExtend the `main` function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment2.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nYou can assume that all genes are children of the root node, i.e. create an seqan:"Spec.AnnotationTree Iterator", [seqan:Function.AnnotationTree#goDown go down] to the first gene and [seqan:Function.AnnotationTree#goRight go right] to visit all other genes.\nUse seqan:Function.getAnnotation to access the gene annotation and seqan:Function.value to get the annotation id.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nMake sure that you append seqan:Class.IntervalAndCargo objects, where `i1` < `i2` holds, as opposed to annotations where `beginPos` > `endPos` is possible.\nRemember to ensure that `intervals` is of appropriate size, e.g. with\n{{{#!cpp\nresize(intervals, length(store.contigStore));\n}}}\nUse seqan:Function.appendValue to add a new `TInverval` object to the inner string, see [seqan:Memfunc.IntervalAndCargo#IntervalAndCargo IntervalAndCargo constructor] for the constructor.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution2.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n\n== Construct Interval Trees ==\n\nWith the strings of gene intervals - one for each contig - we now can construct interval trees.\nTherefore, we specialize an seqan:Class.IntervalTree with the same position and cargo types as used for the seqan:Class.IntervalAndCargo objects.\nAs we need an interval tree for each contig, we instantiate a string of interval trees:\n{{{#!cpp\ntypedef IntervalTree<TPos, TId> TIntervalTree;\nString<TIntervalTree> intervalTrees;\n}}}\n\nYour third assignment is to implement a function that constructs the interval trees for all contigs given the string of interval strings.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp genequant_assignment3.cpp] or extend your code as shown below (unfold more...). Implement the function {{{constructIntervalTrees}}} that uses the interval strings to construct for each contig an interval tree. '''Optional:''' Use OpenMP to parallelize the construction over the contigs, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment3.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize the string of interval trees accordingly:\n{{{#!cpp\nresize(intervalTrees, length(intervals));\n}}}\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nUse the function seqan:Function.createIntervalTree.\n'''Optional:''' Construct the trees in parallel over all contigs with an OpenMP parallel for-loop, see [http://developers.sun.com/solaris/articles/openmp.html here] for more information about OpenMP.\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution3.cpp, fragment=solution)]]\n}}}\n}}}\n\n== Compute Gene Coverage ==\n\nTo determine gene expression levels, we first need to compute the read coverage, i.e. the total number of reads overlapping a gene.\nTherefore we use a string of counters addressed by the annotation id.\n{{{#!cpp\nString<unsigned> readsPerGene;\n}}}\nFor each read alignment we want to determine the overlapping genes by conducting a range query via seqan:Function.findIntervals and then increment their counters by 1.\nTo address the counter of a gene, we use its annotation id stored as cargo in the interval tree.\n\nRead alignments are stored in the seqan:Memvar.FragmentStore#alignedReadStore, a string of seqan:Class.AlignedReadStoreElement objects.\nTheir actual type can simply be determined as follows:\n{{{#!cpp\ntypedef Value<TStore::TAlignedReadStore>::Type TAlignedRead;\n}}}\nGiven the seqan:Memvar.AlignedReadStoreElement#contigId, seqan:Memvar.AlignedReadStoreElement#beginPos, and seqan:Memvar.AlignedReadStoreElement#endPos we will retrieve the annotation ids of overlapping genes from the corresponding interval tree.\n\nYour fourth assignment is to implement the count function that performs all the above described steps.\nOptionally, use OpenMP to parallelize the counting.\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp genequant_assignment4.cpp] or extend your code as shown below (unfold more...). Implement the function `countReadsPerGene` that counts for each gene the number of overlapping reads. Therefore determine for each seqan:Class.AlignedReadStoreElement begin and end positions (on forward strand) of the alignment and increment the `readsPerGene` counter for each overlapping gene. '''Optional:''' Use OpenMP to parallelize the function, see seqan:Macro.SEQAN_OMP_PRAGMA.\n{{{\n#!FoldOut\n----\nExtend the definitions:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=definitions)]]\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main)]]\nand\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment4.cpp, fragment=main2)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nFirst, resize and zero the string of counters accordingly:\n{{{#!cpp\nresize(readsPerGene, length(store.annotationStore), 0);\n}}}\nMake sure that you search with seqan:Function.findIntervals where `query_begin` < `query_end` holds, as opposed to read alignments where `beginPos` > `endPos` is possible.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nThe result of a range query is a string of annotation ids given to seqan:Function.findIntervals by-reference:\n{{{#!cpp\nString<TId> result;\n}}}\nReuse the result string for multiple queries (of the same thread, use `private(result)` for OpenMP).\n\n{{{#!comment \nThe length of the read of the i-th read alignment is:\n{{{#!cpp\nlength(store.readSeqStore[store.alignedReadStore[i].readId])\n}}}\n}}}\n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution4.cpp, fragment=solution)]]\n}}}\n}}}\n\n\n== Output RPKM Values ==\n\nIn the final step, we want to output the gene expression levels in a normalized measure.\nWe therefore use '''RPKM''' values, i.e. the number of '''r'''eads '''p'''er '''k'''ilobase of exon model per '''m'''illion mapped reads (1).\nOne advantage of RPKM values is their independence of the sequencing throughput (normalized by total mapped reads), and that they allow to compare the expression of short with long transcripts (normalized by exon length).\n\nThe exon length of an mRNA is the sum of lengths of all its exons.\nAs a gene may have multiple mRNA, we will simply use the maximum of all their exon lengths.\n\nYour final assignment is to output the RPKM value for genes with a read counter >0.\nTo compute the exon length of the gene (maximal exon length of all mRNA) use an seqan:"Spec.AnnotationTree Iterator" and iterate over all mRNA (children of the gene) and all exons (children of mRNA).\nFor the number of total mapped reads simply use the number of alignments in the seqan:Memvar.FragmentStore#alignedReadStore.\nOutput the gene names and their RPKM values separated by tabs as follows:\n{{{\n#!ShellBox\n#gene name\tRPKM value\nuc009uyv.2\t5932.12\nuc009uyw.1\t10540.1\nuc009uyx.1\t10540.1\nuc009uyy.1\t11631.8\nuc009uyz.1\t15236.3\nuc009uza.1\t11949.4\n}}}\n\nDownload and decompress the attached mouse annotation ([attachment:Mus_musculus.ucsc.MM9.gtf.zip Mus_musculus.ucsc.MM9.gtf.zip]) and the alignment file of RNA-Seq reads aligned to chromosome Y ([attachment:sim40mio_onlyY.sam.zip sim40mio_onlyY.sam.zip]).\nTest your program and compare your output with the 6 RPKM values (see above).\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n\n Type :: Application\n Objective :: Use the code template in [source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp genequant_assignment5.cpp] or extend your code as shown below (unfold more...). Implement the function `outputGeneCoverage` that outputs for each expressed gene the gene name and the expression level as RPKM as tab-separated values.\n{{{\n#!FoldOut\n----\nAdd a function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=yourcode)]]\nExtend the {{{main}}} function:\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_assignment5.cpp, fragment=main)]]\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nTo compute the maximal exon length use three nested loops: (1) enumerate all genes, (2) enumerate all mRNA of the gene, and (3) enumerate all exons of the mRNA and sum up their lengths.\n}}}\n Hint ::\n{{{\n#!FoldOut\n----\nRemember that exons are not the only children of mRNA. \n}}}\n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/seqan/core/demos/tutorial/rnaseq/genequant_solution5.cpp, fragment=solution)]]\n}}}\n}}}\n\n== References ==\n   1. Mortazavi, A., Williams, B., McCue, K., Schaeffer, L., & Wold, B. (2008). ''Mapping and quantifying mammalian transcriptomes by RNA-Seq''. Nature Methods, 5(7), 621–628.\n\n== Next Steps ==\n\n * Read the [wiki:Tutorial/BasicSamBamIO SAM I/O Tutorial] and change your program to stream a SAM file instead of loading it as a whole\n * Change the program such that it attaches the RPKM value as a key-value pair (see seqan:Function.assignValueByKey) to the annotation of each gene and output a GFF file.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Template&type=enhancement submit your comment]	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:23.396+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.175+02:00	TYPING-comment-	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.248+02:00	TYPING-comment-s	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.327+02:00	TYPING-comment-sm	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.408+02:00	TYPING-comment-sma	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.519+02:00	TYPING-comment-smal	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.567+02:00	TYPING-comment-small	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.639+02:00	TYPING-comment-small 	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.695+02:00	TYPING-comment-small f	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:25.743+02:00	TYPING-comment-small fi	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq?action=edit	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:28.648+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	0	1054	662
2012-09-04T17:10:43.529+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4598	1054	662
2012-09-04T17:10:52.106+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	3892	1054	662
2012-09-04T17:10:53.167+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	3892	1054	662
2012-09-04T17:10:56.278+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4687	1054	662
2012-09-04T17:10:57.857+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4750	1054	662
2012-09-04T17:10:58.844+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4750	1054	662
2012-09-04T17:11:03.983+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4588	1054	662
2012-09-04T17:11:11.011+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4512	1054	662
2012-09-04T17:11:13.979+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5053	1054	662
2012-09-04T17:11:16.579+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5096	1054	662
2012-09-04T17:11:17.726+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5246	1054	662
2012-09-04T17:11:18.997+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5246	1054	662
2012-09-04T17:11:19.302+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5246	1054	662
2012-09-04T17:11:33.604+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5293	1054	662
2012-09-04T17:11:39.669+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5427	1054	662
2012-09-04T17:11:46.148+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5827	1054	662
2012-09-04T17:11:48.602+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5344	1054	662
2012-09-04T17:11:50.188+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5344	1054	662
2012-09-04T17:12:19.890+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5344	1054	662
2012-09-04T17:12:32.981+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4511	1054	662
2012-09-04T17:13:05.415+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5155	1054	662
2012-09-04T17:13:19.410+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5623	1054	662
2012-09-04T17:13:24.488+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5717	1054	662
2012-09-04T17:13:29.655+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5192	1054	662
2012-09-04T17:13:42.548+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4971	1054	662
2012-09-04T17:13:44.763+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4971	1054	662
2012-09-04T17:13:45.772+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4971	1054	662
2012-09-04T17:13:52.782+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5273	1054	662
2012-09-04T17:14:19.535+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5448	1054	662
2012-09-04T17:14:20.509+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5448	1054	662
2012-09-04T17:14:22.266+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5448	1054	662
2012-09-04T17:14:25.618+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4545	1054	662
2012-09-04T17:14:30.455+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4545	1054	662
2012-09-04T17:15:41.686+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4545	1054	662
2012-09-04T17:15:45.787+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4769	1054	662
2012-09-04T17:15:48.511+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4861	1054	662
2012-09-04T17:15:52.562+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4473	1054	662
2012-09-04T17:15:58.587+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4473	1054	662
2012-09-04T17:16:20.986+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4473	1054	662
2012-09-04T17:16:21.672+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4473	1054	662
2012-09-04T17:16:58.079+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4473	1054	662
2012-09-04T17:17:01.549+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4227	1054	662
2012-09-04T17:17:03.316+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4227	1054	662
2012-09-04T17:17:03.319+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:05.294+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:07.141+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:08.678+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:11.348+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:14.754+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:38.031+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:38.719+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:39.239+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:39.683+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:40.094+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:41.786+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:46.027+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:17:47.324+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:20.907+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:22.650+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:23.035+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:24.250+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:42.450+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:45.921+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:18:47.210+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:19:50.667+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:19:52.155+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1054	662
2012-09-04T17:19:52.159+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	753	662
2012-09-04T17:19:53.672+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	753	662
2012-09-04T17:19:53.675+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/panel/index.html	130.133.52.211	-	0	0	300	662
2012-09-04T17:19:53.679+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/	130.133.52.211	-	0	0	1054	662
2012-09-04T17:19:54.681+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	753	662
2012-09-04T17:19:54.682+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	4227	1054	662
2012-09-04T17:19:59.934+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5367	1054	662
2012-09-04T17:20:02.351+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:28.946+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:30.747+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:32.071+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:34.490+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:35.238+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:40.304+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1054	662
2012-09-04T17:20:50.979+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5749	1034	645
2012-09-04T17:20:54.131+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5751	1034	645
2012-09-04T17:21:12.081+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5732	1034	645
2012-09-04T17:21:28.049+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:30.050+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:30.733+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:32.379+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:33.182+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:34.442+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:35.526+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:36.593+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:37.171+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	5754	1034	645
2012-09-04T17:21:42.432+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6582	1034	645
2012-09-04T17:21:44.048+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6582	1034	645
2012-09-04T17:21:47.324+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:21:47.394+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:21:52.893+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:21:53.569+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:21:56.866+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:22:00.690+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:22:02.929+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:22:03.921+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6863	1034	645
2012-09-04T17:22:05.865+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6906	1034	645
2012-09-04T17:22:08.285+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6936	1034	645
2012-09-04T17:22:29.820+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	6892	1034	645
2012-09-04T17:22:33.423+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7549	1034	645
2012-09-04T17:22:37.793+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7488	1034	645
2012-09-04T17:22:41.823+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:22:44.614+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:26:51.408+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:26:53.968+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:26:57.256+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:26:58.323+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:27:50.983+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:27:51.928+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:27:58.157+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:27:58.717+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:31:50.042+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:31:50.263+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-04T17:47:56.463+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TYPEDEF_Fragment_Store_23_T_Align_Quality_Store.html	130.133.52.211	-	0	0	733	645
2012-09-04T17:47:56.985+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.create_Interval_Tree.html	130.133.52.211	-	0	0	1034	645
2012-09-04T17:47:57.406+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.get_Annotation.html	130.133.52.211	-	0	0	1034	645
2012-09-04T17:47:57.632+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.find_Intervals.html	130.133.52.211	-	0	29	1034	645
2012-09-04T17:47:57.814+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	130.133.52.211	-	0	7444	1034	645
2012-09-05T12:58:43.204+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T12:58:50.225+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	662
2012-09-05T12:58:50.451+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	662
2012-09-05T12:58:51.172+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	2333	1276	662
2012-09-05T12:58:52.469+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	2333	1276	662
2012-09-05T12:58:54.487+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	0	1276	662
2012-09-05T12:59:01.058+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	3644	1276	662
2012-09-05T12:59:03.511+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	3763	1276	662
2012-09-05T12:59:07.426+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	5438	1276	662
2012-09-05T12:59:10.778+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	5900	1276	662
2012-09-05T12:59:17.713+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq#	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4732	1276	662
2012-09-05T12:59:20.331+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4986	1276	662
2012-09-05T13:01:08.458+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4986	1276	662
2012-09-05T13:04:14.807+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4986	1276	662
2012-09-05T13:04:15.034+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4986	1276	662
2012-09-05T15:00:59.489+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:01.413+02:00	TYPING-proj-search-	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:01.516+02:00	TYPING-proj-search-c	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:01.643+02:00	TYPING-proj-search-co	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:01.834+02:00	TYPING-proj-search-com	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:01.882+02:00	TYPING-proj-search-coma	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.019+02:00	TYPING-proj-search-coman	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.131+02:00	TYPING-proj-search-comand	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.523+02:00	TYPING-proj-search-comandl	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.570+02:00	TYPING-proj-search-comandli	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.667+02:00	TYPING-proj-search-comandlin	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.827+02:00	TYPING-proj-search-comandline	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.882+02:00	TYPING-proj-search-comandlinep	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:02.978+02:00	TYPING-proj-search-comandlinepa	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:03.107+02:00	TYPING-proj-search-comandlinepar	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:03.235+02:00	TYPING-proj-search-comandlinepars	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:03.307+02:00	TYPING-proj-search-comandlineparse	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:03.314+02:00	TYPING-proj-search-comandlineparser	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:04.254+02:00	READY	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:09.452+02:00	TYPING-q-comandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:09.643+02:00	TYPING-q-comandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:09.691+02:00	TYPING-q-commandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:10.739+02:00	READY	http://trac.seqan.de/search?milestone=on&ticket=on&q=commandlineparser&wiki=on&changeset=on&noquickjump=1	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:15.514+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:15.749+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:19.360+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:19.368+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping#Task1:UsetheCommandLineParser	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:21.374+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping#Task1:UsetheCommandLineParser	87.77.216.245	-	0	2491	1276	662
2012-09-05T15:01:26.578+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping#Task1:UsetheCommandLineParser	87.77.216.245	-	0	2491	1276	662
2012-09-05T15:01:33.115+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping#Task1:UsetheCommandLineParser	87.77.216.245	-	0	2719	1276	662
2012-09-05T15:01:39.669+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SimpleReadMapping	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:43.373+02:00	READY	http://trac.seqan.de/search?milestone=on&ticket=on&q=commandlineparser&wiki=on&changeset=on&noquickjump=1	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:48.443+02:00	READY	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:49.198+02:00	TYPING-q-comandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:49.334+02:00	BLUR	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:51.382+02:00	FOCUS	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:51.669+02:00	TYPING-q-comandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:51.812+02:00	BLUR	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:52.671+02:00	FOCUS	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:52.797+02:00	TYPING-q-comandlineparser	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:52.933+02:00	BLUR	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:55.050+02:00	READY	http://docs.seqan.de/seqan/dev2/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:55.150+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:01:55.352+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	975	662
2012-09-05T15:01:55.386+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:55.549+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:55.588+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:55.798+02:00	TYPING-search-co	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:55.904+02:00	TYPING-search-com	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:55.982+02:00	TYPING-search-comm	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.081+02:00	TYPING-search-comma	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.099+02:00	TYPING-search-comman	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.198+02:00	TYPING-search-command	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.333+02:00	TYPING-search-commandl	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.365+02:00	TYPING-search-commandli	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.428+02:00	TYPING-search-commandlin	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.837+02:00	TYPING-search-commandline	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:56.860+02:00	TYPING-search-commandline	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:57.116+02:00	TYPING-search-commandline	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:57.620+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:57.717+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:59.065+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:01:59.910+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.045+02:00	TYPING-search-co	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.172+02:00	TYPING-search-com	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.229+02:00	TYPING-search-comm	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.306+02:00	TYPING-search-comma	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.390+02:00	TYPING-search-comman	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:00.861+02:00	TYPING-search-command	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:16.729+02:00	TYPING-search-commandl	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:16.833+02:00	TYPING-search-command	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:17.018+02:00	TYPING-search-comman	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:21.322+02:00	TYPING-search-comma	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:21.473+02:00	TYPING-search-comm	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:21.620+02:00	TYPING-search-com	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:21.744+02:00	TYPING-search-co	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:21.874+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:22.002+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:22.161+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:22.253+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:22.319+02:00	TYPING-search-cm	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:22.423+02:00	TYPING-search-cmd	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:24.617+02:00	TYPING-search-cmdp	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:25.530+02:00	TYPING-search-cmd	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:25.674+02:00	TYPING-search-cm	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:25.802+02:00	TYPING-search-c	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:25.929+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:50.906+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:02:51.820+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:03:58.388+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:08:31.949+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	662
2012-09-05T15:08:32.082+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/	87.77.216.245	-	0	0	1276	662
2012-09-05T15:08:32.103+02:00	FOCUS	http://trac.seqan.de/search?q=comandlineparser	87.77.216.245	-	0	0	1276	662
2012-09-05T15:08:33.001+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SimpleRnaSeq	87.77.216.245	-	0	4986	1276	662
2012-09-05T23:40:16.923+02:00	READY	http://docs.seqan.de/seqan/dev2/	93.219.59.250	-	0	0	1276	706
2012-09-05T23:40:17.210+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:17.228+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:40:17.748+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:17.894+02:00	TYPING-search-g	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:17.942+02:00	TYPING-search-ge	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:18.453+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:18.790+02:00	TYPING-search-getu	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:18.891+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:19.021+02:00	TYPING-search-getq	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:19.053+02:00	TYPING-search-getqu	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:20.824+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:40:24.143+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	93.219.59.250	-	0	32	975	706
2012-09-05T23:40:26.380+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Quality_Value.html	93.219.59.250	-	0	42	975	706
2012-09-05T23:40:27.902+02:00	TYPING-search-getqua	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:27.941+02:00	TYPING-search-getqua	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:30.879+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.59.250	-	0	0	300	706
2012-09-05T23:40:31.083+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:40:39.250+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:58:45.956+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:58:46.129+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:58:52.323+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:58:53.128+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:59:00.121+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-05T23:59:00.828+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.59.250	-	0	0	975	706
2012-09-06T07:39:25.553+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.assign_Quality_Value.html	93.219.61.86	-	0	0	975	706
2012-09-06T07:54:09.214+02:00	READY	http://docs.seqan.de/seqan/dev2/	93.219.61.86	-	0	0	1276	706
2012-09-06T07:54:09.312+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:09.364+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	93.219.61.86	-	0	0	975	706
2012-09-06T07:54:09.601+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:09.736+02:00	TYPING-search-s	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:09.800+02:00	TYPING-search-se	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:10.686+02:00	TYPING-search-seq	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:10.804+02:00	TYPING-search-seqe	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:10.878+02:00	TYPING-search-seqen	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:10.934+02:00	TYPING-search-seqenc	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:11.118+02:00	TYPING-search-seqence	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:11.846+02:00	TYPING-search-seqences	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.198+02:00	TYPING-search-seqencest	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.245+02:00	TYPING-search-seqencestr	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.350+02:00	TYPING-search-seqencestre	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.446+02:00	TYPING-search-seqencestrea	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.702+02:00	TYPING-search-seqencestream	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:12.919+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Sequence_Stream_23write_All.html	93.219.61.86	-	0	0	975	706
2012-09-06T07:54:15.949+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Sequence_Stream.html	93.219.61.86	-	0	0	975	706
2012-09-06T07:54:22.479+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Sequence_Stream.html	93.219.61.86	-	0	1121	975	706
2012-09-06T07:54:32.099+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Sequence_Stream.html	93.219.61.86	-	0	1099	975	706
2012-09-06T07:54:33.824+02:00	TYPING-search-seqencestream	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:33.942+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:35.497+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:36.815+02:00	TYPING-search-seqencestream	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:54:36.951+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:56:41.919+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:56:42.444+02:00	TYPING-search-seqencestream	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:56:43.412+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:59:40.073+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:59:40.196+02:00	TYPING-search-seqencestream	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T07:59:40.267+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T08:38:40.756+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T08:38:41.657+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T08:38:41.660+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Sequence_Stream.html	93.219.61.86	-	0	1099	975	706
2012-09-06T13:47:46.434+02:00	READY	http://docs.seqan.de/seqan/dev2/	87.77.216.245	-	0	0	1276	706
2012-09-06T13:47:46.462+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:46.488+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	975	706
2012-09-06T13:47:46.902+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:46.955+02:00	TYPING-search-s	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:47.043+02:00	TYPING-search-sa	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:47.190+02:00	TYPING-search-sam	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:47.306+02:00	TYPING-search-samt	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:49.330+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Is_Same_Type.html	87.77.216.245	-	0	0	975	706
2012-09-06T13:47:56.956+02:00	TYPING-search-samty	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:57.143+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:47:59.063+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	975	706
2012-09-06T13:47:59.085+02:00	READY	http://docs.seqan.de/seqan/dev2/	87.77.216.245	-	0	0	1276	706
2012-09-06T13:47:59.101+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:00.140+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:00.147+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:00.228+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:00.230+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:03.014+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:03.015+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:04.012+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:04.075+02:00	TYPING-search-v	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:04.188+02:00	TYPING-search-va	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:04.427+02:00	TYPING-search-val	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:05.340+02:00	TYPING-search-vale	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:05.580+02:00	TYPING-search-val	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:05.612+02:00	TYPING-search-valu	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.195+02:00	TYPING-search-value	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.341+02:00	TYPING-search-valu	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.477+02:00	TYPING-search-val	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.627+02:00	TYPING-search-va	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.771+02:00	TYPING-search-v	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:06.916+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:07.539+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:09.767+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:37.424+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:38.467+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:38.683+02:00	TYPING-search-b	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:38.834+02:00	TYPING-search-bl	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:38.910+02:00	TYPING-search-blo	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:39.031+02:00	TYPING-search-bloc	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:39.082+02:00	TYPING-search-block	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:39.386+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:39.547+02:00	TYPING-search-blocksi	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:39.923+02:00	TYPING-search-blocksie	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.203+02:00	TYPING-search-blocksi	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.538+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.553+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.643+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.730+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.851+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:40.949+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:47.402+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:47.954+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.020+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.307+02:00	TYPING-search-blocks	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.467+02:00	TYPING-search-b	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.602+02:00	TYPING-search-bl	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.718+02:00	TYPING-search-blo	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:48.737+02:00	TYPING-search-bloc	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:50.090+02:00	TYPING-search-block	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:50.154+02:00	TYPING-search-block	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:50.219+02:00	TYPING-search-block	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:50.346+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:48:50.495+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T13:50:27.502+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	706
2012-09-06T15:17:04.508+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T15:19:15.613+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T15:19:16.128+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-06T15:19:16.211+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/	93.219.61.86	-	0	0	1276	706
2012-09-06T15:19:16.296+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.61.86	-	0	0	300	706
2012-09-10T14:02:50.569+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	1271	706
2012-09-10T14:02:53.706+02:00	BLUR	http://trac.seqan.de/	188.40.166.99	-	0	0	1271	706
2012-09-10T14:02:54.453+02:00	FOCUS	http://trac.seqan.de/	188.40.166.99	-	0	0	1271	706
2012-09-10T14:02:55.615+02:00	BLUR	http://trac.seqan.de/	188.40.166.99	-	0	0	1271	706
2012-09-10T14:14:55.049+02:00	FOCUS	http://trac.seqan.de/	188.40.166.99	-	0	0	1271	706
2012-09-10T14:14:58.276+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:04.849+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	188.40.166.99	-	0	76	1271	706
2012-09-10T14:15:09.524+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	188.40.166.99	-	0	1126	1271	706
2012-09-10T14:15:10.995+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	188.40.166.99	-	0	2189	1271	706
2012-09-10T14:15:12.389+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	188.40.166.99	-	0	2189	1271	706
2012-09-10T14:15:14.579+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	188.40.166.99	-	0	1235	1271	706
2012-09-10T14:15:21.505+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	188.40.166.99	-	0	2313	1271	706
2012-09-10T14:15:42.351+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:52.262+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	267	1271	706
2012-09-10T14:15:56.014+02:00	TYPING-proj-search-	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:56.081+02:00	TYPING-proj-search-d	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:56.097+02:00	TYPING-proj-search-de	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:56.142+02:00	TYPING-proj-search-deb	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:56.277+02:00	TYPING-proj-search-debu	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:56.744+02:00	TYPING-proj-search-debug	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:56.870+02:00	TYPING-proj-search-debu	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:57.007+02:00	TYPING-proj-search-deb	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:57.085+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:57.134+02:00	TYPING-proj-search-de	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:57.278+02:00	TYPING-proj-search-d	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:57.359+02:00	TYPING-proj-search-	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:57.423+02:00	TYPING-proj-search-r	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:57.695+02:00	TYPING-proj-search-re	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:57.735+02:00	TYPING-proj-search-rel	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:57.846+02:00	TYPING-proj-search-rele	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:57.950+02:00	TYPING-proj-search-relea	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:58.119+02:00	TYPING-proj-search-releas	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:58.231+02:00	TYPING-proj-search-release	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:59.511+02:00	TYPING-proj-search-release 	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:59.590+02:00	TYPING-proj-search-release de	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:59.582+02:00	TYPING-proj-search-release d	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:59.671+02:00	TYPING-proj-search-release deb	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:59.751+02:00	TYPING-proj-search-release debu	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:15:59.832+02:00	TYPING-proj-search-release debug	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:01.385+02:00	READY	http://trac.seqan.de/search?q=release+debug	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:06.273+02:00	READY	http://trac.seqan.de/search?q=release+debug&wiki=on&noquickjump=1	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:09.129+02:00	SCROLL	http://trac.seqan.de/search?q=release+debug&wiki=on&noquickjump=1	188.40.166.99	-	0	301	1271	706
2012-09-10T14:16:10.531+02:00	TYPING-q-release debug	http://trac.seqan.de/search?q=release+debug&wiki=on&noquickjump=1	188.40.166.99	-	0	301	1271	706
2012-09-10T14:16:10.644+02:00	TYPING-q-release debug	http://trac.seqan.de/search?q=release+debug&wiki=on&noquickjump=1	188.40.166.99	-	0	301	1271	706
2012-09-10T14:16:10.649+02:00	BLUR	http://trac.seqan.de/search?q=release+debug&wiki=on&noquickjump=1	188.40.166.99	-	0	301	1271	706
2012-09-10T14:16:11.213+02:00	BLUR	http://trac.seqan.de/search?q=release+debug&wiki=on&noquickjump=1	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:11.309+02:00	BLUR	http://trac.seqan.de/search?q=release+debug&wiki=on&noquickjump=1	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:13.011+02:00	SCROLL	http://trac.seqan.de/search?q=release+debug&wiki=on&noquickjump=1	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:19.140+02:00	SCROLL	http://trac.seqan.de/search?q=release+debug&wiki=on&noquickjump=1	188.40.166.99	-	0	426	1271	706
2012-09-10T14:16:20.244+02:00	FOCUS	http://trac.seqan.de/search?q=release+debug&wiki=on&noquickjump=1	188.40.166.99	-	0	426	1271	706
2012-09-10T14:16:21.191+02:00	READY	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:21.526+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:25.229+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	3322	1271	706
2012-09-10T14:16:27.237+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:29.973+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:30.630+02:00	READY	http://trac.seqan.de/wiki	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:32.062+02:00	READY	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:32.125+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:33.961+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	2461	1271	706
2012-09-10T14:16:34.280+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	2461	1271	706
2012-09-10T14:16:34.452+02:00	SCROLL	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	2461	1271	706
2012-09-10T14:16:36.259+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	2461	1271	706
2012-09-10T14:16:38.268+02:00	SCROLL	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:38.342+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:38.694+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:39.462+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	0	1271	706
2012-09-10T14:16:39.982+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	0	1271	706
2012-09-10T14:17:10.344+02:00	SCROLL	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	75	1271	706
2012-09-10T14:17:22.085+02:00	SCROLL	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	287	1271	706
2012-09-10T14:17:32.591+02:00	SCROLL	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	2278	1271	706
2012-09-10T14:20:15.042+02:00	SCROLL	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	0	1271	706
2012-09-10T14:20:17.561+02:00	SCROLL	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	381	1271	706
2012-09-10T14:20:19.228+02:00	FOCUS	http://trac.seqan.de/wiki/TitleIndex	188.40.166.99	-	0	381	1271	706
2012-09-10T14:20:20.608+02:00	READY	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:20:24.123+02:00	SCROLL	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	586	1271	706
2012-09-10T14:20:37.317+02:00	READY	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	892	1271	706
2012-09-10T14:20:42.626+02:00	BLUR	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:20:43.949+02:00	SCROLL	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:21:44.770+02:00	FOCUS	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:21:45.287+02:00	BLUR	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:25:02.766+02:00	FOCUS	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:25:11.018+02:00	SCROLL	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	367	1271	706
2012-09-10T14:25:14.454+02:00	BLUR	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	367	1271	706
2012-09-10T14:25:16.624+02:00	FOCUS	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	367	1271	706
2012-09-10T14:25:19.251+02:00	SCROLL	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	385	1271	706
2012-09-10T14:25:19.281+02:00	BLUR	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	385	1271	706
2012-09-10T14:25:19.778+02:00	FOCUS	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	385	1271	706
2012-09-10T14:25:20.581+02:00	BLUR	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	385	1271	706
2012-09-10T14:27:27.871+02:00	FOCUS	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	385	1271	706
2012-09-10T14:27:29.469+02:00	BLUR	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	385	1271	706
2012-09-10T14:27:33.853+02:00	FOCUS	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	385	1271	706
2012-09-10T14:27:36.974+02:00	TYPING-proj-search-	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:37.008+02:00	TYPING-proj-search-	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:37.661+02:00	TYPING-proj-search--DCMAKE_BUILD_TYPE	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:37.726+02:00	TYPING-proj-search--DCMAKE_BUILD_TYPE	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:37.828+02:00	SCROLL	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:38.137+02:00	TYPING-proj-search--DCMAKE_BUILD_TYPE	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:38.174+02:00	TYPING-proj-search-DCMAKE_BUILD_TYPE	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:38.759+02:00	TYPING-proj-search-CMAKE_BUILD_TYPE	http://trac.seqan.de/wiki/Infrastructure/BuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:40.136+02:00	READY	http://trac.seqan.de/search?q=CMAKE_BUILD_TYPE	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:44.358+02:00	READY	http://trac.seqan.de/search?q=CMAKE_BUILD_TYPE&wiki=on&noquickjump=1	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:49.386+02:00	SCROLL	http://trac.seqan.de/search?q=CMAKE_BUILD_TYPE&wiki=on&noquickjump=1	188.40.166.99	-	0	84	1271	706
2012-09-10T14:27:52.716+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	0	1271	706
2012-09-10T14:27:58.002+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	1707	1271	706
2012-09-10T14:27:58.902+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	986	1271	706
2012-09-10T14:27:59.222+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	986	1271	706
2012-09-10T14:27:59.385+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	986	1271	706
2012-09-10T14:28:00.112+02:00	READY	http://trac.seqan.de/search?q=CMAKE_BUILD_TYPE&wiki=on&noquickjump=1	188.40.166.99	-	0	84	1271	706
2012-09-10T14:28:04.176+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStartedOutdated	188.40.166.99	-	0	0	1271	706
2012-09-10T14:28:04.691+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/GettingStartedOutdated#	http://trac.seqan.de/wiki/Tutorial/GettingStartedOutdated	188.40.166.99	-	0	0	1271	706
2012-09-10T14:28:05.551+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/GettingStartedOutdated#	http://trac.seqan.de/wiki/Tutorial/GettingStartedOutdated	188.40.166.99	-	0	0	1271	706
2012-09-10T14:28:07.778+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/GettingStartedOutdated#	http://trac.seqan.de/wiki/Tutorial/GettingStartedOutdated	188.40.166.99	-	0	0	1271	706
2012-09-10T14:28:08.138+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStartedOutdated	188.40.166.99	-	0	0	1271	706
2012-09-10T14:28:12.735+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStartedOutdated	188.40.166.99	-	0	17235	1271	706
2012-09-10T14:28:15.548+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStartedOutdated	188.40.166.99	-	0	17235	1271	706
2012-09-10T14:28:24.541+02:00	READY	http://trac.seqan.de/search?q=CMAKE_BUILD_TYPE&wiki=on&noquickjump=1	188.40.166.99	-	0	84	1271	706
2012-09-10T14:28:24.837+02:00	TYPING-q-CMAKE_BUILD_TYPE	http://trac.seqan.de/search?q=CMAKE_BUILD_TYPE&wiki=on&noquickjump=1	188.40.166.99	-	0	84	1271	706
2012-09-10T14:28:24.909+02:00	TYPING-q-CMAKE_BUILD_TYPE	http://trac.seqan.de/search?q=CMAKE_BUILD_TYPE&wiki=on&noquickjump=1	188.40.166.99	-	0	84	1271	706
2012-09-10T14:28:25.870+02:00	TYPING-q-RelWithDebInfo	http://trac.seqan.de/search?q=CMAKE_BUILD_TYPE&wiki=on&noquickjump=1	188.40.166.99	-	0	84	1271	706
2012-09-10T14:28:27.168+02:00	READY	http://trac.seqan.de/search?q=RelWithDebInfo&wiki=on&noquickjump=1	188.40.166.99	-	0	0	1271	706
2012-09-10T14:28:32.556+02:00	READY	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:28:32.807+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:28:34.964+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:28:36.628+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:28:40.297+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:35:05.441+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:35:06.253+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:36:42.987+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:36:43.140+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:38:46.972+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:38:46.973+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:39:11.400+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:39:11.401+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:47:29.410+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:47:29.411+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:47:33.402+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:47:44.519+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:51:18.091+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:51:18.262+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:55:10.167+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:55:10.177+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	1447	1271	706
2012-09-10T14:55:12.892+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:13.842+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:14.305+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:15.413+02:00	TYPING-proj-search-	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:15.582+02:00	TYPING-proj-search-a	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:15.717+02:00	TYPING-proj-search-as	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:15.861+02:00	TYPING-proj-search-ass	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:15.925+02:00	TYPING-proj-search-asse	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:16.036+02:00	TYPING-proj-search-asser	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:16.126+02:00	TYPING-proj-search-assert	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:16.205+02:00	TYPING-proj-search-asserti	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:16.237+02:00	TYPING-proj-search-assertio	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:16.349+02:00	TYPING-proj-search-assertion	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:16.429+02:00	TYPING-proj-search-assertions	http://trac.seqan.de/wiki/HowTo/UseParallelBuildDirectories	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:17.594+02:00	READY	http://trac.seqan.de/search?q=assertions	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:23.866+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:23.848+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:25.473+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	763	1271	706
2012-09-10T14:55:26.371+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	188.40.166.99	-	0	763	1271	706
2012-09-10T14:55:27.911+02:00	READY	http://trac.seqan.de/search?q=assertions	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:31.457+02:00	READY	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:31.566+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:55:34.126+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	623	1271	706
2012-09-10T14:55:36.863+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	1314	1271	706
2012-09-10T14:55:51.912+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	2468	1271	706
2012-09-10T14:56:06.916+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	4481	1271	706
2012-09-10T14:56:16.763+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	4481	1271	706
2012-09-10T14:56:20.452+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	1314	1271	706
2012-09-10T14:56:20.721+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	1314	1271	706
2012-09-10T14:56:27.621+02:00	TYPING-proj-search-	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:56:27.654+02:00	TYPING-proj-search-	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:56:27.934+02:00	TYPING-proj-search-SEQAN_ENABLE_DEBUG	http://trac.seqan.de/wiki/HowTo/UseYourOwnBuildSystem	188.40.166.99	-	0	0	1271	706
2012-09-10T14:56:29.024+02:00	READY	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T14:56:41.807+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T14:56:43.457+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T14:56:44.211+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T14:57:49.359+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T14:58:00.975+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T14:59:30.759+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T14:59:44.120+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T14:59:44.678+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T14:59:46.028+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:04:14.818+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:04:15.988+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:04:17.340+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:04:17.876+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:04:18.263+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:04:18.615+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:05:19.895+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:05:20.058+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:05:31.673+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:05:32.289+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:07:07.652+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:07:08.253+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:09:31.512+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:09:31.575+02:00	BLUR	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T15:21:05.897+02:00	FOCUS	http://trac.seqan.de/search?q=SEQAN_ENABLE_DEBUG	188.40.166.99	-	0	0	1271	706
2012-09-10T16:20:55.465+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1323	1157
2012-09-10T16:20:55.483+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:20:55.636+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:20:56.940+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:20:57.309+02:00	TYPING-search-s	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:20:57.479+02:00	TYPING-search-so	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:20:57.524+02:00	TYPING-search-sou	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:20:57.704+02:00	TYPING-search-sour	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:20:57.749+02:00	TYPING-search-sourc	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:20:57.883+02:00	TYPING-search-source	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:20:57.929+02:00	TYPING-search-source	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:20:58.559+02:00	TYPING-search-source(	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:21:00.116+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.source.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:21:07.208+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Source.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:21:09.416+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.source.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:21:12.750+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:23:38.642+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:23:41.014+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:23:41.017+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.source.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:23:41.687+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:23:44.469+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	662	1022	1157
2012-09-10T16:23:49.690+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:24:44.951+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:24:45.631+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:24:46.433+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:25:14.971+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:25:15.012+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:26:58.811+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:26:59.600+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:28:19.882+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:28:20.021+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:29:50.700+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:29:52.997+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:29:54.579+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:30:48.726+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:30:49.262+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:34:25.623+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:34:26.140+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:34:38.774+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:34:39.251+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:34:54.095+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:34:54.285+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:46:26.546+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:46:27.182+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	981	1022	1157
2012-09-10T16:47:55.916+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1323	1157
2012-09-10T16:47:56.095+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1323	1157
2012-09-10T16:47:56.395+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:47:56.412+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:47:57.281+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:47:57.348+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:47:57.421+02:00	TYPING-search-R	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:47:57.493+02:00	TYPING-search-Ro	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:47:59.640+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:48:27.459+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:48:30.864+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:48:32.157+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1157
2012-09-10T16:48:32.159+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Row.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:48:32.544+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Align.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:48:44.383+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1022	1157
2012-09-10T16:48:48.958+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	772	1022	1157
2012-09-10T16:48:49.114+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	772	1022	1157
2012-09-10T16:52:13.624+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	772	1022	1157
2012-09-10T16:52:14.348+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	772	1022	1157
2012-09-10T17:22:37.430+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	772	1346	1037
2012-09-10T17:22:38.948+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1037
2012-09-10T17:22:38.950+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1346	1037
2012-09-10T17:22:38.951+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1647	1037
2012-09-10T17:22:40.271+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1346	1037
2012-09-10T17:23:03.218+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	1183	1346	1037
2012-09-10T17:23:06.429+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Gaps.html	188.40.166.99	-	0	0	1346	1037
2012-09-10T17:23:56.202+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1647	1037
2012-09-10T17:23:56.748+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1346	1037
2012-09-10T17:23:57.098+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1037
2012-09-10T17:23:57.763+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1037
2012-09-10T17:23:56.853+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1037
2012-09-10T17:29:00.116+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1037
2012-09-10T17:29:00.161+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1037
2012-09-10T18:19:32.866+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1647	1037
2012-09-11T13:29:42.139+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1347	1278
2012-09-11T13:29:42.720+02:00	BLUR	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1347	1278
2012-09-11T13:29:42.740+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1046	1278
2012-09-11T13:29:42.903+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:29:43.751+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:29:43.840+02:00	TYPING-search-t	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:29:44.043+02:00	TYPING-search-to	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:29:44.089+02:00	TYPING-search-tov	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:29:44.188+02:00	TYPING-search-tovi	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:29:44.329+02:00	TYPING-search-tovie	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:29:44.458+02:00	TYPING-search-toview	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:29:45.980+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.to_View_Position.html	188.40.166.99	-	0	0	1046	1278
2012-09-11T13:29:47.760+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:30:06.759+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:30:13.654+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:34:07.974+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:34:08.614+02:00	TYPING-search-toviewp	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:34:08.706+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1278
2012-09-11T13:58:49.634+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/files/FUNCTION.to_View_Position.html	188.40.166.99	-	0	0	1046	706
2012-09-11T13:58:49.636+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	706
2012-09-11T13:58:49.638+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1347	706
2012-09-24T15:22:59.999+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:00.022+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1328	1342
2012-09-24T15:23:00.287+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1629	1342
2012-09-24T15:23:01.756+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:01.905+02:00	TYPING-search-b	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:01.922+02:00	TYPING-search-bi	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:02.452+02:00	TYPING-search-bin	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:02.509+02:00	TYPING-search-bina	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:02.573+02:00	TYPING-search-binar	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:03.071+02:00	TYPING-search-binary	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:04.073+02:00	TYPING-search-binarys	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:05.603+02:00	TYPING-search-binary	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:05.625+02:00	TYPING-search-binary	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:05.816+02:00	TYPING-search-binary	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:06.254+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:06.412+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:26.817+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:27.169+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:27.346+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:49.327+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:49.725+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:50.276+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:23:50.405+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:28:37.609+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:28:53.916+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:28:55.064+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:28:56.470+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:28:57.291+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:28:57.922+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:28:58.110+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:29:00.573+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:29:01.566+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:29:01.695+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:29:17.491+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:29:19.184+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:29:19.194+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:29:23.740+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:29:24.026+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1342
2012-09-24T15:29:24.028+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1328	1342
2012-09-24T15:29:26.361+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1328	1342
2012-09-24T15:29:38.333+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1328	1342
2012-09-24T15:29:38.682+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1328	1342
2012-09-24T15:38:38.700+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:38:39.701+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:38:40.226+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:38:40.228+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-09-24T15:38:40.230+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1611	1346
2012-09-24T15:38:40.878+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:38:42.163+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:38:42.893+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:38:42.951+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:41:25.375+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:41:26.920+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:41:36.996+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:41:37.075+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:41:46.620+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:41:47.416+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:42:25.973+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:42:29.267+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:44:11.354+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:44:11.937+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1310	1346
2012-09-24T15:48:08.560+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T15:48:09.976+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T15:48:10.062+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1652	1346
2012-09-24T15:48:10.064+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T15:48:25.256+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T15:48:25.698+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T16:01:29.465+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T16:01:30.678+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T16:01:32.877+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T16:01:37.819+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T16:01:56.469+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T16:01:56.661+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-09-24T16:30:49.046+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1351	1346
2012-10-10T16:33:57.588+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1530	1258
2012-10-10T16:33:57.606+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	1229	1258
2012-10-10T16:33:58.071+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:33:58.927+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:33:58.992+02:00	TYPING-search-g	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:33:59.125+02:00	TYPING-search-gl	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:33:59.252+02:00	TYPING-search-glo	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:33:59.297+02:00	TYPING-search-glob	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:33:59.421+02:00	TYPING-search-globa	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:33:59.465+02:00	TYPING-search-global	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:33:59.513+02:00	TYPING-search-global	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:33:59.611+02:00	TYPING-search-globalA	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:33:59.768+02:00	TYPING-search-globalAl	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:34:00.908+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.global_Alignment.html	188.40.166.99	-	0	0	1229	1258
2012-10-10T16:34:06.826+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1258
2012-10-10T16:34:06.829+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.global_Alignment.html	188.40.166.99	-	0	0	1229	1258
2012-10-10T16:34:08.074+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.global_Alignment.html	188.40.166.99	-	0	0	1229	1258
2012-10-10T16:34:15.789+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	0	1229	1258
2012-10-10T16:34:24.696+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	665	1229	1258
2012-10-10T16:34:28.240+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.build_Alignment_Graph.html	188.40.166.99	-	0	0	1229	1258
2012-10-10T16:34:43.803+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	665	1229	1258
2012-10-10T16:34:51.463+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:34:54.051+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:41:16.765+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:41:16.868+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:41:18.480+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:41:19.376+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:43:37.022+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:43:37.077+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:44:07.412+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:44:09.710+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:44:20.634+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:44:23.169+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:44:24.747+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:44:26.711+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:45:50.825+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:45:52.824+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:45:57.603+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:45:58.536+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:59:05.462+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:59:06.584+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-10T16:59:09.452+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Alignment+_Graph.html	188.40.166.99	-	0	1792	1229	1258
2012-10-11T10:49:58.022+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	188.40.166.99	-	0	0	873	1346
2012-10-11T10:49:58.121+02:00	READY	http://docs.seqan.de/seqan/dev2/	188.40.166.99	-	0	0	1174	1346
2012-10-11T10:49:58.200+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:00.704+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:00.782+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:01.018+02:00	TYPING-search-S	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:01.321+02:00	TYPING-search-Sc	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:02.210+02:00	TYPING-search-S	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:02.266+02:00	TYPING-search-Si	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:02.401+02:00	TYPING-search-Sim	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:02.435+02:00	TYPING-search-Simp	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:02.506+02:00	TYPING-search-Simpl	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:02.591+02:00	TYPING-search-Simple	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:02.694+02:00	TYPING-search-Simple	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:02.806+02:00	TYPING-search-SimpleS	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:02.963+02:00	TYPING-search-SimpleSc	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:02.998+02:00	TYPING-search-SimpleSco	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:03.056+02:00	TYPING-search-SimpleScor	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:04.317+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Simple_Score.html	188.40.166.99	-	0	0	873	1346
2012-10-11T10:50:06.218+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	188.40.166.99	-	0	0	300	1346
2012-10-11T10:50:06.222+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SHORTCUT_Simple_Score.html	188.40.166.99	-	0	0	873	1346
2012-10-11T10:50:06.579+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Simple+_Score.html	188.40.166.99	-	0	0	873	1346
2012-10-11T10:50:10.355+02:00	READY	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Score_23_Score.html	188.40.166.99	-	0	0	873	1346
2012-10-11T10:50:17.004+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Score_23_Score.html	188.40.166.99	-	0	0	873	1346
2012-10-11T10:50:37.301+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Score_23_Score.html	188.40.166.99	-	0	0	873	1346
2012-10-11T10:50:38.173+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Score_23_Score.html	188.40.166.99	-	0	0	873	1346
2012-10-11T11:21:29.635+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Score_23_Score.html	188.40.166.99	-	0	0	873	1346
2012-10-11T11:21:33.478+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Score_23_Score.html	188.40.166.99	-	0	0	873	1346
2012-10-11T11:21:33.925+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Score_23_Score.html	188.40.166.99	-	0	0	873	1346
2012-10-22T16:06:13.669+02:00	READY	http://trac.seqan.de/	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:18.676+02:00	TYPING-proj-search-	http://trac.seqan.de/	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:18.810+02:00	TYPING-proj-search-a	http://trac.seqan.de/	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:18.946+02:00	TYPING-proj-search-as	http://trac.seqan.de/	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:19.092+02:00	TYPING-proj-search-ass	http://trac.seqan.de/	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:19.137+02:00	TYPING-proj-search-asse	http://trac.seqan.de/	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:19.271+02:00	TYPING-proj-search-asser	http://trac.seqan.de/	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:19.351+02:00	TYPING-proj-search-assert	http://trac.seqan.de/	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:20.900+02:00	READY	http://trac.seqan.de/search?q=assert	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:26.080+02:00	READY	http://trac.seqan.de/search?q=assert&wiki=on&noquickjump=1	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:38.043+02:00	READY	http://trac.seqan.de/wiki/HowTo/WriteTests	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:41.778+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/WriteTests	188.40.166.99	-	0	315	1280	1281
2012-10-22T16:06:43.439+02:00	READY	http://docs.seqan.de/seqan/dev/INDEXPAGE_Macro.html	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:06:43.677+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Macro.html	188.40.166.99	-	0	0	180	1281
2012-10-22T16:07:16.307+02:00	READY	http://docs.seqan.de/seqan/dev/MACRO_S_E_Q_A_N___A_S_S_E_R_T.html	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:07:16.434+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Macro_Assertions.html#SEQAN_ASSERT	188.40.166.99	-	0	0	180	1281
2012-10-22T16:07:24.837+02:00	READY	http://docs.seqan.de/seqan/dev/MACRO_S_E_Q_A_N___C_H_E_C_K.html	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:07:24.985+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Macro_Assertions.html#SEQAN_CHECK	188.40.166.99	-	0	0	180	1281
2012-10-22T16:07:44.558+02:00	BLUR	http://docs.seqan.de/seqan/dev/MACRO_S_E_Q_A_N___C_H_E_C_K.html	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:12:34.073+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MACRO_S_E_Q_A_N___C_H_E_C_K.html	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:12:34.716+02:00	BLUR	http://docs.seqan.de/seqan/dev/MACRO_S_E_Q_A_N___C_H_E_C_K.html	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:15:56.846+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MACRO_S_E_Q_A_N___C_H_E_C_K.html	188.40.166.99	-	0	0	1280	1281
2012-10-22T16:15:57.028+02:00	BLUR	http://docs.seqan.de/seqan/dev/MACRO_S_E_Q_A_N___C_H_E_C_K.html	188.40.166.99	-	0	0	1280	1281
2012-10-22T17:34:00.565+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MACRO_S_E_Q_A_N___C_H_E_C_K.html	188.40.166.99	-	0	0	1511	1010
2012-10-29T10:14:28.362+01:00	READY	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:14:28.861+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:14:29.611+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:14:31.882+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:14:32.676+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:14:35.298+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxEclipse	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:14:40.329+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxEclipse	188.40.166.99	-	0	301	2023	1346
2012-10-29T10:14:45.278+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxEclipse	188.40.166.99	-	0	496	2023	1346
2012-10-29T10:14:54.985+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxEclipse	188.40.166.99	-	0	1137	2023	1346
2012-10-29T10:15:09.928+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxEclipse	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:15:10.781+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:15:12.002+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:15:17.169+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:16:11.148+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:16:11.659+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:16:12.473+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:16:23.450+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:16:23.492+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2023	1346
2012-10-29T10:21:01.237+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted	188.40.166.99	-	0	0	2023	1346
2012-12-17T10:48:46.723+01:00	READY	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	0	1275	706
2012-12-17T10:48:50.062+01:00	SCROLL	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:48:57.499+01:00	BLUR	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:48:58.498+01:00	FOCUS	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:48:58.534+01:00	BLUR	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:49:06.676+01:00	READY	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	0	1275	706
2012-12-17T10:49:12.509+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	866	1275	706
2012-12-17T10:49:14.930+01:00	FOCUS	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:49:14.928+01:00	BLUR	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	866	1275	706
2012-12-17T10:49:16.135+01:00	BLUR	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:49:16.137+01:00	FOCUS	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	866	1275	706
2012-12-17T10:49:26.339+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	0	1275	706
2012-12-17T10:49:45.361+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	3647	1275	706
2012-12-17T10:50:01.543+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	5656	1275	706
2012-12-17T10:50:06.319+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	6409	1275	706
2012-12-17T10:50:11.470+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	6851	1275	706
2012-12-17T10:50:19.500+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	6879	1275	706
2012-12-17T10:50:22.942+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	7507	1275	706
2012-12-17T10:50:36.330+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	0	1275	706
2012-12-17T10:51:24.689+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	653	1275	706
2012-12-17T10:51:29.013+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	720	1275	706
2012-12-17T10:52:25.133+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	1283	1275	706
2012-12-17T10:52:29.395+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	745	1275	706
2012-12-17T10:52:34.583+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	636	1275	706
2012-12-17T10:52:53.516+01:00	FOCUS	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:52:53.514+01:00	BLUR	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	89	1275	706
2012-12-17T10:52:53.761+01:00	SCROLL	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	89	1275	706
2012-12-17T10:52:54.268+01:00	FOCUS	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	89	1275	706
2012-12-17T10:52:54.266+01:00	BLUR	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:52:54.546+01:00	FOCUS	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:52:54.545+01:00	BLUR	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	89	1275	706
2012-12-17T10:52:54.891+01:00	FOCUS	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	89	1275	706
2012-12-17T10:52:54.889+01:00	BLUR	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:52:58.963+01:00	FOCUS	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:52:58.962+01:00	BLUR	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	89	1275	706
2012-12-17T10:52:59.512+01:00	BLUR	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:55:18.123+01:00	FOCUS	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:55:18.825+01:00	BLUR	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:57:30.862+01:00	FOCUS	http://trac.seqan.de/wiki/HowTo/DocumentCode	130.133.52.211	-	0	559	1275	706
2012-12-17T10:57:32.943+01:00	FOCUS	http://trac.seqan.de/wiki/WhitePapers/DoxygenLike	130.133.52.211	-	0	89	1275	706
2012-12-21T13:17:29.914+01:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2012-12-21T13:17:33.118+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	273	1276	706
2012-12-21T13:17:35.499+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	477	1276	706
2012-12-21T13:17:37.419+01:00	READY	http://trac.seqan.de/wiki/HowTo/UseSeqAnInYourProjects	130.133.52.211	-	0	0	1276	706
2012-12-21T13:17:39.824+01:00	READY	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	706
2012-12-21T13:17:42.588+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	244	1276	706
2012-12-21T13:17:43.661+01:00	READY	http://trac.seqan.de/wiki/HowTo/UseSeqAnInYourProjects	130.133.52.211	-	0	0	1276	706
2012-12-21T13:17:44.751+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	477	1276	706
2012-12-21T13:17:49.085+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	241	1276	706
2012-12-21T13:17:52.056+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	79	1276	706
2012-12-21T13:18:09.609+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	130.133.52.211	-	0	0	1276	706
2012-12-21T13:18:13.943+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	79	1276	706
2012-12-21T13:18:15.154+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	130.133.52.211	-	0	0	1276	706
2012-12-21T13:18:22.440+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	130.133.52.211	-	0	321	1276	706
2012-12-21T13:18:30.756+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	130.133.52.211	-	0	834	1276	706
2012-12-21T13:18:41.408+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	130.133.52.211	-	0	981	1276	706
2012-12-21T13:18:45.750+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	130.133.52.211	-	0	1261	1276	706
2012-12-21T13:18:53.536+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	130.133.52.211	-	0	1951	1276	706
2012-12-21T13:18:57.779+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/MacMakefiles	130.133.52.211	-	0	2167	1276	706
2012-12-21T13:19:04.942+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	79	1276	706
2012-12-21T13:19:08.602+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	506	1276	706
2012-12-21T13:19:09.805+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	506	1276	706
2012-12-21T13:19:32.145+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	506	1276	706
2012-12-21T13:19:32.191+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	506	1276	706
2012-12-21T13:19:33.094+01:00	READY	http://trac.seqan.de/wiki/BuildManual	130.133.52.211	-	0	0	1276	706
2012-12-21T13:19:36.075+01:00	READY	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1276	706
2012-12-21T13:19:40.033+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	606	1276	706
2012-12-21T13:19:48.068+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	659	1276	706
2012-12-21T13:20:03.532+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	659	1276	706
2012-12-21T13:20:04.136+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	659	1276	706
2012-12-21T13:20:19.850+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	892	1276	706
2012-12-21T13:20:20.923+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	892	1276	706
2012-12-21T13:20:35.544+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	892	1276	706
2012-12-21T13:20:38.610+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:20:50.082+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:21:01.141+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:21:01.311+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:25:00.865+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:25:01.245+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:25:05.543+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:25:05.577+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:25:20.648+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:25:21.208+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:25:22.030+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:25:23.629+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:25:44.367+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:25:45.009+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:29:31.273+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:29:35.635+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:29:37.009+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:29:39.101+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:29:40.601+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	1037	1276	706
2012-12-21T13:29:43.269+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:29:44.937+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:29:45.530+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:29:49.172+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:30:01.158+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:30:02.116+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:30:05.585+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:30:06.131+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:30:44.197+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:30:44.610+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:37:18.729+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	744	1276	706
2012-12-21T13:37:18.780+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted	130.133.52.211	-	0	506	1276	706
2013-01-08T15:16:17.934+01:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1271	702
2013-01-08T15:16:21.306+01:00	READY	http://trac.seqan.de/wiki/BuildManual	130.133.52.211	-	0	0	1271	702
2013-01-08T15:16:22.719+01:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1271	702
2013-01-08T15:16:25.185+01:00	READY	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:16:27.573+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	660	1271	702
2013-01-08T15:16:30.237+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:16:34.462+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:16:35.054+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:16:35.298+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:06.011+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:06.780+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:07.053+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:08.433+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:09.503+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:09.976+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:13.546+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:27.377+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:27.962+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:38.881+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	7472	1271	702
2013-01-08T15:17:40.023+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:17:41.367+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:17:41.743+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:17:42.490+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:18:32.329+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:18:33.010+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:19:45.499+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:19:46.189+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:21:04.430+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:21:05.091+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:26:29.459+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:26:30.126+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:28:55.980+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:28:56.693+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:28:59.189+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:29:00.823+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:30:49.299+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:30:49.742+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:31:57.287+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:31:57.631+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:43.259+01:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:51.444+01:00	READY	https://trac.seqan.de/	130.133.52.211	-	0	0	1271	666
2013-01-08T15:33:56.324+01:00	READY	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:56.552+01:00	TYPING-field-summary-Iteart	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:56.670+01:00	TYPING-field-summary-Itear	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:56.807+01:00	TYPING-field-summary-Itea	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:56.967+01:00	TYPING-field-summary-Ite	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:58.281+01:00	TYPING-field-summary-It	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:58.383+01:00	TYPING-field-summary-Itt	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:58.455+01:00	TYPING-field-summary-Itte	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:58.847+01:00	TYPING-field-summary-Itter	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:58.983+01:00	TYPING-field-summary-Itte	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:59.103+01:00	TYPING-field-summary-Itt	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:59.159+01:00	TYPING-field-summary-It	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:59.487+01:00	TYPING-field-summary-Itt	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:59.655+01:00	TYPING-field-summary-It	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:59.678+01:00	TYPING-field-summary-Ite	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:59.775+01:00	TYPING-field-summary-Iter	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:33:59.872+01:00	TYPING-field-summary-Itera	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:00.439+01:00	TYPING-field-summary-Iterat	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:00.487+01:00	TYPING-field-summary-Iterato	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:00.598+01:00	TYPING-field-summary-Iterator	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:01.030+01:00	TYPING-field-summary-Iterator	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:01.087+01:00	TYPING-field-summary-Iterator<	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:01.519+01:00	TYPING-field-summary-Iterator<>	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:06.062+01:00	TYPING-field-summary-Iterator<> 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:06.143+01:00	TYPING-field-summary-Iterator<> d	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:06.239+01:00	TYPING-field-summary-Iterator<> do	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:06.375+01:00	TYPING-field-summary-Iterator<> doe	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:06.975+01:00	TYPING-field-summary-Iterator<> does	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:07.183+01:00	TYPING-field-summary-Iterator<> doesn	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:07.319+01:00	TYPING-field-summary-Iterator<> doesn'	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:07.399+01:00	TYPING-field-summary-Iterator<> doesn't	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:07.495+01:00	TYPING-field-summary-Iterator<> doesn't 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:07.607+01:00	TYPING-field-summary-Iterator<> doesn't w	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:07.711+01:00	TYPING-field-summary-Iterator<> doesn't wo	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:07.759+01:00	TYPING-field-summary-Iterator<> doesn't wor	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:07.814+01:00	TYPING-field-summary-Iterator<> doesn't work	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:07.951+01:00	TYPING-field-summary-Iterator<> doesn't work 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:08.239+01:00	TYPING-field-summary-Iterator<> doesn't work w	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:08.391+01:00	TYPING-field-summary-Iterator<> doesn't work 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:08.511+01:00	TYPING-field-summary-Iterator<> doesn't work p	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:08.559+01:00	TYPING-field-summary-Iterator<> doesn't work pe	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.014+01:00	TYPING-field-summary-Iterator<> doesn't work per	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.135+01:00	TYPING-field-summary-Iterator<> doesn't work pe	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.199+01:00	TYPING-field-summary-Iterator<> doesn't work p	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.279+01:00	TYPING-field-summary-Iterator<> doesn't work pr	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.407+01:00	TYPING-field-summary-Iterator<> doesn't work pro	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.463+01:00	TYPING-field-summary-Iterator<> doesn't work prop	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.494+01:00	TYPING-field-summary-Iterator<> doesn't work prope	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.607+01:00	TYPING-field-summary-Iterator<> doesn't work proper	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.823+01:00	TYPING-field-summary-Iterator<> doesn't work properl	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.911+01:00	TYPING-field-summary-Iterator<> doesn't work properly	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:09.967+01:00	TYPING-field-summary-Iterator<> doesn't work properly 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:10.038+01:00	TYPING-field-summary-Iterator<> doesn't work properly f	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:10.095+01:00	TYPING-field-summary-Iterator<> doesn't work properly fo	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:10.142+01:00	TYPING-field-summary-Iterator<> doesn't work properly for	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:10.725+01:00	TYPING-field-summary-Iterator<> doesn't work properly for 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:10.791+01:00	TYPING-field-summary-Iterator<> doesn't work properly for 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:10.944+01:00	TYPING-field-summary-Iterator<> doesn't work properly for S	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:11.071+01:00	TYPING-field-summary-Iterator<> doesn't work properly for ST	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:11.135+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:12.262+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:12.397+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL c	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:12.703+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL co	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:12.791+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL con	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:12.847+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL cont	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:12.895+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL conta	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:12.951+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL contai	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:12.998+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL contain	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:13.063+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL containe	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:14.654+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL container	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:14.686+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL container	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:14.743+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL container	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:15.023+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL container	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:15.198+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL s	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:15.262+01:00	TYPING-field-summary-Iterator<> doesn't work properly for STL se	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:16.614+01:00	TYPING-field-description-	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:16.711+01:00	BLUR	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:24.287+01:00	FOCUS	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:34.894+01:00	TYPING-field-description-	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:34.943+01:00	TYPING-field-description-	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:35.070+01:00	TYPING-field-description-T	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:35.102+01:00	TYPING-field-description-Tr	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:35.238+01:00	TYPING-field-description-Tra	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:35.269+01:00	TYPING-field-description-Trac	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:35.398+01:00	TYPING-field-description-Track	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:35.462+01:00	TYPING-field-description-Tracki	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:35.846+01:00	TYPING-field-description-Trackin	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:35.974+01:00	TYPING-field-description-Tracki	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:36.382+01:00	TYPING-field-description-Track	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:36.518+01:00	TYPING-field-description-Trac	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:36.646+01:00	TYPING-field-description-Tra	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:36.790+01:00	TYPING-field-description-Tr	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:36.934+01:00	TYPING-field-description-T	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:37.149+01:00	TYPING-field-description-	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:37.542+01:00	TYPING-field-description-	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:37.662+01:00	TYPING-field-description-C	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:37.734+01:00	TYPING-field-description-Ch	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:37.749+01:00	TYPING-field-description-Che	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:37.846+01:00	TYPING-field-description-Chec	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:37.974+01:00	TYPING-field-description-Check	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:38.029+01:00	TYPING-field-description-Checki	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:38.118+01:00	TYPING-field-description-Checkin	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:38.190+01:00	TYPING-field-description-Checking	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:38.334+01:00	TYPING-field-description-Checking 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:38.422+01:00	TYPING-field-description-Checking t	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:38.502+01:00	TYPING-field-description-Checking th	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:38.534+01:00	TYPING-field-description-Checking the	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:39.261+01:00	TYPING-field-description-Checking the 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:39.334+01:00	TYPING-field-description-Checking the 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:39.478+01:00	TYPING-field-description-Checking the T	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:39.629+01:00	TYPING-field-description-Checking the Tr	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:39.950+01:00	TYPING-field-description-Checking the Try	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:40.069+01:00	TYPING-field-description-Checking the Tr	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:40.238+01:00	TYPING-field-description-Checking the T	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:40.429+01:00	TYPING-field-description-Checking the Ty	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:40.494+01:00	TYPING-field-description-Checking the Typ	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:40.629+01:00	TYPING-field-description-Checking the Typ 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:41.134+01:00	TYPING-field-description-Checking the Typ o	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:41.262+01:00	TYPING-field-description-Checking the Typ 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:41.494+01:00	TYPING-field-description-Checking the Typ	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:41.558+01:00	TYPING-field-description-Checking the Type	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:41.685+01:00	TYPING-field-description-Checking the Type 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:41.733+01:00	TYPING-field-description-Checking the Type o	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:41.798+01:00	TYPING-field-description-Checking the Type of	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:42.328+01:00	TYPING-field-description-Checking the Type of 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:42.397+01:00	TYPING-field-description-Checking the Type of x	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:42.941+01:00	TYPING-field-description-Checking the Type of x 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:43.086+01:00	TYPING-field-description-Checking the Type of x a	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:43.174+01:00	TYPING-field-description-Checking the Type of x an	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:43.230+01:00	TYPING-field-description-Checking the Type of x and	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:43.333+01:00	TYPING-field-description-Checking the Type of x and 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:43.413+01:00	TYPING-field-description-Checking the Type of x and y	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:43.566+01:00	TYPING-field-description-Checking the Type of x and y 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:43.662+01:00	TYPING-field-description-Checking the Type of x and y i	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:43.684+01:00	TYPING-field-description-Checking the Type of x and y in	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:44.197+01:00	TYPING-field-description-Checking the Type of x and y in 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:44.374+01:00	TYPING-field-description-Checking the Type of x and y in g	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:44.429+01:00	TYPING-field-description-Checking the Type of x and y in gd	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:46.670+01:00	TYPING-field-description-Checking the Type of x and y in gdb	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:46.750+01:00	TYPING-field-description-Checking the Type of x and y in gdb 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:46.829+01:00	TYPING-field-description-Checking the Type of x and y in gdb g	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:46.902+01:00	TYPING-field-description-Checking the Type of x and y in gdb gi	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:46.982+01:00	TYPING-field-description-Checking the Type of x and y in gdb giv	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.013+01:00	TYPING-field-description-Checking the Type of x and y in gdb give	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.077+01:00	TYPING-field-description-Checking the Type of x and y in gdb given	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.125+01:00	TYPING-field-description-Checking the Type of x and y in gdb given 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.286+01:00	TYPING-field-description-Checking the Type of x and y in gdb given t	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.357+01:00	TYPING-field-description-Checking the Type of x and y in gdb given th	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.406+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.526+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.629+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the f	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.766+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the fo	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.885+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the fol	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:47.998+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the foll	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:48.062+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the follo	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:48.142+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the follow	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:48.206+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the followi	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:48.237+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the followin	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:48.326+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:48.678+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following 	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:48.766+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following c	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:48.870+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following co	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:48.934+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following cod	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:49.550+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:50.484+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:50.564+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:50.660+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:50.788+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n{	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:50.916+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n{{	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:51.093+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n{{{	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:51.221+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n{{{\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:51.253+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n{{{\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:52.053+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:52.103+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:52.213+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:52.334+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:34:56.875+01:00	READY	https://trac.seqan.de/newticket	130.133.52.211	-	0	435	1271	702
2013-01-08T15:34:59.481+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:02.446+01:00	TYPING-field-description-Checking the Type of x and y in gdb given the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:02.452+01:00	TYPING-field-description-Checking the Type of x and y in gdb u the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:02.533+01:00	TYPING-field-description-Checking the Type of x and y in gdb us the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:02.613+01:00	TYPING-field-description-Checking the Type of x and y in gdb usi the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:02.620+01:00	TYPING-field-description-Checking the Type of x and y in gdb usig the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:04.110+01:00	TYPING-field-description-Checking the Type of x and y in gdb usign the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:04.357+01:00	TYPING-field-description-Checking the Type of x and y in gdb usig the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:04.614+01:00	TYPING-field-description-Checking the Type of x and y in gdb usi the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:04.661+01:00	TYPING-field-description-Checking the Type of x and y in gdb usin the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:05.557+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:05.672+01:00	BLUR	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:06.377+01:00	FOCUS	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:06.541+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:06.806+01:00	BLUR	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:11.674+01:00	FOCUS	https://trac.seqan.de/newticket	130.133.52.211	-	0	254	1271	702
2013-01-08T15:35:14.840+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:15.701+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:16.613+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:16.957+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:17.012+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nr	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:17.165+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nre	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:17.237+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nrev	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:18.285+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreve	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:18.444+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nrevea	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:18.525+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveal	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:18.613+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:18.709+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:18.797+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals t	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:18.829+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals th	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:18.941+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:19.516+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:19.605+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:19.740+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the T	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:20.237+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the Ty	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:20.349+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the T	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:20.421+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:20.517+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the t	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:20.677+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the ty	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:20.733+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the typ	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:20.820+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:20.885+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:20.900+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type o	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:20.971+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:21.387+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:21.452+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:22.677+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:22.756+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x a	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:23.733+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:23.916+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:24.021+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:24.125+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:24.253+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:24.373+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:24.508+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:24.541+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:25.196+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:25.308+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:25.501+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:25.628+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:25.757+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:25.916+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.077+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.159+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\na	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.205+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nan	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.309+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.365+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.460+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand t	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.467+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand th	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.573+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.652+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.731+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the t	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.900+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the ty	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:26.997+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the typ	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:27.164+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:27.285+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:27.324+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type o	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:27.380+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:27.892+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:28.004+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:28.092+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y 	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:28.205+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y a	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:28.316+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:28.796+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:28.914+01:00	BLUR	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:33.794+01:00	FOCUS	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:34.884+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:35.436+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:35.668+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:35.800+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:35.892+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:35.996+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:36.053+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:36.228+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{dummyFun<std::set<char, std::less<char>, std::allocator<char> >*>	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:36.348+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{dummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:36.468+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{dummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:36.596+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{dummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:36.686+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{dummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:36.836+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{dummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:37.341+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{dummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:37.468+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{dummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:37.892+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{dummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:38.132+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{dummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:38.527+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\ndummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:38.620+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nummyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:38.740+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nmmyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:38.868+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nmyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:38.988+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nyFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:39.116+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nFun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:39.236+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nun<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:39.364+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nn<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:39.508+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\n<std::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:39.892+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:39.964+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:40.868+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*>\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:41.996+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:42.124+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:42.276+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:42.469+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:42.771+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:42.860+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:43.141+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\ndummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:43.252+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nummyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:43.364+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nmmyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:43.492+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nmyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:43.604+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nyFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:43.732+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nFun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:43.940+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nun<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:44.100+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nn<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:44.308+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\n<char*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:44.667+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:44.788+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:44.924+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:45.052+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:45.196+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:45.323+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:45.331+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:45.412+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:45.764+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*> (x=@0x7fff5fbff9f0)\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	560	1271	702
2013-01-08T15:35:49.657+01:00	READY	https://trac.seqan.de/newticket	130.133.52.211	-	0	581	1271	702
2013-01-08T15:35:52.285+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	549	1271	702
2013-01-08T15:35:55.084+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	588	1271	702
2013-01-08T15:35:57.692+01:00	READY	https://trac.seqan.de/newticket	130.133.52.211	-	0	566	1271	702
2013-01-08T15:36:02.445+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	295	1271	702
2013-01-08T15:36:08.877+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:12.652+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the type of x as\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:12.699+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the f\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:12.865+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the fo\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:12.970+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the fol\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:13.467+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the foll\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:13.539+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the follo\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:13.611+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the follow\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:13.682+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the followi\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:13.731+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the followin\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:13.844+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:13.915+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following \n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:14.107+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following t\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:14.307+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following ty\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:14.330+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following typ\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:14.450+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:14.507+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type \n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:14.595+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type f\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:14.652+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type fo\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:14.724+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:14.851+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for \n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:15.618+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:15.698+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:16.323+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:19.035+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand the type of y as\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:19.115+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\na\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:19.195+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nan\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:19.275+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:19.403+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand \n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:19.531+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand f\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:19.635+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand fo\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:19.707+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:19.963+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for \n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:20.083+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:20.195+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:20.507+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:20.763+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:20.859+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:20.987+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:21.123+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:21.411+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:21.538+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:21.619+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:21.882+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:23.019+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for \n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:23.146+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:23.251+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:36:26.545+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	562	1271	702
2013-01-08T15:36:32.254+01:00	BLUR	https://trac.seqan.de/newticket	130.133.52.211	-	0	562	1271	702
2013-01-08T15:36:58.271+01:00	FOCUS	https://trac.seqan.de/newticket	130.133.52.211	-	0	562	1271	702
2013-01-08T15:37:01.899+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:02.450+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:02.458+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:02.561+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:02.686+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n..	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:02.794+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n...	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:02.890+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:02.954+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... i	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.034+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... in	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.122+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... ins	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.193+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... inst	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.226+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... inste	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.450+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instea	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.610+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.674+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.714+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead o	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.802+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.873+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:03.938+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:04.234+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:04.290+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a v	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:04.370+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a va	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:04.538+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a val	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:04.594+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a valu	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:04.697+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:04.962+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:05.145+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:05.322+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_t	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:05.498+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_ty	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:05.570+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_typ	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:05.730+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:06.706+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:06.858+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type p	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:06.986+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type po	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:07.050+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type poi	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:07.114+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type poin	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:07.178+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type point	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:07.242+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type pointe	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:07.338+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type pointer	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:08.505+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type pointer.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:08.521+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type pointer.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:08.570+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type pointer.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:08.683+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type pointer.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:08.826+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type pointer.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:09.458+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a value_type pointer.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:09.546+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:09.650+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:09.778+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a p	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:09.930+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a po	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:09.994+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a poi	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:10.058+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a poin	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:10.138+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a point	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:10.218+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointe	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:10.258+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:10.362+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:10.418+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer t	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:10.482+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer th	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:10.570+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer tha	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:10.906+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer tha 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:10.961+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer tha	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:11.026+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:11.154+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:11.202+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that c	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:11.258+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that ca	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:11.329+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:11.457+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:11.914+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can b	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:11.994+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:12.089+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:12.178+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be d	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:13.106+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be de	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:13.186+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be der	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:13.378+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dere	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:13.802+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be deree	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:14.490+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dere	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:14.770+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be deref	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:14.985+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be derefe	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.025+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be derefer	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.137+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be derefere	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.218+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferen	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.274+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenc	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.418+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereference	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.497+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.610+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.641+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced t	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.689+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.794+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:15.882+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:18.401+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:18.441+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a v	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:18.522+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a va	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:18.714+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a val	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:18.762+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a valu	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:18.849+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:19.018+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:19.193+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value_	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:19.362+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value_t	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:19.457+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value_ty	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:19.553+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value_typ	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:20.386+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value_type	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:21.705+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:21.793+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:21.921+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:22.587+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to a value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:23.361+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to  value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:23.577+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:23.649+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to svalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:23.801+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to stvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:23.913+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to stdvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:23.953+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to stdvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:24.065+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std:value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:24.145+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:24.305+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::svalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:24.353+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::sevalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:25.089+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::setvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:25.209+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::setvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:25.337+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set<value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:25.402+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set<Tvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:25.906+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set<T>value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:26.033+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set<Tvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:26.169+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set<value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:26.817+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::setvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:26.857+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::setvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:26.977+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set:value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:27.593+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set::value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:27.713+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set:value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:28.177+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::setvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:28.233+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::setvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:28.353+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set:value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:28.449+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set::value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:28.590+01:00	BLUR	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:31.631+01:00	FOCUS	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:32.627+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set::value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:33.130+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::set:value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:33.210+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::setvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:33.295+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::sevalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:33.379+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::svalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:33.463+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std::value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:33.547+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to std:value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:33.631+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to stdvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:33.809+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to stvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:34.337+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to svalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:34.465+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:34.513+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to tvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:34.624+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to thvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:34.657+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to thevalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:34.777+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to the value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:34.889+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to the svalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:34.953+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to the sevalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:35.081+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to the setvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:35.353+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to the setsvalue_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:42.083+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:54.377+01:00	TYPING-field-keywords-	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:54.417+01:00	TYPING-field-keywords-i	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:54.465+01:00	TYPING-field-keywords-it	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:54.577+01:00	TYPING-field-keywords-ite	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:54.600+01:00	TYPING-field-keywords-iter	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:54.768+01:00	TYPING-field-keywords-itera	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:54.872+01:00	TYPING-field-keywords-iterat	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:54.952+01:00	TYPING-field-keywords-iterato	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:55.015+01:00	TYPING-field-keywords-iterator	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:55.960+01:00	TYPING-field-keywords-iterator 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:56.032+01:00	TYPING-field-keywords-iterator s	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:37:56.936+01:00	TYPING-field-keywords-iterator st	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:38:05.054+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	184	1271	702
2013-01-08T15:38:08.480+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	289	1271	702
2013-01-08T15:40:24.970+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:28.741+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a pointer that can be dereferenced to the sets value_type.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:28.755+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of a	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:28.828+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:29.244+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:29.316+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an s	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:29.484+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an st	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:29.716+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:29.828+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:30.036+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std:	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:30.412+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std:s	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:30.516+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std:	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:30.588+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std:	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:30.732+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:30.852+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::s	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:30.916+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::se	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:30.998+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::set	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:30.996+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::set	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:31.172+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::set:	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:31.412+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::set::	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:31.557+01:00	BLUR	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:32.271+01:00	FOCUS	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:32.892+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::set::	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:32.907+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::set::	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:32.982+01:00	BLUR	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:40:35.518+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:40:37.883+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:40:39.847+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T15:54:10.109+01:00	FOCUS	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:12.622+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::set::	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:13.122+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::set:	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:13.206+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::set	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:13.291+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::se	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:13.375+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::s	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:13.458+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std::	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:13.542+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std:	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:13.670+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an std	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:13.814+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an st	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:13.958+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an s	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:14.661+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an 	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:14.806+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an s	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:14.870+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an se	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.005+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.086+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.206+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set:	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.382+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.462+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::i	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.542+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::it	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.630+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::ite	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.686+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iter	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.782+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::itera	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.878+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterat	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:15.934+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterato	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:16.070+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:17.574+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.075+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.159+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.243+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.327+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.410+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.494+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.578+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.662+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.745+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.830+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.914+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:18.999+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:19.083+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:19.167+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:19.430+01:00	TYPING-field-description-Checking the Type of x and y in gdb using the following code\n\n{{{\n#include <seqan/basic.h>\n#include <seqan/sequence.h>\n#include <set>\n\n\nusing namespace seqan;\n\ntemplate<typename T>\nvoid dummyFun(T const & x) {\n    std::cerr << "dummy call" << std::endl;\n}\n\nint main()\n{\n    Iterator<String<char>, Standard>::Type x;\n    Iterator<std::set<char>,Standard>::Type y;\n\n    dummyFun(x);\n    dummyFun(y);\n\n    return 0;\n}\n}}}\n\nreveals the following type for x:\n{{{\nchar*\n}}}\nand for y:\n{{{\nstd::set<char, std::less<char>, std::allocator<char> >*\n}}}\n... instead of an set::iterator.	https://trac.seqan.de/newticket	130.133.52.211	-	0	691	1271	702
2013-01-08T15:54:30.622+01:00	READY	https://trac.seqan.de/newticket	130.133.52.211	-	0	595	1271	702
2013-01-08T15:54:33.416+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	310	1271	702
2013-01-08T15:54:40.271+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	0	1271	702
2013-01-08T15:54:43.777+01:00	SCROLL	https://trac.seqan.de/newticket	130.133.52.211	-	0	720	1271	702
2013-01-08T15:54:46.535+01:00	READY	https://trac.seqan.de/ticket/985	130.133.52.211	-	0	0	1271	702
2013-01-08T15:54:50.902+01:00	READY	https://trac.seqan.de/ticket/985	130.133.52.211	-	0	0	1271	702
2013-01-08T15:54:53.124+01:00	READY	https://trac.seqan.de/report	130.133.52.211	-	0	0	1271	702
2013-01-08T15:55:00.052+01:00	READY	https://trac.seqan.de/report/1	130.133.52.211	-	0	0	1271	702
2013-01-08T15:55:27.987+01:00	SCROLL	https://trac.seqan.de/report/1	130.133.52.211	-	0	0	1271	702
2013-01-08T15:55:29.151+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/UsingTheSeqAnBuildSystem	130.133.52.211	-	0	0	1271	702
2013-01-08T18:37:10.790+01:00	READY	http://trac.seqan.de/	79.201.98.246	-	0	0	1271	702
2013-01-08T18:37:22.221+01:00	READY	http://trac.seqan.de/wiki/TitleIndex	79.201.98.246	-	0	0	1271	702
2013-01-08T18:37:22.318+01:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	79.201.98.246	-	0	0	1271	702
2013-01-08T18:37:24.677+01:00	SCROLL	http://trac.seqan.de/wiki/TitleIndex	79.201.98.246	-	0	3423	1271	702
2013-01-08T18:37:26.000+01:00	FOCUS	http://trac.seqan.de/wiki/TitleIndex	79.201.98.246	-	0	3423	1271	702
2013-01-08T18:37:27.428+01:00	READY	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	79.201.98.246	-	0	0	1271	702
2013-01-08T18:37:28.461+01:00	READY	http://trac.seqan.de/wiki/TitleIndex	79.201.98.246	-	0	3423	1271	702
2013-01-08T18:37:30.398+01:00	READY	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	0	1271	702
2013-01-08T18:37:42.475+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	1707	1271	702
2013-01-08T18:38:01.216+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	5775	1271	702
2013-01-08T18:38:11.119+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	8836	1271	702
2013-01-08T18:38:24.798+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	21461	1271	702
2013-01-08T18:38:26.967+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	21600	1271	702
2013-01-08T18:38:27.024+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	21600	1271	702
2013-01-08T18:41:13.129+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	21600	1271	702
2013-01-08T18:41:16.395+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	1	21593	1271	702
2013-01-08T18:41:19.736+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	1	21614	1271	702
2013-01-08T18:41:24.200+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	21654	1271	702
2013-01-08T18:41:27.001+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	21127	1271	702
2013-01-08T18:42:21.432+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	22376	1271	702
2013-01-08T18:42:56.241+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Parsing	79.201.98.246	-	0	22648	1271	702
2013-01-20T12:05:38.102+01:00	READY	http://trac.seqan.de/	79.201.103.125	-	0	0	1276	666
2013-01-28T15:51:15.212+01:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2013-01-28T15:51:16.646+01:00	FOCUS	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2013-01-28T15:51:17.151+01:00	BLUR	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2013-01-28T15:51:17.150+01:00	BLUR	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2013-01-28T15:51:19.393+01:00	FOCUS	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2013-01-28T15:51:23.505+01:00	SCROLL	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	706
2013-03-04T13:46:50.168+01:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	662
2013-03-04T13:46:55.419+01:00	SCROLL	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	662
2013-03-04T13:47:02.068+01:00	READY	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T13:47:04.605+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	390	1276	662
2013-03-04T13:47:13.523+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2288	1276	662
2013-03-04T13:47:17.667+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2639	1276	662
2013-03-04T13:48:00.541+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2639	1276	662
2013-03-04T13:48:00.538+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2639	1276	662
2013-03-04T13:48:02.596+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2639	1276	662
2013-03-04T13:48:06.015+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2639	1276	662
2013-03-04T13:48:06.013+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2639	1276	662
2013-03-04T14:01:02.757+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2639	1276	662
2013-03-04T14:01:10.387+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3311	1276	662
2013-03-04T14:01:28.998+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3311	1276	662
2013-03-04T14:01:29.000+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3311	1276	662
2013-03-04T14:01:50.626+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3311	1276	662
2013-03-04T14:01:56.651+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3612	1276	662
2013-03-04T14:02:43.453+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3875	1276	662
2013-03-04T14:02:52.402+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3732	1276	662
2013-03-04T14:02:57.812+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3732	1276	662
2013-03-04T14:02:57.814+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3732	1276	662
2013-03-04T14:04:32.066+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3732	1276	662
2013-03-04T14:04:37.855+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3732	1276	662
2013-03-04T14:04:37.863+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3732	1276	662
2013-03-04T14:05:38.500+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3732	1276	662
2013-03-04T14:05:39.191+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3732	1276	662
2013-03-04T14:05:39.192+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3732	1276	662
2013-03-04T14:05:47.890+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3732	1276	662
2013-03-04T14:05:50.418+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	-3	1276	662
2013-03-04T14:05:50.420+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	-3	1276	662
2013-03-04T14:05:52.587+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T14:07:11.237+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T14:07:11.433+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:14:32.675+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:14:32.813+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:14:33.755+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:14:33.895+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:14:38.717+01:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	0	1276	662
2013-03-04T15:14:43.485+01:00	READY	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	149	1276	662
2013-03-04T15:14:53.785+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4654	1276	662
2013-03-04T15:14:56.298+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:14:56.652+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:15:00.314+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:15:19.553+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:15:19.552+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:15:46.912+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:15:51.865+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:15:51.867+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:17:04.939+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:17:13.428+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:17:13.429+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:17:21.060+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1613	1276	662
2013-03-04T15:17:25.875+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3631	1276	662
2013-03-04T15:17:35.328+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:37.438+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project/Makefile	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:39.128+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:40.624+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project/Makefile.rules	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:41.611+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:42.969+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project/Makefile	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:44.655+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:45.064+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project/Makefile	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:51.071+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:52.458+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project/Makefile.rules	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:55.481+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:56.854+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project/Makefile	130.133.52.211	-	0	0	1276	662
2013-03-04T15:17:58.436+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:00.381+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project/README	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:01.246+01:00	READY	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:01.289+01:00	BLUR	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:01.288+01:00	BLUR	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:24.532+01:00	FOCUS	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:25.690+01:00	BLUR	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:27.324+01:00	FOCUS	http://trac.seqan.de/browser/trunk/misc/makefile_project	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:28.936+01:00	READY	http://trac.seqan.de/	130.133.52.211	-	0	51	1276	662
2013-03-04T15:18:29.448+01:00	READY	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2686	1276	662
2013-03-04T15:18:29.873+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:29.944+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:30.128+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:30.889+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:31.024+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:31.657+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:31.720+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:32.441+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:32.694+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:32.693+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:50.304+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:18:53.375+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	299	1276	662
2013-03-04T15:18:57.248+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	651	1276	662
2013-03-04T15:19:01.026+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	651	1276	662
2013-03-04T15:19:01.028+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	651	1276	662
2013-03-04T15:19:25.657+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	651	1276	662
2013-03-04T15:19:26.376+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	651	1276	662
2013-03-04T15:19:26.378+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	651	1276	662
2013-03-04T15:19:41.319+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	651	1276	662
2013-03-04T15:19:47.682+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1711	1276	662
2013-03-04T15:19:51.122+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1711	1276	662
2013-03-04T15:19:51.123+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1711	1276	662
2013-03-04T15:20:06.798+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1711	1276	662
2013-03-04T15:20:20.314+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1711	1276	662
2013-03-04T15:20:20.315+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1711	1276	662
2013-03-04T15:20:58.064+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1711	1276	662
2013-03-04T15:20:58.558+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1711	1276	662
2013-03-04T15:20:58.560+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1711	1276	662
2013-03-04T15:21:21.853+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1711	1276	662
2013-03-04T15:21:25.396+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:21:25.568+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:21:25.569+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:23:07.746+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:23:08.200+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:26:42.817+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:26:47.210+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:26:47.211+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:26:47.944+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:26:48.573+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:26:48.572+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:29:02.902+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	1755	1276	662
2013-03-04T15:29:08.225+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2670	1276	662
2013-03-04T15:29:15.491+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2670	1276	662
2013-03-04T15:29:15.492+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2670	1276	662
2013-03-04T15:29:24.116+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2670	1276	662
2013-03-04T15:29:24.666+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2670	1276	662
2013-03-04T15:29:24.666+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2670	1276	662
2013-03-04T15:29:25.196+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	2670	1276	662
2013-03-04T15:29:31.144+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3923	1276	662
2013-03-04T15:29:42.869+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	3746	1276	662
2013-03-04T15:30:08.174+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T15:30:24.407+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T15:30:24.410+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T15:30:53.039+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T15:30:54.039+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T15:30:54.040+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T15:38:13.834+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T15:38:15.031+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T15:38:21.961+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:38:22.256+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:38:22.444+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:38:22.585+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:59:41.424+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T15:59:41.765+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T15:59:46.545+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T15:59:46.853+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	662
2013-03-04T16:44:28.325+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T16:44:28.451+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	662
2013-03-04T17:22:58.137+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	706
2013-03-04T17:22:58.317+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	706
2013-03-04T17:22:59.649+01:00	RESIZE	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	4223	1276	706
2013-03-04T17:23:02.302+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	706
2013-03-04T17:23:02.669+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	706
2013-03-04T17:23:03.813+01:00	RESIZE	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	130.133.52.211	-	0	0	1276	706
2013-03-05T08:39:02.564+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	79.201.96.84	-	0	4223	1276	706
2013-03-05T08:39:02.707+01:00	UNLOAD	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	79.201.96.84	-	0	4223	1276	706
2013-03-05T08:39:04.395+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	79.201.96.84	-	0	0	1276	706
2013-03-07T13:04:56.143+01:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	706
2013-03-07T13:05:07.749+01:00	READY	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	0	1276	706
2013-03-07T13:05:13.755+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3625	1276	706
2013-03-07T13:05:18.850+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3625	1276	706
2013-03-07T13:05:18.848+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3625	1276	706
2013-03-07T13:05:38.775+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3625	1276	706
2013-03-07T13:05:42.351+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3665	1276	706
2013-03-07T13:08:16.825+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3665	1276	706
2013-03-07T13:08:16.827+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3665	1276	706
2013-03-07T13:13:08.942+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3665	1276	706
2013-03-07T13:13:09.128+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3665	1276	706
2013-03-07T13:15:20.505+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3665	1276	706
2013-03-07T13:15:22.401+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3855	1276	706
2013-03-07T13:15:22.399+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3855	1276	706
2013-03-07T13:15:23.765+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3855	1276	706
2013-03-07T13:15:29.402+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3855	1276	706
2013-03-07T13:15:32.009+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3592	1276	706
2013-03-07T13:15:33.239+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3592	1276	706
2013-03-07T13:26:06.706+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3592	1276	706
2013-03-07T13:26:15.605+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4353	1276	706
2013-03-07T13:26:20.443+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4265	1276	706
2013-03-07T13:26:27.295+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3657	1276	706
2013-03-07T13:26:29.287+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3657	1276	706
2013-03-07T13:26:29.285+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3657	1276	706
2013-03-07T13:28:26.558+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3657	1276	706
2013-03-07T13:28:29.972+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:28:36.964+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:29:42.197+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:29:43.799+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:29:43.800+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:29:44.679+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:29:45.118+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:29:45.117+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:29:58.169+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:29:59.240+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:29:59.239+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:30:02.846+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:30:03.431+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:30:03.429+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:30:15.587+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:30:16.183+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:30:16.182+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:30:26.255+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3881	1276	706
2013-03-07T13:30:29.693+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4004	1276	706
2013-03-07T13:30:31.165+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4004	1276	706
2013-03-07T13:30:31.164+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4004	1276	706
2013-03-07T13:30:46.487+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4004	1276	706
2013-03-07T13:30:49.000+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4004	1276	706
2013-03-07T13:30:48.998+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4004	1276	706
2013-03-07T13:30:49.801+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4004	1276	706
2013-03-07T13:30:50.302+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4004	1276	706
2013-03-07T13:30:50.301+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4004	1276	706
2013-03-07T13:30:54.913+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4004	1276	706
2013-03-07T13:30:58.540+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4248	1276	706
2013-03-07T13:30:58.957+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4248	1276	706
2013-03-07T13:30:58.956+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4248	1276	706
2013-03-07T13:31:41.195+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4248	1276	706
2013-03-07T13:31:41.747+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4248	1276	706
2013-03-07T13:31:41.748+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4248	1276	706
2013-03-07T13:31:48.159+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	4248	1276	706
2013-03-07T13:31:59.987+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	393	1276	706
2013-03-07T13:32:00.109+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	393	1276	706
2013-03-07T13:32:00.108+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	393	1276	706
2013-03-07T13:32:40.807+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	393	1276	706
2013-03-07T13:32:41.349+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	393	1276	706
2013-03-07T13:32:41.347+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	393	1276	706
2013-03-07T13:34:02.894+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	393	1276	706
2013-03-07T13:34:03.064+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	393	1276	706
2013-03-07T13:53:15.766+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	393	1276	706
2013-03-07T13:53:19.384+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	1608	1276	706
2013-03-07T13:53:19.385+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	1608	1276	706
2013-03-07T13:53:19.541+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	1608	1276	706
2013-03-07T13:53:29.254+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	1608	1276	706
2013-03-07T13:53:30.802+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	1608	1276	706
2013-03-07T13:53:30.801+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	1608	1276	706
2013-03-07T14:07:13.697+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	1608	1276	706
2013-03-07T14:07:13.772+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	1608	1276	706
2013-03-07T14:16:03.991+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	1608	1276	706
2013-03-07T14:16:08.060+01:00	SCROLL	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:16:44.558+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:16:44.559+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:32.860+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:33.712+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:33.711+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:44.218+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:44.876+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:44.875+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:56.084+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:56.627+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:56.625+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:56.950+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:58.061+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:17:58.060+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:21:34.057+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:21:34.190+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:05.625+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:06.469+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:06.468+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:16.296+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:20.499+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:20.499+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:21.057+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:21.971+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:21.971+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:24.370+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T14:22:24.488+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T15:43:45.896+01:00	FOCUS	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-07T15:43:46.165+01:00	BLUR	http://trac.seqan.de/wiki/BuildManual/IntegrationWithYourOwnBuildSystem	87.77.216.245	-	0	3858	1276	706
2013-03-27T11:10:25.641+01:00	READY	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:29.764+01:00	BLUR	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:29.766+01:00	BLUR	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:30.862+01:00	FOCUS	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:31.563+01:00	BLUR	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:31.564+01:00	BLUR	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:32.877+01:00	FOCUS	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:33.917+01:00	SCROLL	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:34.784+01:00	BLUR	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:34.785+01:00	BLUR	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:41.487+01:00	FOCUS	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:44.806+01:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	93.219.51.45	-	0	115	1537	1098
2013-03-27T11:10:46.007+01:00	READY	http://trac.seqan.de/	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:48.993+01:00	READY	http://trac.seqan.de/wiki/Tutorial	93.219.51.45	-	0	0	1537	1098
2013-03-27T11:10:51.389+01:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	34	1537	1098
2013-03-27T11:10:53.804+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	2259	1537	1098
2013-03-27T11:10:54.236+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	599	1537	1098
2013-03-27T11:10:55.223+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	599	1537	1098
2013-03-27T11:10:55.299+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	599	1537	1098
2013-03-27T11:10:55.390+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	599	1537	1098
2013-03-27T11:10:55.470+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	599	1537	1098
2013-03-27T11:10:55.805+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	599	1537	1098
2013-03-27T11:10:55.934+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	599	1537	1098
2013-03-27T11:10:56.085+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	599	1537	1098
2013-03-27T11:10:56.141+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	599	1537	1098
2013-03-27T11:10:58.636+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T11:36:32.631+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T11:36:33.835+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T11:36:33.837+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:15:43.804+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:15:43.987+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:21:07.320+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:21:08.720+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:21:08.721+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:21:14.972+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:21:15.179+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:22:28.216+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:22:28.982+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:22:28.983+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:22:49.756+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:22:50.424+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:46:30.412+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:46:31.701+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T12:46:31.702+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	1098
2013-03-27T13:13:40.118+01:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	706
2013-03-27T13:14:18.651+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	706
2013-03-27T13:14:19.666+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	706
2013-03-27T13:14:19.667+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	706
2013-03-27T13:14:25.462+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	93.219.51.45	-	0	6334	1537	706
2013-03-28T11:08:53.528+01:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	706
2013-03-28T11:08:54.594+01:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	33	1276	706
2013-03-28T11:08:57.098+01:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	189	1276	706
2013-03-28T11:09:02.397+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	2531	1276	706
2013-03-28T11:09:03.121+01:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	2531	1276	706
2013-03-28T14:36:30.074+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	2531	1276	706
2013-03-28T14:36:30.324+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	2531	1276	706
2013-03-28T14:36:35.031+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	2531	1276	706
2013-03-28T14:36:35.372+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	2531	1276	706
2013-03-28T14:36:39.743+01:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	2531	1276	706
2013-03-28T14:36:39.883+01:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	2531	1276	706
2013-04-03T22:40:11.513+02:00	READY	http://trac.seqan.de/	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:22.951+02:00	READY	http://trac.seqan.de/report	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:26.237+02:00	READY	http://trac.seqan.de/report/10	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:30.356+02:00	READY	http://trac.seqan.de/report	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:31.526+02:00	BLUR	http://trac.seqan.de/report	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:31.528+02:00	BLUR	http://trac.seqan.de/report	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:33.830+02:00	FOCUS	http://trac.seqan.de/report	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:34.877+02:00	TYPING-proj-search-	http://trac.seqan.de/report	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:35.230+02:00	TYPING-proj-search-	http://trac.seqan.de/report	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:35.436+02:00	TYPING-proj-search-#	http://trac.seqan.de/report	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:35.503+02:00	TYPING-proj-search-#	http://trac.seqan.de/report	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:35.845+02:00	TYPING-proj-search-#1004	http://trac.seqan.de/report	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:37.023+02:00	READY	http://trac.seqan.de/ticket/1004	93.219.52.70	-	0	0	1276	706
2013-04-03T22:40:45.733+02:00	SCROLL	http://trac.seqan.de/ticket/1004	93.219.52.70	-	0	18	1276	706
2013-04-03T22:41:09.069+02:00	BLUR	http://trac.seqan.de/ticket/1004	93.219.52.70	-	0	18	1276	706
2013-04-03T22:41:28.950+02:00	FOCUS	http://trac.seqan.de/ticket/1004	93.219.52.70	-	0	18	1276	706
2013-04-03T22:41:40.627+02:00	READY	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	679
2013-04-03T22:41:42.138+02:00	RESIZE	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:43.128+02:00	TYPING-proj-search-	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:43.272+02:00	TYPING-proj-search-	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:43.495+02:00	TYPING-proj-search-#	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:43.536+02:00	TYPING-proj-search-#	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:44.127+02:00	TYPING-proj-search-#Stephen	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:44.255+02:00	TYPING-proj-search-#Stephe	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:44.760+02:00	TYPING-proj-search-#Steph	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:44.839+02:00	TYPING-proj-search-#Step	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:44.924+02:00	TYPING-proj-search-#Ste	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:45.009+02:00	TYPING-proj-search-#St	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:45.279+02:00	TYPING-proj-search-#S	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:45.927+02:00	TYPING-proj-search-#1004	https://trac.seqan.de/	93.219.52.70	-	0	0	1276	670
2013-04-03T22:41:48.677+02:00	READY	https://trac.seqan.de/ticket/1004	93.219.52.70	-	0	0	1276	706
2013-04-03T22:41:54.184+02:00	SCROLL	https://trac.seqan.de/ticket/1004	93.219.52.70	-	0	21	1276	706
2013-04-03T22:42:10.966+02:00	BLUR	https://trac.seqan.de/ticket/1004	93.219.52.70	-	0	21	1276	706
2013-04-03T22:42:16.029+02:00	FOCUS	https://trac.seqan.de/ticket/1004	93.219.52.70	-	0	21	1276	706
2013-04-03T22:42:48.547+02:00	BLUR	https://trac.seqan.de/ticket/1004	93.219.52.70	-	0	21	1276	706
2013-04-03T22:42:49.935+02:00	FOCUS	https://trac.seqan.de/ticket/1004	93.219.52.70	-	0	21	1276	706
2013-04-03T22:42:51.503+02:00	READY	http://trac.seqan.de/	93.219.52.70	-	0	0	1276	706
2013-04-03T22:42:59.219+02:00	SCROLL	http://trac.seqan.de/	93.219.52.70	-	0	293	1276	706
2013-04-03T22:43:00.767+02:00	READY	http://trac.seqan.de/wiki/Tutorial	93.219.52.70	-	0	0	1276	706
2013-04-03T22:43:03.939+02:00	READY	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	0	1276	706
2013-04-03T22:43:07.751+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	714	1276	706
2013-04-03T22:43:47.295+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	736	1276	706
2013-04-03T22:44:04.240+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	795	1276	706
2013-04-03T22:44:14.950+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	1057	1276	706
2013-04-03T22:44:45.198+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	1125	1276	706
2013-04-03T22:44:47.537+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	1174	1276	706
2013-04-03T22:44:51.044+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	1206	1276	706
2013-04-03T22:45:11.304+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	1278	1276	706
2013-04-03T22:45:23.899+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	1403	1276	706
2013-04-03T22:45:27.961+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	1822	1276	706
2013-04-03T22:46:24.661+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	1856	1276	706
2013-04-03T22:46:35.049+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	2170	1276	706
2013-04-03T22:46:39.963+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation#	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	3040	1276	706
2013-04-03T22:46:40.175+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	3040	1276	706
2013-04-03T22:46:42.280+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation#	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	3290	1276	706
2013-04-03T22:46:47.327+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	3297	1276	706
2013-04-03T22:46:58.430+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	2575	1276	706
2013-04-03T22:47:00.950+02:00	UNLOAD	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	93.219.52.70	-	0	2575	1276	706
2013-04-05T15:07:53.123+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1240	702
2013-04-05T15:07:55.561+02:00	READY	https://trac.seqan.de/	160.45.111.85	-	0	0	1240	702
2013-04-05T15:07:58.622+02:00	READY	https://trac.seqan.de/report	160.45.111.85	-	0	0	1240	702
2013-04-05T15:08:05.320+02:00	READY	https://trac.seqan.de/report/7	160.45.111.85	-	0	0	1240	702
2013-04-05T15:08:08.173+02:00	READY	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	0	1240	702
2013-04-05T15:08:11.140+02:00	SCROLL	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	195	1240	702
2013-04-05T15:08:13.329+02:00	SCROLL	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	269	1240	702
2013-04-05T15:08:34.857+02:00	SCROLL	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	581	1240	702
2013-04-05T15:08:38.114+02:00	SCROLL	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	71	1240	702
2013-04-05T15:09:03.858+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	71	1240	702
2013-04-05T15:09:03.854+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	71	1240	702
2013-04-05T15:09:21.434+02:00	FOCUS	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	867	1240	702
2013-04-05T15:09:22.706+02:00	SCROLL	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	867	1240	702
2013-04-05T15:09:22.805+02:00	LINK-https://trac.seqan.de/ticket/985#no3	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	867	1240	702
2013-04-05T15:09:29.943+02:00	SCROLL	https://trac.seqan.de/ticket/985#no3	160.45.111.85	-	0	1126	1240	702
2013-04-05T15:09:32.188+02:00	READY	https://trac.seqan.de/ticket/985#comment:2	160.45.111.85	-	0	925	1240	702
2013-04-05T15:09:35.528+02:00	SCROLL	https://trac.seqan.de/ticket/985#comment:2	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:36.972+02:00	READY	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:39.629+02:00	TYPING-name-	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:39.709+02:00	TYPING-name-	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:39.877+02:00	TYPING-name-L	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:39.941+02:00	TYPING-name-Le	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.069+02:00	TYPING-name-Leo	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.141+02:00	TYPING-name-Leon	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.204+02:00	TYPING-name-Leon 	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.261+02:00	TYPING-name-Leon 	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.405+02:00	TYPING-name-Leon K	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.477+02:00	TYPING-name-Leon Ku	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.565+02:00	TYPING-name-Leon Kuc	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.653+02:00	TYPING-name-Leon Kuch	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.725+02:00	TYPING-name-Leon Kuche	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.829+02:00	TYPING-name-Leon Kuchen	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.893+02:00	TYPING-name-Leon Kuchenb	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:40.957+02:00	TYPING-name-Leon Kuchenbe	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:41.045+02:00	TYPING-name-Leon Kuchenbec	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:41.085+02:00	TYPING-name-Leon Kuchenbeck	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:41.133+02:00	TYPING-name-Leon Kuchenbecke	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:41.228+02:00	TYPING-name-Leon Kuchenbecker	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:41.325+02:00	TYPING-email-	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:41.388+02:00	TYPING-email-l	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:41.572+02:00	TYPING-email-lk	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:41.653+02:00	TYPING-email-lku	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:41.732+02:00	TYPING-email-lkuc	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:46.207+02:00	READY	https://trac.seqan.de/prefs	160.45.111.85	-	0	0	1240	702
2013-04-05T15:09:55.519+02:00	READY	https://trac.seqan.de/report	160.45.111.85	-	0	0	1240	702
2013-04-05T15:10:00.943+02:00	READY	https://trac.seqan.de/report/7	160.45.111.85	-	0	0	1240	702
2013-04-05T15:10:04.125+02:00	READY	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	0	1240	702
2013-04-05T15:10:17.502+02:00	READY	https://trac.seqan.de/query?reporter=lkuchenb&status=%21closed	160.45.111.85	-	0	0	1240	702
2013-04-05T15:10:19.659+02:00	READY	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	0	1240	702
2013-04-05T15:10:31.203+02:00	SCROLL	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:10:40.275+02:00	SCROLL	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	703	1240	702
2013-04-05T15:10:46.088+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:10:46.087+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:10:46.793+02:00	FOCUS	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:10:47.267+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:10:47.268+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:10:47.346+02:00	SCROLL	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:29:04.927+02:00	FOCUS	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:29:05.117+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:30:03.002+02:00	FOCUS	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:30:05.310+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:30:05.311+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:34:57.147+02:00	FOCUS	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:34:57.195+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:35:03.491+02:00	FOCUS	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:35:03.937+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:35:03.938+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:36:47.466+02:00	FOCUS	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:36:47.522+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:37:51.152+02:00	FOCUS	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:37:51.699+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T15:37:51.700+02:00	BLUR	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-05T16:06:42.165+02:00	FOCUS	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	925	1240	702
2013-04-08T12:30:53.528+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1214	683
2013-04-08T12:30:54.779+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	0	1214	683
2013-04-08T12:30:56.326+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	0	1214	683
2013-04-08T12:30:56.324+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	0	1214	683
2013-04-08T12:32:42.992+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	0	1214	683
2013-04-08T12:32:43.248+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	0	1214	683
2013-04-08T12:36:55.083+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	0	1214	683
2013-04-08T12:36:57.428+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	151	1214	683
2013-04-08T12:36:57.426+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	151	1214	683
2013-04-08T12:36:58.095+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	151	1214	683
2013-04-08T12:40:17.334+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	343	1214	683
2013-04-08T12:40:21.244+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted	160.45.111.85	-	0	306	1214	683
2013-04-08T12:40:23.181+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:25.913+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	195	1214	683
2013-04-08T12:40:40.801+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	92	1214	683
2013-04-08T12:40:45.388+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:45.769+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:48.390+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:49.021+02:00	TYPING-text-= Getting Started With SeqAn On Windows Using Visual Studio =\n\n[[TOC()]]\n\nThis tutorial explains how to get started with SeqAn on Windows using Visual Studio.\n\nWe use Visual Studio 9 here, but you should be able to easily follow the tutorial if you are using any other supported version (8, 9, 10).\n\n== Prerequisites ==\n\nWe assume that you have the following software installed:\n\n * [http://tortoisesvn.net/downloads.html TortoiseSVN] for version control and retrieving \n * Microsoft Visual Studio for compiling C++ code.\n   If you do not have Visual Studio already, you can download the [http://www.microsoft.com/express/ free Visual Studio Express Edition from Microsoft].\n   Note that at some point you can pick between the Express Edition or a Demo of the Full Version.\n   Pick the Express Edition here for a smaller and continuously free version.\n * [http://www.cmake.org/cmake/resources/software.html CMake] for generating project files\n * [http://python.org/download/ Python 2.x] for the code generator.\n   Note that Python 3 will not work, you a Python 2 version.\n\nAlso, we assume that your user name is `seqan_dev`.\nReplace `seqan_dev` by your actual user name in the steps below.\n\n{{{#!ImportantBox\nWhen installing CMake and Python, make sure to let the installers add the paths to the `cmake.exe` and `python.exe` binaries to your `PATH` environment variable.\n}}}\n\n== Install ==\n\nFirst, create a new folder in your Windows Explorer for the SeqAn files (e.g. `C:\Users\seqan_dev\Development\seqan-trunk`).\nRight click on this folder and choose [[MenuTrace(SVN Checkout...)]] from the context menu.\n\n[[Image(source:/trunk/core/demos/tutorial/getting_started/win_tortoise.png, 400px, align=center)]]\n\nType the following in the field [[MenuTrace(URL of repository)]]\n\n{{{#!IdeBox\nhttp://svn.seqan.de/seqan/trunk\n}}}\n\nThe [[MenuTrace(Checkout repository)]] should be the folder you just created.\nLeave the other settings set to their default ([[MenuTrace(fully recursive)]], [[MenuTrace(HEAD revision)]]) and click [[MenuTrace(OK)]].\n\n== A First Build ==\n\nNext, we will use CMake to create a Visual Studio 9 project for building the applications, demo programs (short: demos), and tests.\n\nWe will do this using the command prompt.\nStart a Windows command prompt ([[MenuTrace(Start,All Programs,Accessories,Command Prompt)]]).\nThen, go to the parent directory of `seqan-trunk`.\nThere, we create a separate folder `seqan-trunk-build`:\n\n{{{#!ShellBox\nC:\Users\seqan_dev> C:\nC:\Users\seqan_dev> cd C:\Users\seqan_dev\Development\nC:\Users\seqan_dev\Development\> mkdir seqan-trunk-build\n}}}\n\nIn the future, we might create a different set of project files (e.g. when we upgrade our Visual Studio version or switch to 64 bit builds).\nThus, we create a subdirectory called `vs9` for our Visual Studio 9 project.\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development> mkdir seqan-trunk-build\vs9\nC:\Users\seqan_dev\Development> cd seqan-trunk-build\vs9\n}}}\n\nThe resulting directory structure will look as follows.\n\n{{{\n   ~/Development\n     ├─ seqan-trunk                 source directory\n     └─ seqan-trunk-build\n        └─ vs9                      Visual Studio 9 project\n}}}\n\nWithin the '''build directory''' `vs9`, we call CMake to generate the Visual Studio 9 project:\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk-build\vs9> cmake ..\..\seqan-trunk -G "Visual Studio 9 2008"\n}}}\n\n{{{#!InfoBox\n'''Information:''' Using a different version or multiple versions of Visual Studio.\n\nUsing a different Visual Studio version is easy:\nSimply use the appropriate generator.\nFor example, here is how to use the Visual Studio 10 generator:\n\n{{{#!ShellBox\nC:\...\seqan-trunk-build\vs10> cmake ..\..\seqan-trunk -G "Visual Studio 10"\n}}}\n\nAlso, if you want to create 64 bit builds, you need to use another generator.\nChanging generators in an existing project directory is not possible.\n\n * If you use another version of Visual Studio, you can find out the correct parameter by typing `cmake --help`.\n * If you plan to use different versions of Visual Studio then follow the How To [wiki:HowTo/UseParallelBuildDirectories Use Parallel Build Directories].\n * Note that you have to choose the "Win64" variants of the "Visual Studio" generators if you want to build 64 bit binaries.\n}}}\n\nNow, you can open the project file from the Windows explorer:\nGo to the `C:\Users\seqan_dev\Development\seqan-trunk-build\vs9\core\apps` directory and double click on the file `seqan_core_apps.sln`.\nIn the [[MenuTrace(Solution Explorer)]] to the left you will find all applications of the SeqAn core.\n\n[[Image(source:/trunk/core/demos/tutorial/getting_started/win_solution_explorer.png, 500px, align=center)]]\n\nAs an example you can open, compile, and execute the program RazerS 2.\nClick on the [[MenuTrace(+)]]/[[MenuTrace(▷)]] in front of [[MenuTrace(razers2)]] in the Solution Explorer and also on the [[MenuTrace(+)]]/[[MenuTrace(▷)]] in front of [[MenuTrace(Source Files)]].\nDouble click on the file [[MenuTrace(razers.cpp)]] to open it in the main window.\nRight click on [[MenuTrace(razers2)]] in the Solution Explorer and choose [[MenuTrace(Set as StartUp Project)]] from the context menu.\n\n[[Image(source:/trunk/core/demos/tutorial/getting_started/win_start_up_project.png, 500px, align=center)]]\n\nTo compile and execute RazerS 2, choose [[MenuTrace(Debug,Start Without Debugging)]] from the main menu or press [[MenuTrace(Ctrl)]]+[[MenuTrace(F5)]].\n\nOn successful compilation and execution, a terminal windows should pop up and display:\n\n{{{#!ShellBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2.exe [OPTION]... <GENOME FILE> <READS FILE>\n       razers2.exe [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2.exe --help' for more information.\nPress any key to continue . . .\n}}}\n\n{{{#!InfoBox\n'''Information:''' Starting with and without Debugging in Visual Studio\n\nStarting a program without debugger in Visual Studio will make the program wait for the user pressing a key.\nThis is very useful for inspecting the output.\nIn Debug mode, the program does not wait when executed and the window simply disappears.\nThe reason for this is that when using the debugger, the user is expected to set a breakpoint.\n}}}\n\n== Hello World! ==\n\nNow, let us create a '''sandbox''' for you.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe go back to the source directory and then use the SeqAn code generator to create a new sandbox.\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk-build\vs9> cd ..\..\seqan-trunk\nC:\Users\seqan_dev\Development\seqan-trunk> python util\bin\skel.py repository sandbox\my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk> python util\bin\skel.py app first_app sandbox\my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\n{{{\n#!InfoBox\n'''Information:''' When and where do you have to call CMake?\n\nCMake is a cross-platform tool for creating and updating build files (IDE projects or Makefiles).\nWhen you first create the build files, you can configure things such as the build mode or the type of the project files.\n\nWhenever you add a new application, a demo or a test or whenever you make changes to `CMakeLists.txt` you need to call CMake again.\nSince CMake remembers the settings you chose the first time you called CMake in a file named `CMakeCache.txt`, all you have to do is to switch to your `debug` or `release` build directory and call "`cmake .`" in there.\n\n{{{\n#!ShellBox\n~ # cd $HOME/Development/seqan-trunk-build/debug\ndebug # cmake .\n}}}\n\nDo not try to call "`cmake .`" from within the `seqan-trunk` directory '''but only from your build directory'''.\n}}}\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app `first_app` with a very simple example program.\n\nOpen the file `C:\Users\seqan_dev\Development\seqan-trunk\sandbox\my_sandbox\first_app\first_app.cpp` with the Visual Studio text editor and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again to make it detect the added app.\n\n{{{\n#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk> cd ..\seqan-trunk-build\vs9\nC:\Users\seqan_dev\Development\seqan-trunk-build\vs9> cmake .\n}}}\n\nNow, you can open the project file `C:\Users\seqan_dev\Development\seqan-trunk-build\vs9\sandbox\my_sandbox\seqan_sandbox_my_sandbox.sln` for your sandbox using Visual Studio.\nRight-click [[MenuTrace(first_app)]] in the [[MenuTrace(Solution Explorer)]] and click [[MenuTrace(Set as StartUp Project)]].\nNow, start the program without debugging using [[MenuTrace(Debug,Start Without Debugging)]].\n\nVisual Studio will now compile your program and execute it.\nA command line window will pop up and should display the following.\n\n{{{\n#!ShellBox\nHello World!\nHello SeqAn!\nPress any key to continue . . .\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system using Visual studio.\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * If you have not done so, install optional dependencies of SeqAn.\n   To read and write compressed files, follow [wiki:HowTo/InstallContribsWindows How To: Install Contribs On Windows].\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.\n * For the tutorial, using the SeqAn build system is great!\n   If you later want to use SeqAn as a library, have a look at [wiki:HowTo/UseSeqAnInYourProjects How To: Use SeqAn In Your Projects].	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:49.076+02:00	TYPING-text-= Getting Started With SeqAn On Windows Using Visual Studio =\n\n[[TOC()]]\n\nThis tutorial explains how to get started with SeqAn on Windows using Visual Studio.\n\nWe use Visual Studio 9 here, but you should be able to easily follow the tutorial if you are using any other supported version (8, 9, 10).\n\n== Prerequisites ==\n\nWe assume that you have the following software installed:\n\n * [http://tortoisesvn.net/downloads.html TortoiseSVN] for version control and retrieving \n * Microsoft Visual Studio for compiling C++ code.\n   If you do not have Visual Studio already, you can download the [http://www.microsoft.com/express/ free Visual Studio Express Edition from Microsoft].\n   Note that at some point you can pick between the Express Edition or a Demo of the Full Version.\n   Pick the Express Edition here for a smaller and continuously free version.\n * [http://www.cmake.org/cmake/resources/software.html CMake] for generating project files\n * [http://python.org/download/ Python 2.x] for the code generator.\n   Note that Python 3 will not work, u a Python 2 version.\n\nAlso, we assume that your user name is `seqan_dev`.\nReplace `seqan_dev` by your actual user name in the steps below.\n\n{{{#!ImportantBox\nWhen installing CMake and Python, make sure to let the installers add the paths to the `cmake.exe` and `python.exe` binaries to your `PATH` environment variable.\n}}}\n\n== Install ==\n\nFirst, create a new folder in your Windows Explorer for the SeqAn files (e.g. `C:\Users\seqan_dev\Development\seqan-trunk`).\nRight click on this folder and choose [[MenuTrace(SVN Checkout...)]] from the context menu.\n\n[[Image(source:/trunk/core/demos/tutorial/getting_started/win_tortoise.png, 400px, align=center)]]\n\nType the following in the field [[MenuTrace(URL of repository)]]\n\n{{{#!IdeBox\nhttp://svn.seqan.de/seqan/trunk\n}}}\n\nThe [[MenuTrace(Checkout repository)]] should be the folder you just created.\nLeave the other settings set to their default ([[MenuTrace(fully recursive)]], [[MenuTrace(HEAD revision)]]) and click [[MenuTrace(OK)]].\n\n== A First Build ==\n\nNext, we will use CMake to create a Visual Studio 9 project for building the applications, demo programs (short: demos), and tests.\n\nWe will do this using the command prompt.\nStart a Windows command prompt ([[MenuTrace(Start,All Programs,Accessories,Command Prompt)]]).\nThen, go to the parent directory of `seqan-trunk`.\nThere, we create a separate folder `seqan-trunk-build`:\n\n{{{#!ShellBox\nC:\Users\seqan_dev> C:\nC:\Users\seqan_dev> cd C:\Users\seqan_dev\Development\nC:\Users\seqan_dev\Development\> mkdir seqan-trunk-build\n}}}\n\nIn the future, we might create a different set of project files (e.g. when we upgrade our Visual Studio version or switch to 64 bit builds).\nThus, we create a subdirectory called `vs9` for our Visual Studio 9 project.\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development> mkdir seqan-trunk-build\vs9\nC:\Users\seqan_dev\Development> cd seqan-trunk-build\vs9\n}}}\n\nThe resulting directory structure will look as follows.\n\n{{{\n   ~/Development\n     ├─ seqan-trunk                 source directory\n     └─ seqan-trunk-build\n        └─ vs9                      Visual Studio 9 project\n}}}\n\nWithin the '''build directory''' `vs9`, we call CMake to generate the Visual Studio 9 project:\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk-build\vs9> cmake ..\..\seqan-trunk -G "Visual Studio 9 2008"\n}}}\n\n{{{#!InfoBox\n'''Information:''' Using a different version or multiple versions of Visual Studio.\n\nUsing a different Visual Studio version is easy:\nSimply use the appropriate generator.\nFor example, here is how to use the Visual Studio 10 generator:\n\n{{{#!ShellBox\nC:\...\seqan-trunk-build\vs10> cmake ..\..\seqan-trunk -G "Visual Studio 10"\n}}}\n\nAlso, if you want to create 64 bit builds, you need to use another generator.\nChanging generators in an existing project directory is not possible.\n\n * If you use another version of Visual Studio, you can find out the correct parameter by typing `cmake --help`.\n * If you plan to use different versions of Visual Studio then follow the How To [wiki:HowTo/UseParallelBuildDirectories Use Parallel Build Directories].\n * Note that you have to choose the "Win64" variants of the "Visual Studio" generators if you want to build 64 bit binaries.\n}}}\n\nNow, you can open the project file from the Windows explorer:\nGo to the `C:\Users\seqan_dev\Development\seqan-trunk-build\vs9\core\apps` directory and double click on the file `seqan_core_apps.sln`.\nIn the [[MenuTrace(Solution Explorer)]] to the left you will find all applications of the SeqAn core.\n\n[[Image(source:/trunk/core/demos/tutorial/getting_started/win_solution_explorer.png, 500px, align=center)]]\n\nAs an example you can open, compile, and execute the program RazerS 2.\nClick on the [[MenuTrace(+)]]/[[MenuTrace(▷)]] in front of [[MenuTrace(razers2)]] in the Solution Explorer and also on the [[MenuTrace(+)]]/[[MenuTrace(▷)]] in front of [[MenuTrace(Source Files)]].\nDouble click on the file [[MenuTrace(razers.cpp)]] to open it in the main window.\nRight click on [[MenuTrace(razers2)]] in the Solution Explorer and choose [[MenuTrace(Set as StartUp Project)]] from the context menu.\n\n[[Image(source:/trunk/core/demos/tutorial/getting_started/win_start_up_project.png, 500px, align=center)]]\n\nTo compile and execute RazerS 2, choose [[MenuTrace(Debug,Start Without Debugging)]] from the main menu or press [[MenuTrace(Ctrl)]]+[[MenuTrace(F5)]].\n\nOn successful compilation and execution, a terminal windows should pop up and display:\n\n{{{#!ShellBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2.exe [OPTION]... <GENOME FILE> <READS FILE>\n       razers2.exe [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2.exe --help' for more information.\nPress any key to continue . . .\n}}}\n\n{{{#!InfoBox\n'''Information:''' Starting with and without Debugging in Visual Studio\n\nStarting a program without debugger in Visual Studio will make the program wait for the user pressing a key.\nThis is very useful for inspecting the output.\nIn Debug mode, the program does not wait when executed and the window simply disappears.\nThe reason for this is that when using the debugger, the user is expected to set a breakpoint.\n}}}\n\n== Hello World! ==\n\nNow, let us create a '''sandbox''' for you.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe go back to the source directory and then use the SeqAn code generator to create a new sandbox.\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk-build\vs9> cd ..\..\seqan-trunk\nC:\Users\seqan_dev\Development\seqan-trunk> python util\bin\skel.py repository sandbox\my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk> python util\bin\skel.py app first_app sandbox\my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\n{{{\n#!InfoBox\n'''Information:''' When and where do you have to call CMake?\n\nCMake is a cross-platform tool for creating and updating build files (IDE projects or Makefiles).\nWhen you first create the build files, you can configure things such as the build mode or the type of the project files.\n\nWhenever you add a new application, a demo or a test or whenever you make changes to `CMakeLists.txt` you need to call CMake again.\nSince CMake remembers the settings you chose the first time you called CMake in a file named `CMakeCache.txt`, all you have to do is to switch to your `debug` or `release` build directory and call "`cmake .`" in there.\n\n{{{\n#!ShellBox\n~ # cd $HOME/Development/seqan-trunk-build/debug\ndebug # cmake .\n}}}\n\nDo not try to call "`cmake .`" from within the `seqan-trunk` directory '''but only from your build directory'''.\n}}}\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app `first_app` with a very simple example program.\n\nOpen the file `C:\Users\seqan_dev\Development\seqan-trunk\sandbox\my_sandbox\first_app\first_app.cpp` with the Visual Studio text editor and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again to make it detect the added app.\n\n{{{\n#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk> cd ..\seqan-trunk-build\vs9\nC:\Users\seqan_dev\Development\seqan-trunk-build\vs9> cmake .\n}}}\n\nNow, you can open the project file `C:\Users\seqan_dev\Development\seqan-trunk-build\vs9\sandbox\my_sandbox\seqan_sandbox_my_sandbox.sln` for your sandbox using Visual Studio.\nRight-click [[MenuTrace(first_app)]] in the [[MenuTrace(Solution Explorer)]] and click [[MenuTrace(Set as StartUp Project)]].\nNow, start the program without debugging using [[MenuTrace(Debug,Start Without Debugging)]].\n\nVisual Studio will now compile your program and execute it.\nA command line window will pop up and should display the following.\n\n{{{\n#!ShellBox\nHello World!\nHello SeqAn!\nPress any key to continue . . .\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system using Visual studio.\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * If you have not done so, install optional dependencies of SeqAn.\n   To read and write compressed files, follow [wiki:HowTo/InstallContribsWindows How To: Install Contribs On Windows].\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.\n * For the tutorial, using the SeqAn build system is great!\n   If you later want to use SeqAn as a library, have a look at [wiki:HowTo/UseSeqAnInYourProjects How To: Use SeqAn In Your Projects].	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:49.188+02:00	TYPING-text-= Getting Started With SeqAn On Windows Using Visual Studio =\n\n[[TOC()]]\n\nThis tutorial explains how to get started with SeqAn on Windows using Visual Studio.\n\nWe use Visual Studio 9 here, but you should be able to easily follow the tutorial if you are using any other supported version (8, 9, 10).\n\n== Prerequisites ==\n\nWe assume that you have the following software installed:\n\n * [http://tortoisesvn.net/downloads.html TortoiseSVN] for version control and retrieving \n * Microsoft Visual Studio for compiling C++ code.\n   If you do not have Visual Studio already, you can download the [http://www.microsoft.com/express/ free Visual Studio Express Edition from Microsoft].\n   Note that at some point you can pick between the Express Edition or a Demo of the Full Version.\n   Pick the Express Edition here for a smaller and continuously free version.\n * [http://www.cmake.org/cmake/resources/software.html CMake] for generating project files\n * [http://python.org/download/ Python 2.x] for the code generator.\n   Note that Python 3 will not work, us a Python 2 version.\n\nAlso, we assume that your user name is `seqan_dev`.\nReplace `seqan_dev` by your actual user name in the steps below.\n\n{{{#!ImportantBox\nWhen installing CMake and Python, make sure to let the installers add the paths to the `cmake.exe` and `python.exe` binaries to your `PATH` environment variable.\n}}}\n\n== Install ==\n\nFirst, create a new folder in your Windows Explorer for the SeqAn files (e.g. `C:\Users\seqan_dev\Development\seqan-trunk`).\nRight click on this folder and choose [[MenuTrace(SVN Checkout...)]] from the context menu.\n\n[[Image(source:/trunk/core/demos/tutorial/getting_started/win_tortoise.png, 400px, align=center)]]\n\nType the following in the field [[MenuTrace(URL of repository)]]\n\n{{{#!IdeBox\nhttp://svn.seqan.de/seqan/trunk\n}}}\n\nThe [[MenuTrace(Checkout repository)]] should be the folder you just created.\nLeave the other settings set to their default ([[MenuTrace(fully recursive)]], [[MenuTrace(HEAD revision)]]) and click [[MenuTrace(OK)]].\n\n== A First Build ==\n\nNext, we will use CMake to create a Visual Studio 9 project for building the applications, demo programs (short: demos), and tests.\n\nWe will do this using the command prompt.\nStart a Windows command prompt ([[MenuTrace(Start,All Programs,Accessories,Command Prompt)]]).\nThen, go to the parent directory of `seqan-trunk`.\nThere, we create a separate folder `seqan-trunk-build`:\n\n{{{#!ShellBox\nC:\Users\seqan_dev> C:\nC:\Users\seqan_dev> cd C:\Users\seqan_dev\Development\nC:\Users\seqan_dev\Development\> mkdir seqan-trunk-build\n}}}\n\nIn the future, we might create a different set of project files (e.g. when we upgrade our Visual Studio version or switch to 64 bit builds).\nThus, we create a subdirectory called `vs9` for our Visual Studio 9 project.\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development> mkdir seqan-trunk-build\vs9\nC:\Users\seqan_dev\Development> cd seqan-trunk-build\vs9\n}}}\n\nThe resulting directory structure will look as follows.\n\n{{{\n   ~/Development\n     ├─ seqan-trunk                 source directory\n     └─ seqan-trunk-build\n        └─ vs9                      Visual Studio 9 project\n}}}\n\nWithin the '''build directory''' `vs9`, we call CMake to generate the Visual Studio 9 project:\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk-build\vs9> cmake ..\..\seqan-trunk -G "Visual Studio 9 2008"\n}}}\n\n{{{#!InfoBox\n'''Information:''' Using a different version or multiple versions of Visual Studio.\n\nUsing a different Visual Studio version is easy:\nSimply use the appropriate generator.\nFor example, here is how to use the Visual Studio 10 generator:\n\n{{{#!ShellBox\nC:\...\seqan-trunk-build\vs10> cmake ..\..\seqan-trunk -G "Visual Studio 10"\n}}}\n\nAlso, if you want to create 64 bit builds, you need to use another generator.\nChanging generators in an existing project directory is not possible.\n\n * If you use another version of Visual Studio, you can find out the correct parameter by typing `cmake --help`.\n * If you plan to use different versions of Visual Studio then follow the How To [wiki:HowTo/UseParallelBuildDirectories Use Parallel Build Directories].\n * Note that you have to choose the "Win64" variants of the "Visual Studio" generators if you want to build 64 bit binaries.\n}}}\n\nNow, you can open the project file from the Windows explorer:\nGo to the `C:\Users\seqan_dev\Development\seqan-trunk-build\vs9\core\apps` directory and double click on the file `seqan_core_apps.sln`.\nIn the [[MenuTrace(Solution Explorer)]] to the left you will find all applications of the SeqAn core.\n\n[[Image(source:/trunk/core/demos/tutorial/getting_started/win_solution_explorer.png, 500px, align=center)]]\n\nAs an example you can open, compile, and execute the program RazerS 2.\nClick on the [[MenuTrace(+)]]/[[MenuTrace(▷)]] in front of [[MenuTrace(razers2)]] in the Solution Explorer and also on the [[MenuTrace(+)]]/[[MenuTrace(▷)]] in front of [[MenuTrace(Source Files)]].\nDouble click on the file [[MenuTrace(razers.cpp)]] to open it in the main window.\nRight click on [[MenuTrace(razers2)]] in the Solution Explorer and choose [[MenuTrace(Set as StartUp Project)]] from the context menu.\n\n[[Image(source:/trunk/core/demos/tutorial/getting_started/win_start_up_project.png, 500px, align=center)]]\n\nTo compile and execute RazerS 2, choose [[MenuTrace(Debug,Start Without Debugging)]] from the main menu or press [[MenuTrace(Ctrl)]]+[[MenuTrace(F5)]].\n\nOn successful compilation and execution, a terminal windows should pop up and display:\n\n{{{#!ShellBox\n***********************************************************\n*** RazerS - Fast Read Mapping with Sensitivity Control ***\n***          (c) Copyright 2009 by David Weese          ***\n***********************************************************\nUsage: razers2.exe [OPTION]... <GENOME FILE> <READS FILE>\n       razers2.exe [OPTION]... <GENOME FILE> <MP-READS FILE1> <MP-READS FILE2>\nTry 'razers2.exe --help' for more information.\nPress any key to continue . . .\n}}}\n\n{{{#!InfoBox\n'''Information:''' Starting with and without Debugging in Visual Studio\n\nStarting a program without debugger in Visual Studio will make the program wait for the user pressing a key.\nThis is very useful for inspecting the output.\nIn Debug mode, the program does not wait when executed and the window simply disappears.\nThe reason for this is that when using the debugger, the user is expected to set a breakpoint.\n}}}\n\n== Hello World! ==\n\nNow, let us create a '''sandbox''' for you.\nThis sandbox will be your local workspace and you might want to have it versionized on your own Subversion repository at a later point.\nAll of your development will happen in your sandbox.\n\nWe go back to the source directory and then use the SeqAn code generator to create a new sandbox.\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk-build\vs9> cd ..\..\seqan-trunk\nC:\Users\seqan_dev\Development\seqan-trunk> python util\bin\skel.py repository sandbox\my_sandbox\n}}}\n\nWithin this sandbox, we can now create a new application using the code generator.\n\n{{{#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk> python util\bin\skel.py app first_app sandbox\my_sandbox\n}}}\n\nDetails about the code generator are explained in [wiki:HowTo/UseTheCodeGenerator How To: Use the code generator].\n\n{{{\n#!InfoBox\n'''Information:''' When and where do you have to call CMake?\n\nCMake is a cross-platform tool for creating and updating build files (IDE projects or Makefiles).\nWhen you first create the build files, you can configure things such as the build mode or the type of the project files.\n\nWhenever you add a new application, a demo or a test or whenever you make changes to `CMakeLists.txt` you need to call CMake again.\nSince CMake remembers the settings you chose the first time you called CMake in a file named `CMakeCache.txt`, all you have to do is to switch to your `debug` or `release` build directory and call "`cmake .`" in there.\n\n{{{\n#!ShellBox\n~ # cd $HOME/Development/seqan-trunk-build/debug\ndebug # cmake .\n}}}\n\nDo not try to call "`cmake .`" from within the `seqan-trunk` directory '''but only from your build directory'''.\n}}}\n\nThe step above creates the starting point for a real-world application, including an argument parser and several other things that are a bit too complicated to fit into the Getting Started tutorial.\nTherefore, we will replace the program of the app `first_app` with a very simple example program.\n\nOpen the file `C:\Users\seqan_dev\Development\seqan-trunk\sandbox\my_sandbox\first_app\first_app.cpp` with the Visual Studio text editor and replace its contents with the following:\n\n{{{\n#!cpp\n#include <iostream>\n#include <seqan/sequence.h>  // CharString, ...\n#include <seqan/file.h>      // to stream a CharString into cout\n\nint main(int, char const **)\n{\n    std::cout << "Hello World!" << std::endl;\n    seqan::CharString mySeqanString = "Hello SeqAn!";\n    std::cout << mySeqanString << std::endl;\n    return 1;\n}\n}}}\n\nNow, we go back into the build directory and call CMake again to make it detect the added app.\n\n{{{\n#!ShellBox\nC:\Users\seqan_dev\Development\seqan-trunk> cd ..\seqan-trunk-build\vs9\nC:\Users\seqan_dev\Development\seqan-trunk-build\vs9> cmake .\n}}}\n\nNow, you can open the project file `C:\Users\seqan_dev\Development\seqan-trunk-build\vs9\sandbox\my_sandbox\seqan_sandbox_my_sandbox.sln` for your sandbox using Visual Studio.\nRight-click [[MenuTrace(first_app)]] in the [[MenuTrace(Solution Explorer)]] and click [[MenuTrace(Set as StartUp Project)]].\nNow, start the program without debugging using [[MenuTrace(Debug,Start Without Debugging)]].\n\nVisual Studio will now compile your program and execute it.\nA command line window will pop up and should display the following.\n\n{{{\n#!ShellBox\nHello World!\nHello SeqAn!\nPress any key to continue . . .\n}}}\n\nCongratulations, you have successfully created your first application within the SeqAn build system using Visual studio.\n\n== Further Steps ==\n\nAs a next step, we suggest the following:\n\n * [wiki:Tutorial Continue with the Tutorial]\n * If you have not done so, install optional dependencies of SeqAn.\n   To read and write compressed files, follow [wiki:HowTo/InstallContribsWindows How To: Install Contribs On Windows].\n * Look around in the files in `sandbox/my_sandbox/apps/first_app` or the demos in `core/demos` and `extras/demos`.\n * For the tutorial, using the SeqAn build system is great!\n   If you later want to use SeqAn as a library, have a look at [wiki:HowTo/UseSeqAnInYourProjects How To: Use SeqAn In Your Projects].	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:55.987+02:00	TYPING-comment-	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:56.108+02:00	TYPING-comment-	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:56.292+02:00	TYPING-comment-T	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:56.596+02:00	TYPING-comment-Ty	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:40:56.699+02:00	TYPING-comment-Typ	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio?action=edit	160.45.111.85	-	0	0	1214	683
2013-04-08T12:41:13.899+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	0	1214	683
2013-04-08T12:41:18.933+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	283	1214	683
2013-04-08T12:41:21.585+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	283	1214	683
2013-04-08T12:41:21.584+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	283	1214	683
2013-04-08T13:25:40.060+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	283	1214	683
2013-04-08T13:25:41.041+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	283	1214	683
2013-04-08T13:25:41.040+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	283	1214	683
2013-04-08T13:26:42.925+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	846	1214	683
2013-04-08T13:28:54.836+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/WindowsVisualStudio	160.45.111.85	-	0	846	1214	683
2013-04-08T13:44:48.065+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1214	683
2013-04-08T13:44:50.841+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1214	683
2013-04-08T13:44:52.864+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1214	683
2013-04-08T13:44:55.382+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1403	1214	683
2013-04-08T13:44:58.980+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1403	1214	683
2013-04-08T13:44:59.583+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	0	1214	683
2013-04-08T13:45:02.060+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	383	1214	683
2013-04-08T13:45:05.817+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	1143	1214	683
2013-04-08T13:45:14.165+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	448	1214	683
2013-04-08T13:45:25.393+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	646	1214	683
2013-04-08T13:45:37.954+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	748	1214	683
2013-04-08T13:45:42.562+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	1127	1214	683
2013-04-08T13:46:13.601+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	1127	1214	683
2013-04-08T13:46:29.197+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	1127	1214	683
2013-04-08T13:46:50.158+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2547	1214	683
2013-04-08T13:46:54.514+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2439	1214	683
2013-04-08T13:47:07.660+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2703	1214	683
2013-04-08T13:47:29.862+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	897	683
2013-04-08T13:47:33.150+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1178	683
2013-04-08T13:47:35.305+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1178	683
2013-04-08T13:47:55.662+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1178	683
2013-04-08T13:47:56.351+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1178	683
2013-04-08T13:47:57.545+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1178	683
2013-04-08T13:48:01.717+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1178	683
2013-04-08T13:48:01.718+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1178	683
2013-04-08T13:54:05.267+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1178	683
2013-04-08T13:54:05.450+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1178	683
2013-04-08T15:38:29.482+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1231	682
2013-04-08T15:38:30.997+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1231	682
2013-04-08T15:38:31.047+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1231	682
2013-04-08T17:00:13.320+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2878	1231	639
2013-04-09T09:04:38.381+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T09:04:40.084+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	87.77.216.245	-	0	0	1276	683
2013-04-09T09:04:43.330+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T09:04:45.387+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	87.77.216.245	-	0	0	1276	683
2013-04-09T09:04:47.646+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted	87.77.216.245	-	0	144	1276	683
2013-04-09T09:04:48.879+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	87.77.216.245	-	0	143	1276	683
2013-04-09T09:04:54.707+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	87.77.216.245	-	0	261	1276	683
2013-04-09T09:04:56.698+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	87.77.216.245	-	0	261	1276	683
2013-04-09T09:05:15.516+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/GettingStarted/LinuxMakefiles	87.77.216.245	-	0	261	1276	683
2013-04-09T09:05:17.673+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	87.77.216.245	-	0	144	1276	683
2013-04-09T09:05:18.610+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T09:05:20.052+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-09T09:10:18.647+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-09T09:10:18.642+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-09T09:11:24.398+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-09T09:11:30.734+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-09T09:11:50.419+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	87.77.216.245	-	0	0	1276	683
2013-04-09T09:11:51.315+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	42	1276	683
2013-04-09T09:11:52.930+02:00	READY	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	81	1276	683
2013-04-09T09:11:57.092+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	265	1276	683
2013-04-09T09:11:59.882+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	143	1276	683
2013-04-09T09:12:04.661+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	338	1276	683
2013-04-09T09:12:13.678+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	1100	1276	683
2013-04-09T09:12:20.594+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	618	1276	683
2013-04-09T09:12:28.345+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	1456	1276	683
2013-04-09T09:12:30.979+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	1456	1276	683
2013-04-09T09:12:33.238+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	1512	1276	683
2013-04-09T09:12:36.576+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	1923	1276	683
2013-04-09T09:12:41.990+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2336	1276	683
2013-04-09T09:12:53.847+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2669	1276	683
2013-04-09T09:12:57.020+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2800	1276	683
2013-04-09T09:13:02.297+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3139	1276	683
2013-04-09T09:13:11.451+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3646	1276	683
2013-04-09T09:14:27.209+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3683	1276	683
2013-04-09T09:14:39.723+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:14:50.933+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:14:50.934+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:27:44.709+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:27:45.477+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:27:52.677+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:27:53.045+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:27:53.046+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:35:16.761+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:35:17.645+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:35:17.647+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:35:17.982+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:35:20.118+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:35:20.116+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:35:33.617+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3717	1276	683
2013-04-09T09:35:47.745+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3712	1276	683
2013-04-09T09:35:54.559+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3721	1276	683
2013-04-09T09:35:59.948+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2226	1276	683
2013-04-09T09:36:04.905+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	536	1276	683
2013-04-09T09:36:21.856+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3671	1276	683
2013-04-09T09:36:27.251+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4520	1276	683
2013-04-09T09:36:40.698+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4667	1276	683
2013-04-09T09:36:47.979+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4716	1276	683
2013-04-09T09:38:42.671+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4172	1276	683
2013-04-09T09:38:43.647+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4172	1276	683
2013-04-09T09:38:43.648+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4172	1276	683
2013-04-09T09:38:47.483+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4370	1276	683
2013-04-09T09:38:52.411+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4778	1276	683
2013-04-09T09:39:05.035+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2924	1276	683
2013-04-09T09:39:10.863+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	862	1276	683
2013-04-09T09:39:15.587+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	862	1276	683
2013-04-09T09:39:15.588+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	862	1276	683
2013-04-09T09:40:32.659+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	862	1276	683
2013-04-09T09:40:36.344+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T09:40:45.169+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T09:40:45.170+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:12:03.892+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:12:06.740+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:12:06.742+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:12:08.411+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:12:08.886+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:12:08.884+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:14:15.726+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:14:15.724+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:14:14.130+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:14:17.309+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:16:07.718+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:16:07.714+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:21:03.845+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:21:03.966+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:21:42.248+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	913	1276	683
2013-04-09T10:24:03.401+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3640	1276	683
2013-04-09T10:24:03.399+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3640	1276	683
2013-04-09T10:24:43.254+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3640	1276	683
2013-04-09T10:24:44.566+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2978	1276	683
2013-04-09T10:24:44.567+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2978	1276	683
2013-04-09T10:24:46.717+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2941	1276	683
2013-04-09T10:24:58.941+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2941	1276	683
2013-04-09T10:25:00.242+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3064	1276	683
2013-04-09T10:25:00.758+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3064	1276	683
2013-04-09T10:25:00.874+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3064	1276	683
2013-04-09T10:25:01.629+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3064	1276	683
2013-04-09T10:25:01.753+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3064	1276	683
2013-04-09T10:25:01.849+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3064	1276	683
2013-04-09T10:25:02.829+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	3064	1276	683
2013-04-09T10:25:03.746+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	1715	1276	683
2013-04-09T10:25:05.739+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	1715	1276	683
2013-04-09T10:43:43.991+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T10:43:44.278+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T10:43:44.277+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T10:43:46.489+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-09T10:43:46.570+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-09T10:43:48.712+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	626	1276	683
2013-04-09T10:43:49.583+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	0	1276	683
2013-04-09T10:43:57.413+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6718	1276	683
2013-04-09T10:44:09.020+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6736	1276	683
2013-04-09T10:44:12.689+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6736	1276	683
2013-04-09T10:45:19.686+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6736	1276	683
2013-04-09T10:45:22.577+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6552	1276	683
2013-04-09T10:45:26.317+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5831	1276	683
2013-04-09T10:45:34.640+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	0	1276	683
2013-04-09T10:45:35.632+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	1715	1276	683
2013-04-09T10:45:35.630+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	0	1276	683
2013-04-09T10:45:48.698+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4740	1276	683
2013-04-09T10:45:53.543+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4994	1276	683
2013-04-09T10:45:57.819+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4305	1276	683
2013-04-09T10:46:14.904+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4065	1276	683
2013-04-09T10:46:16.220+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4065	1276	683
2013-04-09T10:46:18.828+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4557	1276	683
2013-04-09T10:46:23.120+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4766	1276	683
2013-04-09T10:46:36.532+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	6109	1276	683
2013-04-09T10:46:38.283+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	6390	1276	683
2013-04-09T10:46:40.161+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	6438	1276	683
2013-04-09T10:46:50.547+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7027	1276	683
2013-04-09T10:47:03.657+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7081	1276	683
2013-04-09T10:47:14.162+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7312	1276	683
2013-04-09T10:47:17.656+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7294	1276	683
2013-04-09T10:47:21.520+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7707	1276	683
2013-04-09T10:47:42.377+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7707	1276	683
2013-04-09T10:47:45.964+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	8159	1276	683
2013-04-09T10:47:48.543+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7707	1276	683
2013-04-09T10:47:49.942+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7707	1276	683
2013-04-09T10:47:50.545+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7707	1276	683
2013-04-09T10:47:51.302+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7707	1276	683
2013-04-09T10:47:52.397+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7707	1276	683
2013-04-09T10:47:52.398+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7707	1276	683
2013-04-09T10:47:53.303+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7707	1276	683
2013-04-09T10:49:50.301+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7707	1276	683
2013-04-09T10:49:55.640+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	5449	1276	683
2013-04-09T10:49:57.151+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	4603	1276	683
2013-04-09T10:49:58.266+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7590	1276	683
2013-04-09T10:49:59.184+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7590	1276	683
2013-04-09T10:50:00.246+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7590	1276	683
2013-04-09T10:50:00.651+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7590	1276	683
2013-04-09T10:50:05.327+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	8155	1276	683
2013-04-09T10:50:13.770+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	8146	1276	683
2013-04-09T10:50:13.967+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	8146	1276	683
2013-04-09T10:50:17.220+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7818	1276	683
2013-04-09T10:50:23.918+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	8176	1276	683
2013-04-09T10:50:26.673+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	8384	1276	683
2013-04-09T10:50:30.266+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	8239	1276	683
2013-04-09T10:50:41.071+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7932	1276	683
2013-04-09T10:50:46.666+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7712	1276	683
2013-04-09T10:50:53.414+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7537	1276	683
2013-04-09T10:50:58.035+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7537	1276	683
2013-04-09T10:50:58.045+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7537	1276	683
2013-04-09T10:51:04.506+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	6641	1276	683
2013-04-09T10:51:05.210+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	6641	1276	683
2013-04-09T11:26:30.401+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7706	1276	683
2013-04-09T11:26:30.981+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	7706	1276	683
2013-04-09T11:26:37.269+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	6763	1276	683
2013-04-09T11:26:49.388+02:00	READY	https://trac.seqan.de/	87.77.216.245	-	0	0	1276	647
2013-04-09T11:26:54.445+02:00	SCROLL	https://trac.seqan.de/	87.77.216.245	-	0	417	1276	647
2013-04-09T11:26:59.624+02:00	READY	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	333	1276	683
2013-04-09T11:27:02.282+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:05.444+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:27.963+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<AminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:28.018+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<AminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:28.026+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:38.169+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:39.337+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<AminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:39.506+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<sAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:39.595+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:39.852+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seaAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:40.001+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seanAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:40.067+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seanAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:40.187+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<sean:AminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:40.923+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<sean::AminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:41.051+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<sean:AminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:41.186+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seanAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:41.322+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seaAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:41.426+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:41.969+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seqAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:42.049+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seqaAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:42.138+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seqanAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:42.242+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seqanAminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:42.371+02:00	TYPING-text-= A First Example =\n\n[[TOC()]]\n\n Learning Objective :: You will learn the most basic concepts of SeqAn. After this tutorial you will be ready to deal with the more specific tutorials, e.g. Sequences.\n Difficulty :: Very basic\n Duration :: 1,5h\n Prerequisites :: Basic C or C++ knowledge\n\nWelcome to the SeqAn "Hello World".\nThis is the first practical tutorial you should look at when starting to use our software library.\n\nWe assume that you have some programming experience (preferably in C++ or C) and concentrate on SeqAn specific aspects.\nWe will start out pretty slowly and hopefully the tutorial will make sense to you even if you are new to C++.\nHowever, to really leverage the power of SeqAn you will have to learn C++.\nThere are many tutorials on C++, for example [http://www.cplusplus.com/doc/tutorial/ the tutorial at cplusplus.com].\n\nThis tutorial will walk you through a simple example program that highlights the things that are most prominently different from the libraries that many SeqAn newcomers are used to:\n   * extensive usage of C++ templates, \n   * generic programming using templates, \n   * using references instead of pointers in most places, \n   * ...\n\n== Running Example ==\n\nOur example program will do a pattern search of a short query sequence in a long database sequence.\nAs the score, we will compute the number of equal characters at each position.\n\nThe following figure shows an example:\n\n{{{\nscore:    101 ...        ... 801 ...\ntext:     This is an awesome tutorial to get to know SeqAn!\npattern:  tutorial           tutorial\n           tutorial           tutorial\n            ...                ...\n                            \n}}}\n\nThe first position has a score of 1, because the {{{i}}} in the pattern match with the {{{i}}} in {{{is}}}.\nThis is only a toy example for explanatory reasons and we ignore any more advanced implementations. \n\nIn SeqAn the program could look like this (we will explain every line of code shortly):\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code.cpp, fragment=all)]]\n\nWhenever we use SeqAn classes or functions we have to explicitly write the namespace qualifier `seqan::` in front of the class name or function.\nThis can be circumvented if we include the line `using namespace seqan;` at the top of the working example.\nHowever, during this tutorial we will not do this, such that SeqAn classes and functions can be recognized more easily.\n\n{{{#!comment\n{{{#!InfoBox\n'''In-Depth Information:''' Argument-Dependent Name Lookup (Koenig Lookup)\n\nUsing the namespace prefix `seqan::` is not really necessary in all places.\nIn many cases, the Koenig lookup rule in C++ for functions makes this unnecessary.\nConsider the following, compiling, example.\n\n{{{#!cpp\nseqan::String<char> s = "example";\nunsigned i = length(s);\n}}}\n\nHere, the function `length` does not have a namespace prefix.\nThe code compiles nevertheless.\nThe compiler automatically looks for a function `length` in the namespace of its arguments.\n}}}\n}}}\n\nNote that we follow the rules for variable, function, and class names as outlined in the [wiki:StyleGuide/Cpp SeqAn style guide].\nFor example: (1) variables and functions use lower case, (2) struct, enum and classes use PascalCase, (3) metafunctions start with a capital letter, and (4) metafunction values are UPPERCASE.\n\n{{{#!comment\nThis will be explained later in "The SeqAn Style Guide" box.\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Create a demo program and replace its content with the code above.\n Hint ::\n  Depending on your operating system you have different alternatives to create a demo application. An in depth description can be found in GettingStarted.\n Solution :: \n  Click ''more...''\n\n{{{#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_1.cpp)]]\n}}}\n}}}\n\n== SeqAn and Templates ==\n\nLet us now have a detailed look at the program.\n\nWe first include the IOStreams library that we need to print to the screen and the SeqAn's ```file.h``` as well as ```sequence.h``` module from the SeqAn library that provides SeqAn seqan:Class.String.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=includes)]]\n\nThe seqan:Class.String class is one of the most fundamental classes in SeqAn, which comes as no surprise since SeqAn is used to analyse sequences (there is an extra tutorial for SeqAn [wiki:Tutorial/Sequences sequences] and [wiki:Tutorial/Alphabets alphabets]).\n\nIn contrast to the popular string classes of Java or C++, SeqAn provides different string implementations and different alphabets for its strings.\nThere is one string implementation that stores characters in memory, just like normal C++ strings.\nAnother string implementation stores the characters on disk and only keeps a part of the sequence in memory.\nFor alphabets, you can use strings of nucleotides, such as genomes, or you can use strings of amino acids, for example.\n\nSeqAn uses '''template functions''' and '''template classes''' to implement the different types of strings using the '''generic programming''' paradigm.\nTemplate functions/classes are normal functions/classes with the additional feature that one passes the type of a variable as well as its value (see also: [http://www.cplusplus.com/doc/tutorial/templates/ templates in cpp]).\nThis means that SeqAn algorithms and data structures are implemented in such a way that they work on all types implementing an informal interface (see information box below for more details).\nThis is similar to the philosophy employed in the C++ STL (Standard Template Library).\nEven though we provide further tutorials on templates in SeqAn ([BasicTechniques Tutorial Basic Techniques], [Tutorial/Metafunctions Tutorial Metafunctions], [TemplateSubclassing Tutorial Template Subclassing], [GlobalFunction Tutorial Global Functions].), they are more advanced and not required to follow this tutorial.\n\nThe following two lines make use of template programming to define two strings of type char, a text and a pattern. \n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=sequences)]]\n\nIn order to store the similarities between the pattern and different text positions we additionally create a string storing integer values.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=score)]]\n\nNote that in contrast to the first two string definitions we do not know the values of the different positions in the string in advance. \nIn order to dynamically adjust the length of the new string to the text we can use the function seqan:Function.resize.\nThe resize function is not a member function of the string class because SeqAn is not object oriented in the typical sence (we will see later how we adapt SeqAn to object oriented programming).\nTherefore, instead of writing '''string.resize(newLength)''' we use '''resize(string, newLength)'''.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=resize)]]\n\n{{{#!InfoBox\n'''Information:''' Global function interfaces.\n\nSeqAn uses '''global interfaces''' for its data types/classes.\nGenerally, you have to use `function(variable)` instead of `variable.function()`.\n\nThis has the advantage that we can extend the interface of a type outside of its definition.\nFor example, we can provide a `length()` function for STL containers `std::string<T>` and `std::vector<T>` outside their class files.\nWe can use such global functions to make one data type have the same interface as a second.\nThis is called '''adaption'''.\n\nAdditionally, we can use one function definition for several data types.\nFor example, the alignment algorithms in SeqAn are written such that we can compute alignments using any seqan:Class.String with any alphabet:\nThere are more than 5 seqan:Class.String variants in SeqAn and more than 8 built-in alphabets.\nThus, one implementation can be used for more than 40 different data types!\n}}}\n\nAfter the string initializations it is now time for the similarity computation.\nIn this toy example we simply take the pattern and shift it over the text from left to right.\nAfter each step, we check how many characters are equal between the corresponding substring of the text and the pattern.\nWe implement this using two loops; the outer one iterates over the given text and the inner loop over the given pattern:\n\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=similarity)]]\n\nThere are two things worth mentioning here:\n(1) SeqAn containers or strings start at position 0 and (2) you will notice that we use `++variable` instead of `variable++` wherever possible.\nThe reason is that `++variable` is slightly faster than its alternative, since the alternative needs to make a copy of itself before returning the result.\n\nIn the last step we simply print the result that we stored in the variable ```score``` on screen.\nThis gives the similarity of the pattern to the string at each position.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/basic_code_detailed.cpp, fragment=print)]]\n\n== Code Encapsulation ==\n\nAt this point, we have already created a working solution!\nHowever, in order to make it easier to maintain and reuse parts of the code we need to export them into functions. \nIn this example the interesting piece of code is the similarity computation, which consists of an outer and inner loop.\nWe encapsulate the outer loop in function `computeScore` and the inner loop in function `computeLocalScore` as can be seen in the following code.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/code_encapsulation.cpp, fragment=all)]]\n\nThe function computeScore() now contains the fundamental part of the code and can be reused by other functions. \nThe input arguments are two strings. \nOne is the pattern itself and one is a substring of the text. \nIn order to obtain the substring we can use the function seqan:Function.infix implemented in SeqAn.  \nThe function call `infix(text, i, j)` generates a substring equal to `text[i ... j - 1]`, e.g. `infix(text, 1, 5)` equals "ello", where `text` is "Hello World".\nTo be more precise, infix() generates a seqan:Spec.InfixSegment which can be used as a string, but is implemented using pointers such that no copying is necessary and running time and memory is saved.\n\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Replace the code in your current file by the code above and encapsulate the print instructions.\n Hint ::\n  The function head should look like this:\n{{{#!cpp\nvoid print(String<int> score)\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_2.cpp)]]\n}}}\n}}}\n\n== The Role of References in SeqAn ==\n\nLet us now have a closer look at the signature of `computeScore()`.\n\nBoth the text and the pattern are passed ''by value''.\nThis means that both the text and the pattern are copied when the function is called, which consumes twice the memory.\nThis can become a real bottleneck since copying longer sequences is very memory and time consuming, think of the human genome, for example.\n\nInstead of copying we could use '''references'''.\nA reference in C++ is created using an ampersand sign (`&`) and creates an alias to the referenced value.\nBasically, a reference is a pointer to an object which can be used just like the referenced object itself.\nThis means that when you change something in the reference you also change the original object it came from.\nBut there is a solution to circumvent this modification problem as well, namely the word '''const'''.\nA `const` object cannot be modified.\n\n{{{#!InfoBox\nIf an object does not need to be modified make it an nonmodifiably object using the keyword 'const'.\nThis makes it impossible to ''unwillingly'' change objects, which can be really hard to debug. \nTherefore it is recommended to use it as often as possible.\n}}}\n\nTherefore we change the signature of computeScore to:\n\n{{{#!cpp\nseqan::String<int> computeScore(seqan::String<char> const & text, seqan::String<char> const & pattern)\n}}}\n\nReading from right to left the function expects two `references` to `const objects` of type `String` of `char`.\n\n=== Assignment 3 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective :: \n  Adjust your current code to be more memory and time efficient by using references in the function header.\n Hint ::\n  The function head for `computeLocalScore` should look like this:\n{{{\n#!FoldOut\n----\n{{{#!cpp\nvoid computeLocalScore(seqan::String<char> const & subText, seqan::String<char> const & pattern)\n}}}\n}}}\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_3.cpp)]]\n}}}\n}}}\n\n== Generic and Reusable Code ==\n\nAs mentioned earlier, there is another issue:\nThe function computeScore only works for Strings having the alphabet `char`. \nIf we wanted to use it for `Dna` or `AminoAcid` strings then we would have to reimplement it even though the only difference is the signature of the function.\nAll used functions inside `computeScore` can already handle the other datatypes.\n\nThe more appropriate solution is a generic design using templates, as often used in the SeqAn library.\nInstead of specifying the input arguments to be references of strings of `char`s we could use references of template arguments as shown in the following lines:\n\n{{{#!cpp\ntemplate <typename TText, typename TPattern>\nseqan::String<int> computeScore(TText const & text, TPattern const & pattern)\n}}}\n\nThe first line above specifies that we create a template function with two template arguments `TText` and `TPattern.`\nAt compile time the template arguments are then replace with the correct types. \nIf this line was missing the compiler would expect that there are types TText and TPattern with definitions.\n\nNow the function signature is better in terms of memory consumption, time efficiency, and generality.\n\n{{{#!comment\n{{{#!InfoBox\n'''Information:''' The SeqAn Style Guide\n\nThe [wiki:StyleGuide/Cpp SeqAn style guide] gives rules for formatting and structuring C++ code as well as naming conventions.\nSuch rules make the code more consistent, easier to read, and also easier to use.\n\n 1. '''Naming Scheme'''.\n    Variable and function names are written in `lowerCamelCase`, type names are written in `UpperCamelCase`.\n    Constants and enum values are written in `UPPER_CASE`.\n    Template variable names always start with 'T'.\n 1. '''Function Parameter Order'''.\n    The order is (1) output, (2) non-const input (e.g. file handles), (3) input, (4) tags.\n    Output and non-const input can be modified, the rest is left untouched and either passed by copy or by const-reference (`const &`).\n 1. '''Global Functions'''.\n    With the exception of constructors and a few operators that have to be defined in-class, the interfaces in SeqAn use global functions.\n 1. '''No Exceptions'''.\n    The SeqAn interfaces do not throw any exceptions.\n\nWhile we are trying to make the interfaces consistent with our style guide, some functions have incorrect parameter order.\nThis will change in the near future to be more in line with the style guide.\n}}}\n}}}\n\n\n=== Assignment 4 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Generalize the `computeLocalScore` function in your file. \n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_4.cpp)]]\n}}}\n}}}\n\n== From Object-Oriented Programming to SeqAn ==\n\nThere is another huge advantage of using templates:\nWe can specialize a function without touching the existing function. \nIn our working example it might be more appropriate to treat `AminoAcid` sequences differently.\nAs you probably know, there is a similarity relation on amino acids:\nCertain amino acids are more similar to each other, than others. \nTherefore we want to score different kinds of mismatches differently.\nIn order to take this into consideration we simple write a `computeLocalScore()` function for `AminoAcid` strings.\nIn the future whenever 'computerScore' is called always the version above is used unless the second argument is of type String<AminoAcid>.\nNote that the second template argument was removed since we are using the specific type String-AminoAcid.\n\n{{{#!cpp\ntemplate <typename TText>\nint computeLocalScore(TText const & subText, seqan::String<seqan:AminoAcid> const & pattern)\n{\n    int localScore = 0;\n    for (unsigned i = 0; i < seqan::length(pattern); ++i)\n        localScore += seqan::score(seqan::Blosum62(), subText[i], pattern[i]);\n    \n    return localScore;\n}\n}}}\n\nIn order to score a mismatch we use the function `score()` from the SeqAn library.\nNote that we use the seqan:Shortcut.Blosum62 matrix as a similarity measure. \nWhen looking into the documentation of seqan:Function.score you will notice that the score function requires a argument of type seqan:Class.Score. \nThis object tells the function how to compare two letters and there are several types of scoring schemes available in SeqAn (of course, you can extend this with your own).\nIn addition, because they are so frequently used there are shortcuts as well. \nFor example seqan:Shortcut.Blosum62 is really a '''shortcut''' for `Score<int, ScoreMatrix<AminoAcid, Blosum62_> >`, which is obviously very helpful. \nOther shortcuts are `DnaString` for `String<Dna>` ([wiki:Tutorial/Sequences sequence tutorial]), `CharString` for `String<char>`, ...\n\n{{{#!InfoBox\n'''In-Depth Information:''' Template Subclassing\n\nThe main idea of template subclassing is to exploit the C++ template matching mechanism.\nFor example, in the following code, the function calls (1) and (3) will call the function `myFunction()` in variant (A) while the function call (2) will call variant (B).\n\n{{{\n#!cpp\nstruct SpecA;\nstruct SpecB;\nstruct SpecC;\n\ntemplate <typename TAlphabet, typename TSpec>\nclass String<TAlphabet, TSpec>;\n\ntemplate <typename TAlphabet, typename TSpec>\nvoid myFunction(String<TAlphabet, TSpec> const & str);  // Variant (A)\n\ntemplate <typename TAlphabet>\nvoid myFunction(String<TAlphabet, SpecB> const & str);  // Variant (B)\n\n// ...\n\nint main()\n{\n    String<char, SpecA> a;\n    String<char, SpecB> b;\n    String<char, SpecC> c;\n\n    myFunction(a);            // calls (A)\n    myFunction(b);            // calls (B)\n    myFunction(c);            // calls (A)\n}\n}}}\n\nFor a detailed description and more examples see the tutorial [wiki:Tutorial/TemplateSubclassing Template Subclassing].\n}}}\n\n=== Assignment 5 ===\n{{{#!AssignmentBox\n Type ::\n  Application\n Objective :: \n  Provide a generic print function which is used when the input type is not `String<int>`. \n Hint ::\n  Keep your current implementation and add a second function. Don't forget to make both template functions. Include '''seqan/score.h''' as well.\n Solution :: \n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_5.cpp)]]\n}}}\n}}}\n\n== Tags in SeqAn ==\n\nSometimes you will see something like this:\n{{{#!cpp\nglobalAlignment(align, seqan::MyersHirschberg())\n}}}\n\nHaving a closer look you will notice that there is a default constructor call (```MyersHirschberg()```) within a function call.\nUsing this mechanism one can specify which function to call at compile time.\nThe ```MyersHirschberg()``` is only a tag to determine which specialisation of the ```globalAligment``` function to call.\n\n{{{#!FoldOut\nIf you want more information on tags click on more otherwise you are now ready to explore SeqAn in more detail and continue with one of the other tutorials. \n----\nThere is another use case of templates and function specialization. \n\nThis might be useful in a `print()` function, for example.\nIn some scenarios, we only want to print the position where the maximal similarity between pattern and text is found.\nIn other cases, we might want to print the similarities of all positions.\nIn SeqAn, we use '''tag-based dispatching''' to realize this.\nHere, the type of the '''tag''' holds the specialization information.\n\n{{{#!InfoBox\n'''Information:''' Tag-Based Dispatching\n\nYou will often see '''tags''' in SeqAn code, e.g. `Standard()`.\nThese are parameters to functions that are passed as const-references.\nThey are not passed for their values but for their type only.\nThis way, we can select different specializations at '''compile time''' in a way that plays nicely together with metafunctions, template specializations, and an advanced technique called [wiki:Tutorial/BasicTechniques metaprogramming].\n\nConsider the following example:\n\n{{{\n#!cpp\nstruct TagA {};\nstruct TagB {};\n\nvoid myFunction(TagA const &);  // (1)\nvoid myFunction(TagB const &);  // (2)\n\nint main()\n{\n    myFunction(TagA());  // (3)\n    myFunction(TagB());  // (4)\n    return 0;\n}\n}}}\n\nThe function call in line (3) will call `myFunction()` in the variant in line (1).\nThe function call in line (4) will call `myFunction()` in the variant in line (2).\n}}}\n\nThe code for the two different `print()` functions mentioned above could look like this:\n\n{{{#!cpp\n#include <iostream>\n#include <seqan/sequence.h>\n#include <seqan/score.h>\n\ntemplate <typename TText, typename TSpec>\nvoid print(TText const & text, TSpec const & /*tag*/)\n{\n    for (unsigned i = 0; i < seqan::length(text); ++i)\n        std::cout << text[i] << " ";\n    std::cout << std::endl;\n}\n                            \nstruct MaxOnly {};\n\ntemplate <typename TText>\nvoid print(TText const & score, MaxOnly const & /*tag*/)\n{\n    int maxScore = score[0];\n    seqan::String<int> output;\n    appendValue(output, 0);\n    for (unsigned i = 1; i < seqan::length(score); ++i)\n    {\n        if (score[i] > maxScore)\n        {\n            maxScore = score[i];\n            clear(output);\n            resize(output, 1, i);\n        }\n        else if (score[i] == maxScore)\n            appendValue(output, i);\n    }\n    \n    for (unsigned i = 0; i < seqan::length(output); ++i)\n        std::cout << output[i] << " ";\n    std::cout << std::endl;\n}\n}}}\n\nIf we call `print()` with something different than `MaxOnly` then we print all the positions with their similarity, because the generic template function accepts anything as the template argument. \nOn the other hand, if we call print with `MaxOnly` only the positions with the maximum similarity as well as the maximal similarity will be shown.\n\n=== Assignment 6 ===\n{{{#!AssignmentBox\n Type ::\n  Review\n Objective :: \n  Provide a print function that prints pairs of positions and their score if the score is greater than 0.\n Hints ::\n  SeqAn provides a data type seqan:Class.Pair.  \n Solution ::\n{{{\n#!FoldOut\n----\n[[Include(source:trunk/extras/demos/tutorial/first_steps/solution_6.cpp)]]\n}}}\n}}}\n\nObviously this is only a toy example in which we could have named the two `print()` functions differently. \nHowever, often this is not the case when the programs become more complex.\nBecause SeqAn is very generic we do not know the datatypes of template functions in advance. \nThis would pose a problem because the function call of function `b()` in function `a()` may depend on the data types of the template arguments of function `a()`.\n\n== The Final Result ==\n\nDon't worry if you have not fully understood the last section.\nIf you have - perfect.\nIn any case the take home message is that you use data types for class specializations and if you see a line of code in which the default constructor is written in a function call this typical means that the data type is important to distinct between different function implementations.\n\nNow you are ready to explore more of the SeqAn library.\nThere are several tutorials which will teach you how to use the different SeqAn data structures and algorithms.\nBelow you find the complete code for our example with the corresponding output.\n\n[[Include(source:trunk/extras/demos/tutorial/first_steps/final_result.cpp, fragment=result)]]\n\n=== Submit a  comment ===\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/Sequences&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-09T11:27:53.066+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:54.089+02:00	TYPING-comment-	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:54.249+02:00	TYPING-comment-na	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:54.298+02:00	TYPING-comment-nam	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:54.465+02:00	TYPING-comment-name	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:54.161+02:00	TYPING-comment-n	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:54.545+02:00	TYPING-comment-names	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:54.609+02:00	TYPING-comment-namesp	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:54.673+02:00	TYPING-comment-namespa	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:54.729+02:00	TYPING-comment-namespac	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:54.793+02:00	TYPING-comment-namespace	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:55.162+02:00	TYPING-comment-namespace 	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:55.235+02:00	TYPING-comment-namespace m	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:55.347+02:00	TYPING-comment-namespace mi	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:55.466+02:00	TYPING-comment-namespace mis	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:55.546+02:00	TYPING-comment-namespace miss	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:55.594+02:00	TYPING-comment-namespace missi	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:55.658+02:00	TYPING-comment-namespace missin	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:56.250+02:00	TYPING-comment-namespace missing	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:56.306+02:00	TYPING-comment-namespace missing 	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:56.385+02:00	TYPING-comment-namespace missing f	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:56.435+02:00	TYPING-comment-namespace missing fo	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:56.497+02:00	TYPING-comment-namespace missing for	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:56.553+02:00	TYPING-comment-namespace missing for 	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:56.658+02:00	TYPING-comment-namespace missing for 	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:56.761+02:00	TYPING-comment-namespace missing for A	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:56.858+02:00	TYPING-comment-namespace missing for Am	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:56.994+02:00	TYPING-comment-namespace missing for Ami	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:57.073+02:00	TYPING-comment-namespace missing for Amio	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:57.233+02:00	TYPING-comment-namespace missing for Amio	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:57.449+02:00	TYPING-comment-namespace missing for Amio	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:57.641+02:00	TYPING-comment-namespace missing for Ami	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:57.724+02:00	TYPING-comment-namespace missing for Amin	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:57.817+02:00	TYPING-comment-namespace missing for Amino	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:57.897+02:00	TYPING-comment-namespace missing for Amino	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:57.987+02:00	TYPING-comment-namespace missing for AminoA	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:58.129+02:00	TYPING-comment-namespace missing for AminoAc	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:27:58.217+02:00	TYPING-comment-namespace missing for AminoAci	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=edit	87.77.216.245	-	0	196	1276	683
2013-04-09T11:28:01.653+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	476	1276	683
2013-04-09T11:28:08.633+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T11:28:09.902+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T11:28:11.702+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2190	1276	683
2013-04-09T11:28:15.645+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	5896	1276	683
2013-04-09T11:28:19.600+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	6156	1276	683
2013-04-09T11:28:41.623+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=history	87.77.216.245	-	0	0	1276	683
2013-04-09T11:28:49.277+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=history	87.77.216.245	-	0	0	1276	683
2013-04-09T11:28:52.697+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=diff&old_version=37&version=38	87.77.216.245	-	0	0	1276	683
2013-04-09T11:28:56.049+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=diff&old_version=37&version=38	87.77.216.245	-	0	367	1276	683
2013-04-09T11:28:59.351+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=history	87.77.216.245	-	0	0	1276	683
2013-04-09T11:29:06.466+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=diff&old_version=35&version=36	87.77.216.245	-	0	0	1276	683
2013-04-09T11:29:09.186+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=history	87.77.216.245	-	0	0	1276	683
2013-04-09T11:29:14.959+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn?action=history	87.77.216.245	-	0	0	1276	683
2013-04-09T11:29:18.456+02:00	READY	https://trac.seqan.de/wiki	87.77.216.245	-	0	0	1276	683
2013-04-09T11:29:19.661+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T11:29:24.167+02:00	READY	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T11:29:32.479+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T11:29:32.478+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T11:29:48.383+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T11:30:50.863+02:00	LINK-https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T11:30:52.867+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	87.77.216.245	-	0	7175	1276	683
2013-04-09T11:30:58.528+02:00	LINK-https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	87.77.216.245	-	0	7175	1276	683
2013-04-09T11:31:03.810+02:00	LINK-https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	87.77.216.245	-	0	7188	1276	683
2013-04-09T11:31:05.812+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	87.77.216.245	-	0	7188	1276	683
2013-04-09T11:31:09.417+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	87.77.216.245	-	0	7188	1276	683
2013-04-09T11:31:09.418+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	87.77.216.245	-	0	7188	1276	683
2013-04-09T11:39:27.259+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	87.77.216.245	-	0	7188	1276	683
2013-04-09T11:39:28.226+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	87.77.216.245	-	0	7188	1276	683
2013-04-09T11:39:28.228+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	87.77.216.245	-	0	7188	1276	683
2013-04-09T13:33:27.276+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T13:33:29.271+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	292	1276	683
2013-04-09T13:33:32.656+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	0	1276	683
2013-04-09T13:33:37.057+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	1991	1276	683
2013-04-09T13:33:39.545+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6542	1276	683
2013-04-09T13:33:44.080+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6643	1276	683
2013-04-09T13:33:48.969+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6643	1276	683
2013-04-09T13:33:56.228+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	0	1276	683
2013-04-09T13:33:56.354+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:33:57.825+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6643	1276	683
2013-04-09T13:34:37.492+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	0	1276	683
2013-04-09T13:34:37.621+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:34:41.706+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	0	1276	683
2013-04-09T13:34:43.612+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6643	1276	683
2013-04-09T13:34:44.118+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	0	1276	683
2013-04-09T13:34:44.237+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:34:47.923+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	613	1276	683
2013-04-09T13:34:47.926+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:34:48.145+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:34:48.393+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:34:48.657+02:00	TYPING-search-I	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:34:48.753+02:00	TYPING-search-In	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:34:48.865+02:00	TYPING-search-Inf	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:34:48.936+02:00	TYPING-search-Infi	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:34:49.235+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	613	1276	683
2013-04-09T13:34:52.130+02:00	READY	http://docs.seqan.de/seqan/dev/METAFUNCTION_Infix.html	87.77.216.245	-	0	0	1276	683
2013-04-09T13:34:52.242+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Metafunction_Segments.html#Infix	87.77.216.245	-	0	0	180	683
2013-04-09T13:35:04.817+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	0	1276	683
2013-04-09T13:35:04.941+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:35:07.540+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	194	1276	683
2013-04-09T13:35:45.641+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	194	1276	683
2013-04-09T13:35:45.645+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	194	1276	683
2013-04-09T13:36:20.563+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	194	1276	683
2013-04-09T13:36:22.960+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	55	1276	683
2013-04-09T13:36:22.962+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	55	1276	683
2013-04-09T13:36:23.570+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	55	1276	683
2013-04-09T13:36:23.774+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	55	1276	683
2013-04-09T13:36:24.141+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	55	1276	683
2013-04-09T13:36:24.143+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	55	1276	683
2013-04-09T13:36:32.075+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	55	1276	683
2013-04-09T13:36:32.714+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	55	1276	683
2013-04-09T13:36:32.715+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	55	1276	683
2013-04-09T13:36:44.318+02:00	FOCUS	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	55	1276	683
2013-04-09T13:36:46.341+02:00	BLUR	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	389	1276	683
2013-04-09T13:36:46.343+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:36:47.154+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:36:47.235+02:00	TYPING-search-i	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:36:47.249+02:00	TYPING-search-in	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:36:47.373+02:00	TYPING-search-inf	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:36:47.384+02:00	TYPING-search-infi	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:36:47.703+02:00	SCROLL	http://docs.seqan.de/seqan/dev/SPEC_Infix_Segment.html	87.77.216.245	-	0	389	1276	683
2013-04-09T13:36:48.146+02:00	TYPING-search-infix	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:36:48.290+02:00	TYPING-search-infix	http://docs.seqan.de/seqan/dev/INDEX_Spec_Segments.html#InfixSegment	87.77.216.245	-	0	0	180	1430
2013-04-09T13:36:51.152+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.infix.html	87.77.216.245	-	0	0	1276	683
2013-04-09T13:36:51.280+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Containers.html#infix	87.77.216.245	-	0	0	180	729
2013-04-09T13:36:52.998+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.infix.html	87.77.216.245	-	0	15	1276	683
2013-04-09T13:36:53.851+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.infix.html	87.77.216.245	-	0	15	1276	683
2013-04-09T13:39:54.888+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.infix.html	87.77.216.245	-	0	15	1276	683
2013-04-09T13:39:55.045+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.infix.html	87.77.216.245	-	0	15	1276	683
2013-04-09T13:39:58.690+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T13:40:00.435+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-09T13:40:04.228+02:00	READY	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T13:40:04.252+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	0	1276	683
2013-04-09T13:40:06.957+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	1288	1276	683
2013-04-09T13:40:09.021+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2065	1276	683
2013-04-09T13:40:09.437+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2065	1276	683
2013-04-09T13:40:11.535+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2065	1276	683
2013-04-09T13:40:12.536+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	2065	1276	683
2013-04-09T13:40:14.544+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	1288	1276	683
2013-04-09T13:40:16.504+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	224	1276	683
2013-04-09T13:40:19.490+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	584	1276	683
2013-04-09T13:40:22.062+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	671	1276	683
2013-04-09T13:40:22.175+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	671	1276	683
2013-04-09T13:40:45.950+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T13:43:19.668+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T13:43:23.122+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T13:43:23.123+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T13:43:27.514+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-09T13:43:39.067+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	313	1276	683
2013-04-09T13:43:40.997+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	0	1276	683
2013-04-09T13:43:50.738+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	906	1276	683
2013-04-09T13:43:57.553+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	1646	1276	683
2013-04-09T13:44:13.822+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	2340	1276	683
2013-04-09T13:44:19.731+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	2524	1276	683
2013-04-09T13:44:25.043+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	2353	1276	683
2013-04-09T13:44:35.667+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5783	1276	683
2013-04-09T13:44:38.239+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5895	1276	683
2013-04-09T13:44:42.230+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6363	1276	683
2013-04-09T13:44:45.307+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6341	1276	683
2013-04-09T13:44:52.485+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6204	1276	683
2013-04-09T13:45:10.793+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	4910	1276	683
2013-04-09T13:45:29.918+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	2526	1276	683
2013-04-09T13:45:34.673+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	2773	1276	683
2013-04-09T13:46:00.198+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	2611	1276	683
2013-04-09T13:47:05.253+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	2981	1276	683
2013-04-09T13:47:16.421+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	4011	1276	683
2013-04-09T13:47:29.571+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5770	1276	683
2013-04-09T13:47:37.369+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6172	1276	683
2013-04-09T13:47:44.869+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6327	1276	683
2013-04-09T13:47:48.892+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6327	1276	683
2013-04-09T13:47:51.008+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T13:47:51.588+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T13:47:51.589+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T13:47:57.445+02:00	READY	http://trac.seqan.de/wiki/HowTo	87.77.216.245	-	0	0	1276	683
2013-04-09T13:48:02.895+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo	87.77.216.245	-	0	191	1276	683
2013-04-09T13:48:04.485+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T13:48:06.776+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-09T13:48:11.962+02:00	READY	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	87.77.216.245	-	0	0	1276	683
2013-04-09T13:48:19.810+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	87.77.216.245	-	0	785	1276	683
2013-04-09T13:48:32.655+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	87.77.216.245	-	0	3237	1276	683
2013-04-09T13:48:39.252+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	87.77.216.245	-	0	2591	1276	683
2013-04-09T13:48:44.112+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	87.77.216.245	-	0	1981	1276	683
2013-04-09T13:48:49.791+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BackgroundAndMotivation	87.77.216.245	-	0	1741	1276	683
2013-04-09T13:48:55.057+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	285	1276	683
2013-04-09T13:48:59.406+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	340	1276	683
2013-04-09T13:49:00.421+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	340	1276	683
2013-04-09T13:49:06.971+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	2978	1276	683
2013-04-09T13:49:11.631+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	2978	1276	683
2013-04-09T13:49:12.293+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Metafunctions	87.77.216.245	-	0	0	1276	683
2013-04-09T13:49:22.326+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Metafunctions	87.77.216.245	-	0	77	1276	683
2013-04-09T13:49:23.983+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	2978	1276	683
2013-04-09T13:49:40.791+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Metafunctions	87.77.216.245	-	0	0	1276	683
2013-04-09T13:52:47.995+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	1642	1276	683
2013-04-09T13:52:53.777+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	2450	1276	683
2013-04-09T13:52:54.678+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	2450	1276	683
2013-04-09T13:54:20.910+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	2450	1276	683
2013-04-09T13:54:33.823+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6032	1276	683
2013-04-09T13:54:36.973+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6001	1276	683
2013-04-09T13:54:40.184+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5938	1276	683
2013-04-09T13:54:55.447+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Sequences#	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5938	1276	683
2013-04-09T13:54:59.560+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6075	1276	683
2013-04-09T13:55:20.212+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6075	1276	683
2013-04-09T13:55:26.119+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Metafunctions	87.77.216.245	-	0	0	1276	683
2013-04-09T13:55:32.564+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Metafunctions	87.77.216.245	-	0	0	1276	683
2013-04-09T13:55:32.565+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6075	1276	683
2013-04-09T13:55:33.447+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Metafunctions	87.77.216.245	-	0	0	1276	683
2013-04-09T13:55:38.442+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6002	1276	683
2013-04-09T13:57:34.304+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	4407	1276	683
2013-04-09T14:00:48.097+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	4407	1276	683
2013-04-09T14:00:48.096+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	4407	1276	683
2013-04-09T14:54:43.810+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	2654	1276	683
2013-04-09T14:54:48.118+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	565	1276	683
2013-04-09T14:54:50.111+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	0	1276	683
2013-04-09T14:54:58.444+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	2816	1276	683
2013-04-09T14:55:28.108+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	3098	1276	683
2013-04-09T14:55:36.792+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	3468	1276	683
2013-04-09T14:55:48.199+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	4305	1276	683
2013-04-09T14:55:50.836+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	4542	1276	683
2013-04-09T14:55:57.454+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	2794	1276	683
2013-04-09T14:56:15.986+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	4407	1276	683
2013-04-09T14:56:15.985+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	2794	1276	683
2013-04-09T14:56:17.044+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	313	1276	683
2013-04-09T14:56:20.083+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	422	1276	683
2013-04-09T14:56:21.903+02:00	READY	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	0	1276	683
2013-04-09T14:56:25.279+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	143	1276	683
2013-04-09T14:57:49.553+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	143	1276	683
2013-04-09T14:57:49.548+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	143	1276	683
2013-04-09T15:00:18.455+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	143	1276	683
2013-04-09T15:00:21.446+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	361	1276	683
2013-04-09T15:00:28.048+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	361	1276	683
2013-04-09T15:00:28.049+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	361	1276	683
2013-04-09T15:01:02.906+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	361	1276	683
2013-04-09T15:01:07.246+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	166	1276	683
2013-04-09T15:01:13.075+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	2791	1276	683
2013-04-09T15:01:17.113+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	252	1276	683
2013-04-09T15:01:49.384+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	316	1276	683
2013-04-09T15:01:55.530+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	532	1276	683
2013-04-09T15:02:06.137+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	631	1276	683
2013-04-09T15:02:11.165+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	1456	1276	683
2013-04-09T15:02:24.477+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	1461	1276	683
2013-04-09T15:03:45.585+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	1461	1276	683
2013-04-09T15:03:45.585+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	1461	1276	683
2013-04-09T15:05:14.994+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	1461	1276	683
2013-04-09T15:05:15.009+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	211	1276	683
2013-04-09T15:05:15.007+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	1461	1276	683
2013-04-09T15:05:32.708+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	741	1276	683
2013-04-09T15:05:33.635+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	741	1276	683
2013-04-09T15:05:33.636+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	1461	1276	683
2013-04-09T15:06:04.288+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	1461	1276	683
2013-04-09T15:06:04.287+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	1461	1276	683
2013-04-09T15:06:30.484+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	1461	1276	683
2013-04-09T15:06:34.515+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	422	1276	683
2013-04-09T15:06:38.673+02:00	READY	http://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn	87.77.216.245	-	0	48	1276	683
2013-04-09T15:06:42.910+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	978	1276	683
2013-04-09T15:06:46.440+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	183	1276	683
2013-04-09T15:06:54.502+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5815	1276	683
2013-04-09T15:07:05.732+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Sequences#	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5879	1276	683
2013-04-09T15:07:10.714+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6104	1276	683
2013-04-09T15:07:22.277+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5990	1276	683
2013-04-09T15:07:30.498+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1281	1276	683
2013-04-09T15:07:34.816+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	921	1276	683
2013-04-09T15:07:35.854+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	0	1276	683
2013-04-09T15:07:39.613+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	1710	1276	683
2013-04-09T15:07:47.577+02:00	READY	http://docs.seqan.de/seqan/dev/METAFUNCTION_Value_Size.html	87.77.216.245	-	0	0	1276	683
2013-04-09T15:07:47.662+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Metafunction_Basic.html#ValueSize	87.77.216.245	-	0	0	180	761
2013-04-09T15:07:48.875+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	1710	1276	683
2013-04-09T15:07:55.851+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	1789	1276	683
2013-04-09T15:08:01.228+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Alphabets#	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	1789	1276	683
2013-04-09T15:08:03.795+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	2275	1276	683
2013-04-09T15:08:06.155+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	2271	1276	683
2013-04-09T15:08:40.458+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	995	1276	683
2013-04-09T15:08:46.589+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	521	1276	683
2013-04-09T15:08:52.637+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	680	1276	683
2013-04-09T15:08:56.560+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	788	1276	683
2013-04-09T15:09:06.212+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	843	1276	683
2013-04-09T15:09:10.374+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	994	1276	683
2013-04-09T15:09:22.842+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	994	1276	683
2013-04-09T15:09:22.843+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	994	1276	683
2013-04-09T15:14:54.966+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Alphabets	87.77.216.245	-	0	994	1276	683
2013-04-09T15:15:00.336+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	921	1276	683
2013-04-09T15:15:02.109+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	280	1276	683
2013-04-09T15:15:08.902+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6199	1276	683
2013-04-09T15:15:11.921+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6114	1276	683
2013-04-09T15:15:29.709+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5915	1276	683
2013-04-09T15:15:40.474+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5915	1276	683
2013-04-09T15:16:43.960+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5915	1276	683
2013-04-09T15:16:54.476+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5869	1276	683
2013-04-09T15:17:08.805+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Sequences#	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5869	1276	683
2013-04-09T15:17:11.493+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6099	1276	683
2013-04-09T15:17:17.255+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6418	1276	683
2013-04-09T15:17:21.617+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6665	1276	683
2013-04-09T15:17:31.930+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6665	1276	683
2013-04-09T15:18:53.390+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	741	1276	683
2013-04-09T15:19:05.060+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	741	1276	683
2013-04-09T15:19:06.242+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	2794	1276	683
2013-04-09T15:19:33.829+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	3152	1276	683
2013-04-09T15:19:33.965+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	3152	1276	683
2013-04-09T15:19:34.479+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	741	1276	683
2013-04-09T15:19:36.821+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	337	1276	683
2013-04-09T15:19:36.822+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6665	1276	683
2013-04-09T15:19:37.388+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	337	1276	683
2013-04-09T15:19:39.694+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6673	1276	683
2013-04-09T15:19:59.452+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Sequences#	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6673	1276	683
2013-04-09T15:20:03.209+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7007	1276	683
2013-04-09T15:22:19.318+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5382	1276	683
2013-04-09T15:22:24.911+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	4881	1276	683
2013-04-09T15:22:33.107+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	4804	1276	683
2013-04-09T15:22:38.537+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	4767	1276	683
2013-04-09T15:22:44.870+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7056	1276	683
2013-04-09T15:24:10.233+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7056	1276	683
2013-04-09T15:24:10.231+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7056	1276	683
2013-04-09T15:29:31.838+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7056	1276	683
2013-04-09T15:29:35.550+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7056	1276	683
2013-04-09T15:29:35.552+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7056	1276	683
2013-04-09T15:42:56.454+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7056	1276	683
2013-04-09T15:44:58.289+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6948	1276	683
2013-04-09T15:45:00.560+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6986	1276	683
2013-04-09T15:45:08.529+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6986	1276	683
2013-04-09T15:45:10.225+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8522	1276	683
2013-04-09T15:45:12.014+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5821	1276	683
2013-04-09T15:45:13.226+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5821	1276	683
2013-04-09T15:45:18.699+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7296	1276	683
2013-04-09T15:46:10.091+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	5815	1276	683
2013-04-09T15:46:14.799+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6085	1276	683
2013-04-09T15:46:14.800+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6085	1276	683
2013-04-09T15:46:15.635+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6085	1276	683
2013-04-09T15:46:15.805+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6085	1276	683
2013-04-09T15:46:17.703+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6467	1276	683
2013-04-09T15:46:17.702+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6467	1276	683
2013-04-09T15:46:18.560+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6467	1276	683
2013-04-09T15:46:21.174+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6467	1276	683
2013-04-09T15:46:28.464+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	6914	1276	683
2013-04-09T15:46:30.888+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7031	1276	683
2013-04-09T15:46:50.565+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7281	1276	683
2013-04-09T15:46:50.564+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7281	1276	683
2013-04-09T15:46:50.861+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7281	1276	683
2013-04-09T15:50:14.007+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	7281	1276	683
2013-04-09T15:51:10.981+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:56:22.487+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:56:22.486+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:57:43.889+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:57:46.384+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:57:46.385+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:58:13.356+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:58:15.008+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:58:15.009+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:58:23.120+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:58:23.588+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Sequences	87.77.216.245	-	0	8356	1276	683
2013-04-09T15:58:25.148+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T15:58:35.313+02:00	READY	https://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-09T15:58:36.332+02:00	READY	https://trac.seqan.de/report	87.77.216.245	-	0	0	1276	683
2013-04-09T15:58:41.558+02:00	READY	https://trac.seqan.de/report/7	87.77.216.245	-	0	0	1276	683
2013-04-09T15:58:43.829+02:00	READY	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	165	1276	683
2013-04-09T15:58:45.874+02:00	SCROLL	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T15:58:51.473+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T15:58:51.474+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:00:25.709+02:00	FOCUS	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:00:26.120+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:00:26.121+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:07:14.968+02:00	FOCUS	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:07:15.936+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:07:15.937+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:08:35.916+02:00	FOCUS	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:08:36.534+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:08:36.535+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:10:15.430+02:00	FOCUS	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:10:15.497+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:10:16.305+02:00	FOCUS	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:10:16.530+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:10:16.532+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:20:06.583+02:00	FOCUS	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	167	1276	683
2013-04-09T16:20:08.274+02:00	BLUR	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	0	1276	683
2013-04-09T16:20:08.276+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/StringSets	87.77.216.245	-	0	337	1276	683
2013-04-09T16:20:09.461+02:00	SCROLL	https://trac.seqan.de/ticket/985	87.77.216.245	-	0	0	1276	683
2013-04-09T16:20:11.690+02:00	READY	http://trac.seqan.de/wiki	87.77.216.245	-	0	0	1276	683
2013-04-09T16:20:13.413+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	226	1276	683
2013-04-09T16:20:16.224+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	523	1276	683
2013-04-09T16:20:17.497+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	0	1276	683
2013-04-09T16:20:20.131+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	103	1276	683
2013-04-09T16:20:30.703+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	822	1276	683
2013-04-09T16:25:28.831+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	822	1276	683
2013-04-09T16:25:28.835+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	822	1276	683
2013-04-09T16:38:17.773+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Iterators	87.77.216.245	-	0	822	1276	683
2013-04-09T16:38:21.878+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	-3	1276	683
2013-04-09T16:38:22.274+02:00	READY	http://trac.seqan.de/wiki	87.77.216.245	-	0	204	1276	683
2013-04-09T16:38:27.088+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	318	1276	683
2013-04-09T16:38:32.305+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	155	1276	683
2013-04-09T16:38:38.651+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	2780	1276	683
2013-04-09T16:38:44.695+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	1893	1276	683
2013-04-09T16:39:06.626+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	2566	1276	683
2013-04-09T16:39:12.186+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	2589	1276	683
2013-04-09T16:44:12.563+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	2589	1276	683
2013-04-09T16:44:12.559+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	2589	1276	683
2013-04-09T16:56:41.936+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	2589	1276	683
2013-04-09T16:56:43.474+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	2589	1276	683
2013-04-09T16:56:43.475+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	2589	1276	683
2013-04-09T17:06:58.363+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	2589	1276	683
2013-04-09T17:06:58.486+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Modifiers	87.77.216.245	-	0	2589	1276	683
2013-04-09T18:20:30.970+02:00	FOCUS	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	0	1276	683
2013-04-09T18:20:32.043+02:00	UNLOAD	https://trac.seqan.de/ticket/985	160.45.111.85	-	0	0	1276	683
2013-04-09T18:20:32.196+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2589	1276	683
2013-04-09T18:20:32.355+02:00	UNLOAD	http://trac.seqan.de/wiki/Tutorial/Modifiers	160.45.111.85	-	0	2589	1276	683
2013-04-09T18:20:32.535+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.111.85	-	0	3152	1276	683
2013-04-09T18:20:32.681+02:00	UNLOAD	http://trac.seqan.de/wiki/Tutorial/Iterators	160.45.111.85	-	0	3152	1276	683
2013-04-09T18:20:32.691+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	8356	1276	683
2013-04-09T18:20:32.848+02:00	UNLOAD	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	8356	1276	683
2013-04-09T18:20:33.946+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	671	1276	683
2013-04-09T18:20:34.112+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.infix.html	160.45.111.85	-	0	15	1276	683
2013-04-09T18:20:34.774+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Sequences	160.45.111.85	-	0	0	1276	683
2013-04-09T18:20:35.457+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/FirstStepsInSeqAn#Assignment5	160.45.111.85	-	0	7188	1276	683
2013-04-10T09:10:35.670+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-10T09:10:37.414+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	268	1276	683
2013-04-10T09:10:40.922+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	826	1276	683
2013-04-10T09:13:26.277+02:00	READY	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	91	1276	683
2013-04-10T09:13:39.599+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3964	1276	683
2013-04-10T09:13:45.340+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation#	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3964	1276	683
2013-04-10T09:13:47.917+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4072	1276	683
2013-04-10T09:13:50.165+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation#	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4072	1276	683
2013-04-10T09:13:59.880+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3418	1276	683
2013-04-10T09:14:06.056+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4036	1276	683
2013-04-10T09:14:10.366+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	2694	1276	683
2013-04-10T09:14:16.772+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	956	1276	683
2013-04-10T09:14:19.728+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	965	1276	683
2013-04-10T09:14:25.497+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	983	1276	683
2013-04-10T09:14:28.742+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1042	1276	683
2013-04-10T09:14:53.620+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation#	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	5985	1276	683
2013-04-10T09:14:54.469+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	5985	1276	683
2013-04-10T09:14:54.477+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation#	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	5985	1276	683
2013-04-10T09:15:02.893+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1073	1276	683
2013-04-10T09:15:03.639+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1073	1276	683
2013-04-10T09:15:03.640+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1073	1276	683
2013-04-10T09:15:30.735+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1073	1276	683
2013-04-10T09:15:35.845+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	918	1276	683
2013-04-10T09:15:35.862+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	918	1276	683
2013-04-10T09:15:35.863+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	918	1276	683
2013-04-10T09:15:44.278+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1078	1276	683
2013-04-10T09:15:45.686+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1078	1276	683
2013-04-10T09:15:47.908+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1108	1276	683
2013-04-10T09:15:51.566+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1108	1276	683
2013-04-10T09:15:51.567+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1108	1276	683
2013-04-10T09:15:55.808+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1108	1276	683
2013-04-10T09:16:04.291+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:04.549+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:04.548+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:06.191+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:07.463+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:07.462+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:08.018+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:08.437+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:08.436+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:10.021+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:10.358+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:10.357+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:15.834+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3929	1276	683
2013-04-10T09:16:17.325+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4388	1276	683
2013-04-10T09:16:17.324+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4388	1276	683
2013-04-10T09:16:18.471+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4388	1276	683
2013-04-10T09:16:18.760+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4388	1276	683
2013-04-10T09:16:19.006+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4388	1276	683
2013-04-10T09:16:19.005+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4388	1276	683
2013-04-10T09:16:39.741+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4388	1276	683
2013-04-10T09:16:44.126+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	685	1276	683
2013-04-10T09:16:44.403+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	685	1276	683
2013-04-10T09:16:44.404+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	685	1276	683
2013-04-10T09:17:02.311+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	685	1276	683
2013-04-10T09:17:07.112+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1191	1276	683
2013-04-10T09:17:20.062+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3048	1276	683
2013-04-10T09:17:22.294+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	1293	1276	683
2013-04-10T09:17:26.397+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4057	1276	683
2013-04-10T09:19:03.508+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4031	1276	683
2013-04-10T09:19:07.182+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4031	1276	683
2013-04-10T09:19:09.197+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3420	1276	683
2013-04-10T09:19:12.093+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:19:19.945+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:19:22.788+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:19:22.790+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:19:23.573+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:19:23.917+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:19:23.916+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:24:43.431+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:24:43.946+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:25:03.345+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:25:03.959+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:25:03.960+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:29:58.604+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:29:58.768+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:34:38.921+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3525	1276	683
2013-04-10T09:34:40.446+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3925	1276	683
2013-04-10T09:34:42.623+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3980	1276	683
2013-04-10T09:34:42.858+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3980	1276	683
2013-04-10T09:34:43.285+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation#	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	3980	1276	683
2013-04-10T09:34:48.185+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4672	1276	683
2013-04-10T09:34:52.384+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4672	1276	683
2013-04-10T09:34:54.682+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4705	1276	683
2013-04-10T09:34:55.917+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4705	1276	683
2013-04-10T09:34:57.051+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4705	1276	683
2013-04-10T09:34:57.562+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4705	1276	683
2013-04-10T09:35:01.074+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:35:09.852+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:35:28.189+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:35:28.190+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:38:17.451+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:40:05.420+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:40:05.421+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:40:33.980+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:40:55.128+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:40:55.127+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:41:33.092+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:41:34.876+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:41:34.877+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:41:49.507+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4739	1276	683
2013-04-10T09:41:53.888+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4738	1276	683
2013-04-10T09:42:04.660+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4678	1276	683
2013-04-10T09:43:06.019+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4684	1276	683
2013-04-10T09:43:44.987+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4684	1276	683
2013-04-10T09:43:44.989+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4684	1276	683
2013-04-10T09:44:18.762+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4684	1276	683
2013-04-10T09:44:39.239+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T09:44:59.969+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T09:44:59.968+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T09:45:11.255+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T09:46:22.707+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T09:46:22.706+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T09:51:35.487+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T09:51:35.602+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T10:37:34.027+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-10T10:37:34.790+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-10T10:37:34.788+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-10T10:37:36.977+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-10T10:37:38.341+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-10T10:37:38.338+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-10T10:39:01.350+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	683	1276	683
2013-04-10T10:39:03.054+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:39:07.775+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1622	1276	683
2013-04-10T10:42:23.488+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1622	1276	683
2013-04-10T10:42:23.489+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1622	1276	683
2013-04-10T10:42:48.242+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1622	1276	683
2013-04-10T10:42:56.728+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1456	1276	683
2013-04-10T10:43:25.821+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1886	1276	683
2013-04-10T10:43:46.019+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	2637	1276	683
2013-04-10T10:43:58.941+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	2972	1276	683
2013-04-10T10:44:03.254+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	2332	1276	683
2013-04-10T10:44:17.317+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	544	1276	683
2013-04-10T10:44:17.413+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	544	1276	683
2013-04-10T10:44:17.413+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	544	1276	683
2013-04-10T10:44:26.061+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	544	1276	683
2013-04-10T10:44:34.353+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	614	1276	683
2013-04-10T10:44:36.858+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	640	1276	683
2013-04-10T10:44:47.564+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1581	1276	683
2013-04-10T10:44:50.001+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1575	1276	683
2013-04-10T10:44:53.763+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:45:01.130+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:45:13.087+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:45:17.912+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1993	1276	683
2013-04-10T10:45:29.202+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4731	1276	683
2013-04-10T10:45:46.505+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	7867	1276	683
2013-04-10T10:45:58.424+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	7657	1276	683
2013-04-10T10:47:11.469+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	7758	1276	683
2013-04-10T10:47:24.384+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	7850	1276	683
2013-04-10T10:47:26.679+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	7850	1276	683
2013-04-10T10:47:30.160+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8333	1276	683
2013-04-10T10:47:32.192+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8304	1276	683
2013-04-10T10:47:33.458+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8304	1276	683
2013-04-10T10:47:34.194+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8304	1276	683
2013-04-10T10:47:37.329+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8462	1276	683
2013-04-10T10:47:48.679+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8449	1276	683
2013-04-10T10:48:17.594+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8044	1276	683
2013-04-10T10:48:18.949+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8044	1276	683
2013-04-10T10:48:20.914+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8044	1276	683
2013-04-10T10:48:22.536+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8044	1276	683
2013-04-10T10:48:24.638+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	8044	1276	683
2013-04-10T10:48:27.575+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment5ApproximatePatternMatching	87.77.216.245	-	0	0	1276	683
2013-04-10T10:48:32.827+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment5ApproximatePatternMatching	87.77.216.245	-	0	677	1276	683
2013-04-10T10:48:56.634+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment5ApproximatePatternMatching	87.77.216.245	-	0	997	1276	683
2013-04-10T10:49:05.416+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment5ApproximatePatternMatching	87.77.216.245	-	0	1314	1276	683
2013-04-10T10:49:19.844+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment5ApproximatePatternMatching	87.77.216.245	-	0	2330	1276	683
2013-04-10T10:49:37.346+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment5ApproximatePatternMatching	87.77.216.245	-	0	1419	1276	683
2013-04-10T10:49:43.663+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment5ApproximatePatternMatching	87.77.216.245	-	0	2237	1276	683
2013-04-10T10:50:21.659+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment5ApproximatePatternMatching	87.77.216.245	-	0	0	1276	683
2013-04-10T10:50:22.332+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment5ApproximatePatternMatching	87.77.216.245	-	0	0	1276	683
2013-04-10T10:50:24.120+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:50:31.548+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1320	1276	683
2013-04-10T10:50:34.985+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1358	1276	683
2013-04-10T10:50:34.986+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1358	1276	683
2013-04-10T10:50:35.289+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1358	1276	683
2013-04-10T10:50:43.422+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1358	1276	683
2013-04-10T10:50:46.395+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1536	1276	683
2013-04-10T10:50:49.385+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1462	1276	683
2013-04-10T10:50:54.513+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1729	1276	683
2013-04-10T10:50:59.842+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1729	1276	683
2013-04-10T10:50:59.843+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1729	1276	683
2013-04-10T10:51:00.580+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1729	1276	683
2013-04-10T10:51:05.773+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1395	1276	683
2013-04-10T10:51:06.215+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1395	1276	683
2013-04-10T10:51:06.216+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1395	1276	683
2013-04-10T10:51:07.575+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1395	1276	683
2013-04-10T10:51:10.094+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1395	1276	683
2013-04-10T10:51:10.096+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1395	1276	683
2013-04-10T10:51:14.639+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1395	1276	683
2013-04-10T10:51:18.078+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1916	1276	683
2013-04-10T10:51:18.537+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1916	1276	683
2013-04-10T10:51:18.538+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1916	1276	683
2013-04-10T10:51:20.088+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1916	1276	683
2013-04-10T10:51:21.757+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1916	1276	683
2013-04-10T10:51:21.758+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1916	1276	683
2013-04-10T10:51:25.045+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1916	1276	683
2013-04-10T10:51:28.353+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1589	1276	683
2013-04-10T10:51:29.919+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:51:29.920+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:51:31.404+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:51:32.605+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:51:33.176+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:51:33.176+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:51:33.893+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T10:51:36.420+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	326	1276	683
2013-04-10T10:51:40.207+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	-35	1276	683
2013-04-10T10:51:43.553+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1585	1276	683
2013-04-10T10:51:43.555+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1585	1276	683
2013-04-10T10:51:43.867+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1585	1276	683
2013-04-10T10:51:47.845+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1585	1276	683
2013-04-10T10:51:48.883+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1585	1276	683
2013-04-10T10:51:48.882+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1585	1276	683
2013-04-10T10:51:49.916+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1585	1276	683
2013-04-10T10:51:52.853+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:51:58.621+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:30.624+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:32.787+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:32.788+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:33.757+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:35.016+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:35.017+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:36.998+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:39.869+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:39.867+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:40.858+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:41.854+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:41.853+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:46.554+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:52:47.579+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:53:12.366+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:53:14.013+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:53:14.014+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:53:19.239+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1804	1276	683
2013-04-10T10:53:22.677+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1637	1276	683
2013-04-10T10:53:23.031+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1637	1276	683
2013-04-10T10:53:23.032+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1637	1276	683
2013-04-10T10:53:23.697+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1637	1276	683
2013-04-10T10:53:24.167+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1637	1276	683
2013-04-10T10:53:24.165+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1637	1276	683
2013-04-10T10:53:25.802+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1637	1276	683
2013-04-10T10:53:26.525+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1637	1276	683
2013-04-10T10:53:26.524+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1637	1276	683
2013-04-10T10:55:48.819+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	1637	1276	683
2013-04-10T10:55:56.019+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3065	1276	683
2013-04-10T10:56:08.715+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3070	1276	683
2013-04-10T10:58:22.719+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3070	1276	683
2013-04-10T10:58:22.720+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3070	1276	683
2013-04-10T10:58:24.656+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3070	1276	683
2013-04-10T10:58:28.546+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:29.694+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:29.694+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:39.252+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:40.434+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:40.435+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:41.539+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:43.286+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:43.287+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:45.067+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:46.698+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:46.700+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:51.547+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:52.530+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:52.529+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:53.910+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:56.376+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:56.777+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:58:56.926+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:59:00.457+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:59:05.960+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:59:05.961+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:59:25.011+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T10:59:25.151+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T11:24:11.546+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3222	1276	683
2013-04-10T11:24:17.538+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4805	1276	683
2013-04-10T11:24:26.361+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4805	1276	683
2013-04-10T11:24:29.924+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	5049	1276	683
2013-04-10T11:24:29.939+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	5049	1276	683
2013-04-10T11:24:30.546+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	5049	1276	683
2013-04-10T11:24:31.650+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	0	1276	683
2013-04-10T11:24:34.690+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	513	1276	683
2013-04-10T11:24:37.745+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	156	1276	683
2013-04-10T11:24:37.747+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	156	1276	683
2013-04-10T11:24:37.751+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	5049	1276	683
2013-04-10T11:24:44.049+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3509	1276	683
2013-04-10T11:24:51.174+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3969	1276	683
2013-04-10T11:25:14.455+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	5016	1276	683
2013-04-10T11:25:14.462+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	5016	1276	683
2013-04-10T11:25:14.466+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	156	1276	683
2013-04-10T11:25:19.002+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	683	1276	683
2013-04-10T11:25:19.526+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	683	1276	683
2013-04-10T11:25:22.823+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	1004	1276	683
2013-04-10T11:25:23.709+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	0	1276	683
2013-04-10T11:25:27.085+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	7	1276	683
2013-04-10T11:25:31.364+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	893	1276	683
2013-04-10T11:25:31.367+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	5016	1276	683
2013-04-10T11:25:32.095+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	893	1276	683
2013-04-10T11:25:35.769+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4137	1276	683
2013-04-10T11:25:40.229+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	3059	1276	683
2013-04-10T11:27:09.400+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	6712	1276	683
2013-04-10T11:27:17.459+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4828	1276	683
2013-04-10T11:27:42.607+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4772	1276	683
2013-04-10T11:27:44.825+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4772	1276	683
2013-04-10T11:27:44.826+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4772	1276	683
2013-04-10T11:34:46.365+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4772	1276	683
2013-04-10T11:34:48.481+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4772	1276	683
2013-04-10T11:34:48.482+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4772	1276	683
2013-04-10T11:35:05.794+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4772	1276	683
2013-04-10T11:35:06.852+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4772	1276	683
2013-04-10T11:35:06.853+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4772	1276	683
2013-04-10T11:35:08.765+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	4772	1276	683
2013-04-10T11:35:11.070+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T11:35:11.069+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T11:35:12.551+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T11:41:34.463+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T11:41:37.328+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#Assignment2	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T11:41:38.762+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#Assignment2	87.77.216.245	-	0	3464	1276	683
2013-04-10T11:41:39.341+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#Assignment2	87.77.216.245	-	0	3464	1276	683
2013-04-10T11:41:40.751+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#Assignment2	87.77.216.245	-	0	3464	1276	683
2013-04-10T11:41:41.081+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#Assignment2	87.77.216.245	-	0	3464	1276	683
2013-04-10T11:41:41.084+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/Assignment3MyersHirschberg	87.77.216.245	-	0	893	1276	683
2013-04-10T11:41:42.804+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T11:41:44.592+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T11:41:44.593+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T11:41:45.523+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T11:41:51.260+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	691	1276	683
2013-04-10T11:41:53.982+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	691	1276	683
2013-04-10T11:41:54.863+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	691	1276	683
2013-04-10T11:42:06.722+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	691	1276	683
2013-04-10T11:43:44.379+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	712	1276	683
2013-04-10T11:43:46.426+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	0	1276	683
2013-04-10T11:43:51.548+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T11:44:17.505+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	39	1276	683
2013-04-10T11:44:21.501+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment?action=edit	87.77.216.245	-	0	0	1276	683
2013-04-10T11:44:26.273+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment?action=edit	87.77.216.245	-	0	57	1276	683
2013-04-10T11:44:31.788+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T11:45:03.403+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T11:45:03.407+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T11:45:14.018+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T11:45:15.122+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T11:45:15.122+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T11:45:18.457+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T11:50:30.722+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T11:50:30.893+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T13:04:39.118+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T13:04:39.241+02:00	UNLOAD	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment/Assignment/SemiGlobalAlignment	87.77.216.245	-	0	761	1276	683
2013-04-10T13:04:39.272+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#Assignment2	87.77.216.245	-	0	3464	1276	683
2013-04-10T13:04:41.523+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T13:04:42.440+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T13:04:42.442+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T13:07:06.735+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T13:07:07.429+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T13:07:09.227+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-10T13:07:57.781+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-10T13:08:01.501+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	316	1276	683
2013-04-10T13:08:06.228+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	393	1276	683
2013-04-10T13:08:18.912+02:00	READY	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	0	1276	683
2013-04-10T13:08:23.880+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T13:08:26.022+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T13:08:26.024+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:12:31.527+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:12:31.701+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:12:32.405+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:12:33.134+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:12:38.607+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/AlignmentRepresentation	87.77.216.245	-	0	4677	1276	683
2013-04-10T14:12:38.697+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-10T14:12:39.839+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	872	1276	683
2013-04-10T14:12:42.165+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	29	1276	683
2013-04-10T14:12:45.047+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	87.77.216.245	-	0	169	1276	683
2013-04-10T14:12:47.979+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Local_Alignment_Enumerator.html	87.77.216.245	-	0	0	1276	683
2013-04-10T14:12:48.127+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Alignments.html#LocalAlignmentEnumerator	87.77.216.245	-	0	0	180	683
2013-04-10T14:12:51.680+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Local_Alignment_Enumerator.html	87.77.216.245	-	0	44	1276	683
2013-04-10T14:12:53.101+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Unbanded+_Local_Alignment_Enumerator.html	87.77.216.245	-	0	0	1276	683
2013-04-10T14:12:53.281+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Alignments.html#Unbanded%20LocalAlignmentEnumerator	87.77.216.245	-	0	0	180	771
2013-04-10T14:12:54.373+02:00	READY	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	0	1276	683
2013-04-10T14:12:54.542+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class.html#	87.77.216.245	-	0	0	180	683
2013-04-10T14:12:56.416+02:00	SCROLL	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:12:56.870+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Alignments.html#Unbanded%20LocalAlignmentEnumerator	87.77.216.245	-	0	0	180	771
2013-04-10T14:12:56.813+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Unbanded+_Local_Alignment_Enumerator.html	87.77.216.245	-	0	0	1276	683
2013-04-10T14:12:58.164+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Local_Alignment_Enumerator.html	87.77.216.245	-	0	0	1276	683
2013-04-10T14:12:58.225+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Alignments.html#LocalAlignmentEnumerator	87.77.216.245	-	0	0	180	683
2013-04-10T14:12:59.346+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Banded+_Local_Alignment_Enumerator.html	87.77.216.245	-	0	0	1276	683
2013-04-10T14:12:59.394+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Alignments.html#Banded%20LocalAlignmentEnumerator	87.77.216.245	-	0	0	180	772
2013-04-10T14:13:00.858+02:00	READY	http://docs.seqan.de/seqan/dev/MEMFUNC_Banded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:13:00.915+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class.html#	87.77.216.245	-	0	0	180	683
2013-04-10T14:13:03.142+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Banded+_Local_Alignment_Enumerator.html	87.77.216.245	-	0	0	1276	683
2013-04-10T14:13:03.179+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Alignments.html#Banded%20LocalAlignmentEnumerator	87.77.216.245	-	0	0	180	772
2013-04-10T14:13:04.008+02:00	READY	http://docs.seqan.de/seqan/dev/CLASS_Local_Alignment_Enumerator.html	87.77.216.245	-	0	0	1276	683
2013-04-10T14:13:04.055+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class_Alignments.html#LocalAlignmentEnumerator	87.77.216.245	-	0	0	180	683
2013-04-10T14:13:06.075+02:00	SCROLL	http://docs.seqan.de/seqan/dev/CLASS_Local_Alignment_Enumerator.html	87.77.216.245	-	0	44	1276	683
2013-04-10T14:13:10.896+02:00	READY	http://docs.seqan.de/seqan/dev/SPEC_Unbanded+_Local_Alignment_Enumerator.html	87.77.216.245	-	0	0	1276	683
2013-04-10T14:13:10.949+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Spec_Alignments.html#Unbanded%20LocalAlignmentEnumerator	87.77.216.245	-	0	0	180	771
2013-04-10T14:13:12.050+02:00	READY	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:13:12.125+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Class.html#	87.77.216.245	-	0	0	180	683
2013-04-10T14:18:11.505+02:00	BLUR	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:18:11.516+02:00	BLUR	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:25:08.891+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:25:11.772+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:25:11.770+02:00	BLUR	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:25:13.156+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:25:13.158+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:25:14.195+02:00	BLUR	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:25:14.199+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:25:14.379+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:25:14.382+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1276	683
2013-04-10T14:25:22.207+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1276	683
2013-04-10T14:25:27.382+02:00	READY	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	0	1276	683
2013-04-10T14:25:35.692+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	0	1276	683
2013-04-10T14:25:37.375+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	0	1276	683
2013-04-10T14:25:37.377+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	0	1276	683
2013-04-10T14:25:52.510+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	276	1276	683
2013-04-10T14:25:56.996+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1477	1276	683
2013-04-10T14:26:05.845+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	3194	1276	683
2013-04-10T14:26:21.895+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	3664	1276	683
2013-04-10T14:26:21.892+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	3664	1276	683
2013-04-10T14:26:22.364+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	3664	1276	683
2013-04-10T14:27:33.939+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	3664	1276	683
2013-04-10T14:27:39.289+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1700	1276	683
2013-04-10T14:27:41.969+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1571	1276	683
2013-04-10T14:27:53.826+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1029	1276	683
2013-04-10T14:27:57.250+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1183	1276	683
2013-04-10T14:28:02.777+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:28:03.356+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:28:03.357+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:28:26.412+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:28:30.223+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:28:30.225+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:28:34.012+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:28:36.112+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:28:38.953+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	975	683
2013-04-10T14:28:40.172+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:28:42.951+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:28:43.039+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:28:43.328+02:00	TYPING-search-readRecord	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:28:43.541+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	87.77.216.245	-	0	0	975	683
2013-04-10T14:28:45.902+02:00	TYPING-search-readRecord	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:28:45.887+02:00	TYPING-search-readRecord	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:28:46.058+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	87.77.216.245	-	0	0	975	683
2013-04-10T14:28:46.388+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:28:46.390+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:36:34.684+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:36:35.578+02:00	TYPING-search-readRecord	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:36:36.199+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:36:36.203+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:36:42.930+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:36:44.971+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T14:36:44.972+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:37:24.055+02:00	BLUR	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:37:24.059+02:00	BLUR	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:37:24.551+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Class.html#	87.77.216.245	-	0	32	180	683
2013-04-10T14:37:32.045+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:37:33.514+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:37:33.513+02:00	BLUR	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-10T14:37:34.256+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T14:37:34.258+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:37:37.629+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:37:37.628+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:38:49.404+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:39:35.157+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:39:35.156+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:39:56.644+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	698	1276	683
2013-04-10T14:39:58.995+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	702	1276	683
2013-04-10T14:39:58.996+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	702	1276	683
2013-04-10T14:39:59.473+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	702	1276	683
2013-04-10T14:42:31.481+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T14:42:32.748+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T14:42:32.747+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T14:44:56.933+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T14:44:57.096+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T14:44:59.452+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T14:47:47.548+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T14:47:47.547+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T14:49:46.876+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T14:49:49.100+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T14:49:49.099+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:05:35.157+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:05:56.052+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:05:56.051+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:05:56.685+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:05:57.377+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:05:57.375+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:18:31.316+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:18:31.582+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:24:20.009+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:24:20.237+02:00	TYPING-search-readRecord	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:24:20.290+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:27:07.638+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:27:15.755+02:00	READY	http://docs.seqan.de/seqan/dev/	160.45.44.126	-	0	0	1276	683
2013-04-10T15:27:15.800+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:27:23.686+02:00	BLUR	http://docs.seqan.de/seqan/dev/	160.45.44.126	-	0	0	1276	683
2013-04-10T15:27:23.689+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:27:25.726+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:27:25.789+02:00	TYPING-search-r	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:27:25.831+02:00	TYPING-search-re	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:27:25.935+02:00	TYPING-search-rea	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:27:26.245+02:00	TYPING-search-read	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:27:26.413+02:00	TYPING-search-readr	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:27:31.730+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:27:31.955+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Consensus.html	160.45.44.126	-	0	0	180	1132
2013-04-10T15:27:36.243+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	493	1276	683
2013-04-10T15:27:37.269+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	493	1276	683
2013-04-10T15:27:52.138+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:27:52.375+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Input_2f_Output.html#readRecord	160.45.44.126	-	0	0	180	1132
2013-04-10T15:27:54.600+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Consensus.html	160.45.44.126	-	0	0	180	1132
2013-04-10T15:27:56.072+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:27:56.110+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Input_2f_Output.html#readRecord	160.45.44.126	-	0	0	180	1132
2013-04-10T15:27:58.371+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:27:58.477+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Input_2f_Output.html#readRecord	160.45.44.126	-	0	0	180	1132
2013-04-10T15:28:01.661+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:01.663+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:02.255+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:02.453+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:05.885+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:14.115+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:14.174+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Input_2f_Output.html#readRecord	160.45.44.126	-	0	344	180	1132
2013-04-10T15:28:14.862+02:00	READY	http://docs.seqan.de/seqan/dev/	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:14.914+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:15.952+02:00	BLUR	http://docs.seqan.de/seqan/dev/	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:15.955+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:16.206+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:16.284+02:00	TYPING-search-r	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:16.340+02:00	TYPING-search-re	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:16.436+02:00	TYPING-search-rea	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:16.643+02:00	TYPING-search-read	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:16.699+02:00	TYPING-search-readr	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:16.762+02:00	TYPING-search-readre	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:16.942+02:00	TYPING-search-readrea	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:19.411+02:00	TYPING-search-readreac	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:19.555+02:00	TYPING-search-readrea	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:19.755+02:00	TYPING-search-readre	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:19.964+02:00	TYPING-search-readrec	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.44.126	-	0	0	180	1081
2013-04-10T15:28:23.796+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION_Sequence_Stream_23read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:23.842+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function.html#SequenceStream%23readRecord	160.45.44.126	-	0	0	180	1398
2013-04-10T15:28:29.925+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION_Sequence_Stream_23read_Record.html	160.45.44.126	-	0	35	1276	683
2013-04-10T15:28:33.348+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION_Sequence_Stream_23read_Record.html	160.45.44.126	-	0	111	1276	683
2013-04-10T15:28:41.791+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Sequence_Stream_23read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:42.083+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION_Sequence_Stream_23read_Record.html	160.45.44.126	-	0	0	1276	683
2013-04-10T15:28:45.101+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:45.147+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	160.45.44.126	-	0	0	975	683
2013-04-10T15:28:45.663+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:45.725+02:00	TYPING-search-r	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:45.802+02:00	TYPING-search-re	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:46.837+02:00	TYPING-search-rea	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:47.022+02:00	TYPING-search-read	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:47.039+02:00	TYPING-search-readr	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:47.582+02:00	TYPING-search-readre	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:48.086+02:00	TYPING-search-readrec	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:48.210+02:00	TYPING-search-readreco	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:48.293+02:00	TYPING-search-readrecor	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:28:50.355+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.44.126	-	0	0	975	683
2013-04-10T15:28:59.150+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.44.126	-	0	0	975	683
2013-04-10T15:30:11.122+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.44.126	-	0	283	975	683
2013-04-10T15:30:11.508+02:00	TYPING-search-readrecord	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:30:11.647+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:30:11.649+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:30:12.168+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:30:12.260+02:00	TYPING-search-readrecord	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:30:12.909+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:30:12.911+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:34:51.463+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:34:52.312+02:00	TYPING-search-readrecord	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:34:52.320+02:00	TYPING-search-readrecord	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:34:52.382+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.44.126	-	0	0	300	683
2013-04-10T15:34:52.384+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	160.45.44.126	-	0	15	1276	683
2013-04-10T15:34:52.766+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	1536	1276	683
2013-04-10T15:34:52.757+02:00	BLUR	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	160.45.44.126	-	0	15	1276	683
2013-04-10T15:34:53.309+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	1536	1276	683
2013-04-10T15:34:53.317+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	702	1276	683
2013-04-10T15:35:08.463+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.44.126	-	0	0	1276	683
2013-04-10T15:35:10.468+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	3579	1276	683
2013-04-10T15:35:10.780+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	3579	1276	683
2013-04-10T15:35:13.732+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	7324	1276	683
2013-04-10T15:35:18.356+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	7324	1276	683
2013-04-10T15:35:19.900+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	0	1276	683
2013-04-10T15:35:22.302+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	176	1276	683
2013-04-10T15:36:40.607+02:00	READY	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	7020	1276	683
2013-04-10T15:36:43.489+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	6257	1276	683
2013-04-10T15:36:46.656+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	6257	1276	683
2013-04-10T15:36:54.067+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	6514	1276	683
2013-04-10T15:42:30.752+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	6514	1276	683
2013-04-10T15:42:30.748+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	6514	1276	683
2013-04-10T15:47:27.136+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	6514	1276	683
2013-04-10T15:47:31.045+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO#TheInterfaceforReading	160.45.44.126	-	0	6036	1276	683
2013-04-10T15:47:35.914+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.44.126	-	0	1305	1276	683
2013-04-10T15:47:38.035+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	0	1276	683
2013-04-10T15:47:44.963+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	184	1276	683
2013-04-10T15:47:53.014+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	1079	1276	683
2013-04-10T15:48:26.084+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	1111	1276	683
2013-04-10T15:48:45.574+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	1266	1276	683
2013-04-10T15:48:55.064+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	1820	1276	683
2013-04-10T15:49:17.761+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	1582	1276	683
2013-04-10T15:49:26.229+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	1893	1276	683
2013-04-10T15:49:45.051+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2012	1276	683
2013-04-10T15:49:58.279+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2136	1276	683
2013-04-10T15:50:28.677+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2176	1276	683
2013-04-10T15:50:45.667+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2176	1276	683
2013-04-10T15:50:50.441+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2135	1276	683
2013-04-10T15:50:50.865+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2135	1276	683
2013-04-10T15:51:04.269+02:00	READY	https://trac.seqan.de/	160.45.44.126	-	0	104	1276	683
2013-04-10T15:51:06.285+02:00	SCROLL	https://trac.seqan.de/	160.45.44.126	-	0	138	1276	683
2013-04-10T15:51:08.105+02:00	READY	https://trac.seqan.de/wiki/Tutorial	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:08.755+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:12.821+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	160.45.44.126	-	0	1170	1276	683
2013-04-10T15:51:13.449+02:00	READY	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:17.366+02:00	READY	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:34.350+02:00	TYPING-text-= Indexed FASTA I/O =\n[[TOC()]]\n\n Learning Objective ::\n  In this tutorial, you will learn how to use a FASTA Index file (`.fai`) for indexed random-access to FASTA files.\n  This is useful for retrieving regions (e.g. `chr1:123-10004`) or single sequences (e.g. `chr1`) from FASTA files quickly.\n Difficulty ::\n  Average\n Duration ::\n  30 min\n Prerequisites ::\n  Tutorials: [wiki:Tutorial/Sequences Sequences]\n\nThe idea of FASTA index files (''FAI'') comes from the [http://samtools.sourceforge.net/samtools.shtml samtools] program by Heng Li.\nThe program provides a command `samtools faidx` for rapidly accessing parts of a large FASTA file (e.g. querying for the first chromosome by the identifier "chr1" or querying for 900 characters starting from character 100 (1-based) by `chr1:100-1,000`).\nTo do this, the program creates an index file that contains one entry for each sequence.\nIf the FASTA file is named `path/sequence.fasta`, the index file is usually named `path/sequence.fasta.fai`.\n\nUsing such index files, it is possible to rapidly read parts of the given sequence file.\nThe module `seqan/seq_io.h` allows to create and read such `.fai` index files and exposes an API to read parts randomly of FASTA file.\n\n{{{#!InfoBox\n'''Information:''' FASTA/FASTQ Meta Data and Sequence Ids\n\nFASTA and FASTQ files have one meta data record for each sequence.\nThis usually contains the sequence name but sometimes a lot of additional information is stored.\nThere is no consensus for the meta data.\n\nIt is common, however, to store the identifier (''id'') of the sequence at the beginning of the meta data field before the first space.\nThe id is unique to the whole file and often identifies the associate sequence uniquely in a data base (see section Sequence Identifiers on the [http://en.wikipedia.org/wiki/FASTA_format Wikipedia FASTA format] page).\n\nWhile not documented anywhere explicitely, '''only the characters up to the first space are used as the identifiers''' by widely used tools such as [http://bio-bwa.sourceforge.net/ BWA].\nOnly the identifier is carried over into files generated from the input files (BWA uses the sequence id from the genome FASTA to identify the contig/chromosome and the read id as the read name in the SAM output).\n}}}\n\n== How Does It Work? ==\n\nThere are two requirements that a FASTA file has to fulfill to work with the FAI scheme:\nFor each sequence in the FASTA file, the number of characters stored per line has to be the same and the number of bytes per line has to be the same.\nThe first restriction speaks for itself, the second restriction means that the same line ending character has to be used and no line should contain any additional spaces.\n\nThe index file then stores records of sequence identifier, length, the offset of the first sequence character in the file, the number of characters per line, and the number of bytes per line.\nWith this information, we can easily compute the byte offset of the i-th character of a sequence in a file by looking at its index record.\nWe skip to this byte offset in the file and from there, we can read the necessary sequence characters.\n\n== Building the Index ==\n\nThe class seqan:Class.FaiIndex allows for building and loading FAI indices.\nTo build such an index, we use the function seqan:Function.FaiIndex#build of the class seqan:Class.FaiIndex.\nThe first parameter is the seqan:Class.FaiIndex object, the second is the path to the FASTA file.\nThe function returns an integer indicating the result (as usual, `0` for no errors, a value different from `0` indicating an error).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nThere is an alternative variant of this function where you can pass the path to the FAI file that is to be built as third parameter.\nThe FAI file name will be stored in the seqan:Class.FaiIndex.\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta", "another/path/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nWe can write out the index after building it using the function seqan:Function.FaiIndex#write:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\n// ... index building here ...\n\nint res = write(faiIndex, "path/to/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not write the index to file!\n";\n}}}\n\n{{{#!AssignmentBox\n'''Assignment 1:''' Building a FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `build_fai` that takes one parameter from the command line:\n  A path to a FASTA file.\n  The program should then build a FAI index and write it out.\n Hints ::\n{{{#!FoldOut\n----\nUsing the two-parameter variant of seqan:Function.FaiIndex#build is good enough.\n}}}\n Solution ::\n{{{#!FoldOut\n----\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution1.cpp)]]\n}}}\n}}}\n\n== Using the Index ==\n\nTo load a FAI file, we use the function seqan:Function.FaiIndex#read:\nWe pass the seqan:Class.FaiIndex object as the first and the path to the FASTA file as the second parameter.\nThe function returns an `int` indicating success (value `0`) or failure (non-`0` value).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not read FAI index path/to/file.fasta.fai\n";\n}}}\n\nIn the example above, the FAI file `"path/to/file.fasta.fai"` would be loaded.\nOptionally, we can specify an extra path to the FAI file:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta", "path/to/index.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not load FAI index path/to/index.fai\n";\n}}}\n\nAfter loading the index, we can then use the index to map a sequence id to its (zero-based) position (a position ''i'' meaning that it is the ''i''-th sequence) in the FASTA file using seqan:Function.FaiIndex#getIdByName.\nThe function gets the seqan:Class.FaiIndex to use, the id of the sequence, and an `unsigned` position as parameters.\nIt returns a `bool` indicating whether the mapping was successful (`true` on success, `false` on failure).\n\n{{{#!cpp\nunsigned idx = 0;\nif (!getIdByName(faiIndex, "chr1", idx))\n    std::cerr << "ERROR: FAI index has no entry for chr1.\n";\n}}}\n\nOnce we have the index for the sequence in the FASTA file, we can then query the seqan:Class.FaiIndex for the length of the sequence using seqan:Function.FaiIndex#sequenceLength, get the whole sequence using seqan:Function.FaiIndex#readSequence, or get just a part of the sequence using seqan:Function.FaiIndex#readRegion.\n\n{{{#!cpp\nunsigned seqLength = sequenceLength(faiIndex, idx);\n\n// Load first 1000 characters of chr1.\nseqan::CharString seqChr1Prefix;\nif (readRegion(seqChr1Prefix, faiIdx, idx, 0, 1000) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n\n// Load all of chr1.\nseqan::CharString seqChr1;\nif (readSequence(seqChr1, faiIdx, idx) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n}}}\n\nThe sequence length can be determined by only looking at the index.\nWhen loading the sequence or a sequence infix, only the relevant part of the file will be touched.\nThus, only the minimal amount of memory, time, and disk I/O is used.\n\n{{{#!AssignmentBox\n'''Assignment 2:''' Using the FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `query_fai` that takes four parameters from the command line:\n  A path to a FASTA file, the id of the sequence, a begin and an end position.\n  The program should then read the given infix of the given sequence from the file and print it to stdout.\n Hint ::\n{{{#!FoldOut\n----\nUse the seqan:Function.lexicalCast2 to convert strings of numbers into integers.\n}}}\n Solution ::\n{{{#!FoldOut\n----\nThe program appears to be very long, but most is error handling, as usual with robust I/O code.\n\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution2.cpp)]]\n}}}\n}}}\n\n== Next Steps ==\n\n * Read the Wikipedia articles about the [http://en.wikipedia.org/wiki/FASTA_format FASTA file format] and the [http://en.wikipedia.org/wiki/FASTQ_format FASTQ file format and quality values] to refresh your knowledge.\n * Read the API documentation of the seqan:Class.GenomicRegion class for storing regions (sequence identifier, start and end position).\n   There also is functionality for parsing strings like `chr1:2,032-3,212` into seqan:Class.GenomicRegion objects.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\n\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:34.431+02:00	TYPING-text-= Indexed FASTA I/O =\n[[TOC()]]\n\n Learning Objective ::\n  In this tutorial, you will learn how to use a FASTA Index file (`.fai`) for indexed random-access to FASTA files.\n  This is useful for retrieving regions (e.g. `chr1:123-10004`) or single sequences (e.g. `chr1`) from FASTA files quickly.\n Difficulty ::\n  Average\n Duration ::\n  30 min\n Prerequisites ::\n  Tutorials: [wiki:Tutorial/Sequences Sequences]\n\nThe idea of FASTA index files (''FAI'') comes from the [http://samtools.sourceforge.net/samtools.shtml samtools] program by Heng Li.\nThe program provides a command `samtools faidx` for rapidly accessing parts of a large FASTA file (e.g. querying for the first chromosome by the identifier "chr1" or querying for 900 characters starting from character 100 (1-based) by `chr1:100-1,000`).\nTo do this, the program creates an index file that contains one entry for each sequence.\nIf the FASTA file is named `path/sequence.fasta`, the index file is usually named `path/sequence.fasta.fai`.\n\nUsing such index files, it is possible to rapidly read parts of the given sequence file.\nThe module `seqan/seq_io.h` allows to create and read such `.fai` index files and exposes an API to read parts randomly of FASTA file.\n\n{{{#!InfoBox\n'''Information:''' FASTA/FASTQ Meta Data and Sequence Ids\n\nFASTA and FASTQ files have one meta data record for each sequence.\nThis usually contains the sequence name but sometimes a lot of additional information is stored.\nThere is no consensus for the meta data.\n\nIt is common, however, to store the identifier (''id'') of the sequence at the beginning of the meta data field before the first space.\nThe id is unique to the whole file and often identifies the associate sequence uniquely in a data base (see section Sequence Identifiers on the [http://en.wikipedia.org/wiki/FASTA_format Wikipedia FASTA format] page).\n\nWhile not documented anywhere explicitely, '''only the characters up to the first space are used as the identifiers''' by widely used tools such as [http://bio-bwa.sourceforge.net/ BWA].\nOnly the identifier is carried over into files generated from the input files (BWA uses the sequence id from the genome FASTA to identify the contig/chromosome and the read id as the read name in the SAM output).\n}}}\n\n== How Does It Work? ==\n\nThere are two requirements that a FASTA file has to fulfill to work with the FAI scheme:\nFor each sequence in the FASTA file, the number of characters stored per line has to be the same and the number of bytes per line has to be the same.\nThe first restriction speaks for itself, the second restriction means that the same line ending character has to be used and no line should contain any additional spaces.\n\nThe index file then stores records of sequence identifier, length, the offset of the first sequence character in the file, the number of characters per line, and the number of bytes per line.\nWith this information, we can easily compute the byte offset of the i-th character of a sequence in a file by looking at its index record.\nWe skip to this byte offset in the file and from there, we can read the necessary sequence characters.\n\n== Building the Index ==\n\nThe class seqan:Class.FaiIndex allows for building and loading FAI indices.\nTo build such an index, we use the function seqan:Function.FaiIndex#build of the class seqan:Class.FaiIndex.\nThe first parameter is the seqan:Class.FaiIndex object, the second is the path to the FASTA file.\nThe function returns an integer indicating the result (as usual, `0` for no errors, a value different from `0` indicating an error).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nThere is an alternative variant of this function where you can pass the path to the FAI file that is to be built as third parameter.\nThe FAI file name will be stored in the seqan:Class.FaiIndex.\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta", "another/path/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nWe can write out the index after building it using the function seqan:Function.FaiIndex#write:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\n// ... index building here ...\n\nint res = write(faiIndex, "path/to/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not write the index to file!\n";\n}}}\n\n{{{#!AssignmentBox\n'''Assignment 1:''' Building a FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `build_fai` that takes one parameter from the command line:\n  A path to a FASTA file.\n  The program should then build a FAI index and write it out.\n Hints ::\n{{{#!FoldOut\n----\nUsing the two-parameter variant of seqan:Function.FaiIndex#build is good enough.\n}}}\n Solution ::\n{{{#!FoldOut\n----\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution1.cpp)]]\n}}}\n}}}\n\n== Using the Index ==\n\nTo load a FAI file, we use the function seqan:Function.FaiIndex#read:\nWe pass the seqan:Class.FaiIndex object as the first and the path to the FASTA file as the second parameter.\nThe function returns an `int` indicating success (value `0`) or failure (non-`0` value).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not read FAI index path/to/file.fasta.fai\n";\n}}}\n\nIn the example above, the FAI file `"path/to/file.fasta.fai"` would be loaded.\nOptionally, we can specify an extra path to the FAI file:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta", "path/to/index.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not load FAI index path/to/index.fai\n";\n}}}\n\nAfter loading the index, we can then use the index to map a sequence id to its (zero-based) position (a position ''i'' meaning that it is the ''i''-th sequence) in the FASTA file using seqan:Function.FaiIndex#getIdByName.\nThe function gets the seqan:Class.FaiIndex to use, the id of the sequence, and an `unsigned` position as parameters.\nIt returns a `bool` indicating whether the mapping was successful (`true` on success, `false` on failure).\n\n{{{#!cpp\nunsigned idx = 0;\nif (!getIdByName(faiIndex, "chr1", idx))\n    std::cerr << "ERROR: FAI index has no entry for chr1.\n";\n}}}\n\nOnce we have the index for the sequence in the FASTA file, we can then query the seqan:Class.FaiIndex for the length of the sequence using seqan:Function.FaiIndex#sequenceLength, get the whole sequence using seqan:Function.FaiIndex#readSequence, or get just a part of the sequence using seqan:Function.FaiIndex#readRegion.\n\n{{{#!cpp\nunsigned seqLength = sequenceLength(faiIndex, idx);\n\n// Load first 1000 characters of chr1.\nseqan::CharString seqChr1Prefix;\nif (readRegion(seqChr1Prefix, faiIdx, idx, 0, 1000) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n\n// Load all of chr1.\nseqan::CharString seqChr1;\nif (readSequence(seqChr1, faiIdx, idx) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n}}}\n\nThe sequence length can be determined by only looking at the index.\nWhen loading the sequence or a sequence infix, only the relevant part of the file will be touched.\nThus, only the minimal amount of memory, time, and disk I/O is used.\n\n{{{#!AssignmentBox\n'''Assignment 2:''' Using the FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `query_fai` that takes four parameters from the command line:\n  A path to a FASTA file, the id of the sequence, a begin and an end position.\n  The program should then read the given infix of the given sequence from the file and print it to stdout.\n Hint ::\n{{{#!FoldOut\n----\nUse the seqan:Function.lexicalCast2 to convert strings of numbers into integers.\n}}}\n Solution ::\n{{{#!FoldOut\n----\nThe program appears to be very long, but most is error handling, as usual with robust I/O code.\n\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution2.cpp)]]\n}}}\n}}}\n\n== Next Steps ==\n\n * Read the Wikipedia articles about the [http://en.wikipedia.org/wiki/FASTA_format FASTA file format] and the [http://en.wikipedia.org/wiki/FASTQ_format FASTQ file format and quality values] to refresh your knowledge.\n * Read the API documentation of the seqan:Class.GenomicRegion class for storing regions (sequence identifier, start and end position).\n   There also is functionality for parsing strings like `chr1:2,032-3,212` into seqan:Class.GenomicRegion objects.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\n\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:34.438+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:42.576+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:43.252+02:00	TYPING-text-= Indexed FASTA I/O =\n[[TOC()]]\n\n Learning Objective ::\n  In this tutorial, you will learn how to use a FASTA Index file (`.fai`) for indexed random-access to FASTA files.\n  This is useful for retrieving regions (e.g. `chr1:123-10004`) or single sequences (e.g. `chr1`) from FASTA files quickly.\n Difficulty ::\n  Average\n Duration ::\n  30 min\n Prerequisites ::\n  Tutorials: [wiki:Tutorial/Sequences Sequences]\n\nThe idea of FASTA index files (''FAI'') comes from the [http://samtools.sourceforge.net/samtools.shtml samtools] program by Heng Li.\nThe program provides a command `samtools faidx` for rapidly accessing parts of a large FASTA file (e.g. querying for the first chromosome by the identifier "chr1" or querying for 900 characters starting from character 100 (1-based) by `chr1:100-1,000`).\nTo do this, the program creates an index file that contains one entry for each sequence.\nIf the FASTA file is named `path/sequence.fasta`, the index file is usually named `path/sequence.fasta.fai`.\n\nUsing such index files, it is possible to rapidly read parts of the given sequence file.\nThe module `seqan/seq_io.h` allows to create and read such `.fai` index files and exposes an API to read parts randomly of FASTA file.\n\n{{{#!InfoBox\n'''Information:''' FASTA/FASTQ Meta Data and Sequence Ids\n\nFASTA and FASTQ files have one meta data record for each sequence.\nThis usually contains the sequence name but sometimes a lot of additional information is stored.\nThere is no consensus for the meta data.\n\nIt is common, however, to store the identifier (''id'') of the sequence at the beginning of the meta data field before the first space.\nThe id is unique to the whole file and often identifies the associate sequence uniquely in a data base (see section Sequence Identifiers on the [http://en.wikipedia.org/wiki/FASTA_format Wikipedia FASTA format] page).\n\nWhile not documented anywhere explicitely, '''only the characters up to the first space are used as the identifiers''' by widely used tools such as [http://bio-bwa.sourceforge.net/ BWA].\nOnly the identifier is carried over into files generated from the input files (BWA uses the sequence id from the genome FASTA to identify the contig/chromosome and the read id as the read name in the SAM output).\n}}}\n\n== How Does It Work? ==\n\nThere are two requirements that a FASTA file has to fulfill to work with the FAI scheme:\nFor each sequence in the FASTA file, the number of characters stored per line has to be the same and the number of bytes per line has to be the same.\nThe first restriction speaks for itself, the second restriction means that the same line ending character has to be used and no line should contain any additional spaces.\n\nThe index file then stores records of sequence identifier, length, the offset of the first sequence character in the file, the number of characters per line, and the number of bytes per line.\nWith this information, we can easily compute the byte offset of the i-th character of a sequence in a file by looking at its index record.\nWe skip to this byte offset in the file and from there, we can read the necessary sequence characters.\n\n== Building the Index ==\n\nThe class seqan:Class.FaiIndex allows for building and loading FAI indices.\nTo build such an index, we use the function seqan:Function.FaiIndex#build of the class seqan:Class.FaiIndex.\nThe first parameter is the seqan:Class.FaiIndex object, the second is the path to the FASTA file.\nThe function returns an integer indicating the result (as usual, `0` for no errors, a value different from `0` indicating an error).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nThere is an alternative variant of this function where you can pass the path to the FAI file that is to be built as third parameter.\nThe FAI file name will be stored in the seqan:Class.FaiIndex.\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta", "another/path/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nWe can write out the index after building it using the function seqan:Function.FaiIndex#write:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\n// ... index building here ...\n\nint res = write(faiIndex, "path/to/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not write the index to file!\n";\n}}}\n\n{{{#!AssignmentBox\n'''Assignment 1:''' Building a FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `build_fai` that takes one parameter from the command line:\n  A path to a FASTA file.\n  The program should then build a FAI index and write it out.\n Hints ::\n{{{#!FoldOut\n----\nUsing the two-parameter variant of seqan:Function.FaiIndex#build is good enough.\n}}}\n Solution ::\n{{{#!FoldOut\n----\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution1.cpp)]]\n}}}\n}}}\n\n== Using the Index ==\n\nTo load a FAI file, we use the function seqan:Function.FaiIndex#read:\nWe pass the seqan:Class.FaiIndex object as the first and the path to the FASTA file as the second parameter.\nThe function returns an `int` indicating success (value `0`) or failure (non-`0` value).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not read FAI index path/to/file.fasta.fai\n";\n}}}\n\nIn the example above, the FAI file `"path/to/file.fasta.fai"` would be loaded.\nOptionally, we can specify an extra path to the FAI file:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta", "path/to/index.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not load FAI index path/to/index.fai\n";\n}}}\n\nAfter loading the index, we can then use the index to map a sequence id to its (zero-based) position (a position ''i'' meaning that it is the ''i''-th sequence) in the FASTA file using seqan:Function.FaiIndex#getIdByName.\nThe function gets the seqan:Class.FaiIndex to use, the id of the sequence, and an `unsigned` position as parameters.\nIt returns a `bool` indicating whether the mapping was successful (`true` on success, `false` on failure).\n\n{{{#!cpp\nunsigned idx = 0;\nif (!getIdByName(faiIndex, "chr1", idx))\n    std::cerr << "ERROR: FAI index has no entry for chr1.\n";\n}}}\n\nOnce we have the index for the sequence in the FASTA file, we can then query the seqan:Class.FaiIndex for the length of the sequence using seqan:Function.FaiIndex#sequenceLength, get the whole sequence using seqan:Function.FaiIndex#readSequence, or get just a part of the sequence using seqan:Function.FaiIndex#readRegion.\n\n{{{#!cpp\nunsigned seqLength = sequenceLength(faiIndex, idx);\n\n// Load first 1000 characters of chr1.\nseqan::CharString seqChr1Prefix;\nif (readRegion(seqChr1Prefix, faiIdx, idx, 0, 1000) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n\n// Load all of chr1.\nseqan::CharString seqChr1;\nif (readSequence(seqChr1, faiIdx, idx) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n}}}\n\nThe sequence length can be determined by only looking at the index.\nWhen loading the sequence or a sequence infix, only the relevant part of the file will be touched.\nThus, only the minimal amount of memory, time, and disk I/O is used.\n\n{{{#!AssignmentBox\n'''Assignment 2:''' Using the FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `query_fai` that takes four parameters from the command line:\n  A path to a FASTA file, the id of the sequence, a begin and an end position.\n  The program should then read the given infix of the given sequence from the file and print it to stdout.\n Hint ::\n{{{#!FoldOut\n----\nUse the seqan:Function.lexicalCast2 to convert strings of numbers into integers.\n}}}\n Solution ::\n{{{#!FoldOut\n----\nThe program appears to be very long, but most is error handling, as usual with robust I/O code.\n\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution2.cpp)]]\n}}}\n}}}\n\n== Next Steps ==\n\n * Read the Wikipedia articles about the [http://en.wikipedia.org/wiki/FASTA_format FASTA file format] and the [http://en.wikipedia.org/wiki/FASTQ_format FASTQ file format and quality values] to refresh your knowledge.\n * Read the API documentation of the seqan:Class.GenomicRegion class for storing regions (sequence identifier, start and end position).\n   There also is functionality for parsing strings like `chr1:2,032-3,212` into seqan:Class.GenomicRegion objects.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\n\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:43.413+02:00	TYPING-text-= Indexed FASTA I/O =\n[[TOC()]]\n\n Learning Objective ::\n  In this tutorial, you will learn how to use a FASTA Index file (`.fai`) for indexed random-access to FASTA files.\n  This is useful for retrieving regions (e.g. `chr1:123-10004`) or single sequences (e.g. `chr1`) from FASTA files quickly.\n Difficulty ::\n  Average\n Duration ::\n  30 min\n Prerequisites ::\n  Tutorials: [wiki:Tutorial/Sequences Sequences]\n\nThe idea of FASTA index files (''FAI'') comes from the [http://samtools.sourceforge.net/samtools.shtml samtools] program by Heng Li.\nThe program provides a command `samtools faidx` for rapidly accessing parts of a large FASTA file (e.g. querying for the first chromosome by the identifier "chr1" or querying for 900 characters starting from character 100 (1-based) by `chr1:100-1,000`).\nTo do this, the program creates an index file that contains one entry for each sequence.\nIf the FASTA file is named `path/sequence.fasta`, the index file is usually named `path/sequence.fasta.fai`.\n\nUsing such index files, it is possible to rapidly read parts of the given sequence file.\nThe module `seqan/seq_io.h` allows to create and read such `.fai` index files and exposes an API to read parts randomly of FASTA file.\n\n{{{#!InfoBox\n'''Information:''' FASTA/FASTQ Meta Data and Sequence Ids\n\nFASTA and FASTQ files have one meta data record for each sequence.\nThis usually contains the sequence name but sometimes a lot of additional information is stored.\nThere is no consensus for the meta data.\n\nIt is common, however, to store the identifier (''id'') of the sequence at the beginning of the meta data field before the first space.\nThe id is unique to the whole file and often identifies the associate sequence uniquely in a data base (see section Sequence Identifiers on the [http://en.wikipedia.org/wiki/FASTA_format Wikipedia FASTA format] page).\n\nWhile not documented anywhere explicitely, '''only the characters up to the first space are used as the identifiers''' by widely used tools such as [http://bio-bwa.sourceforge.net/ BWA].\nOnly the identifier is carried over into files generated from the input files (BWA uses the sequence id from the genome FASTA to identify the contig/chromosome and the read id as the read name in the SAM output).\n}}}\n\n== How Does It Work? ==\n\nThere are two requirements that a FASTA file has to fulfill to work with the FAI scheme:\nFor each sequence in the FASTA file, the number of characters stored per line has to be the same and the number of bytes per line has to be the same.\nThe first restriction speaks for itself, the second restriction means that the same line ending character has to be used and no line should contain any additional spaces.\n\nThe index file then stores records of sequence identifier, length, the offset of the first sequence character in the file, the number of characters per line, and the number of bytes per line.\nWith this information, we can easily compute the byte offset of the i-th character of a sequence in a file by looking at its index record.\nWe skip to this byte offset in the file and from there, we can read the necessary sequence characters.\n\n== Building the Index ==\n\nThe class seqan:Class.FaiIndex allows for building and loading FAI indices.\nTo build such an index, we use the function seqan:Function.FaiIndex#build of the class seqan:Class.FaiIndex.\nThe first parameter is the seqan:Class.FaiIndex object, the second is the path to the FASTA file.\nThe function returns an integer indicating the result (as usual, `0` for no errors, a value different from `0` indicating an error).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nThere is an alternative variant of this function where you can pass the path to the FAI file that is to be built as third parameter.\nThe FAI file name will be stored in the seqan:Class.FaiIndex.\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta", "another/path/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nWe can write out the index after building it using the function seqan:Function.FaiIndex#write:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\n// ... index building here ...\n\nint res = write(faiIndex, "path/to/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not write the index to file!\n";\n}}}\n\n{{{#!AssignmentBox\n'''Assignment 1:''' Building a FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `build_fai` that takes one parameter from the command line:\n  A path to a FASTA file.\n  The program should then build a FAI index and write it out.\n Hints ::\n{{{#!FoldOut\n----\nUsing the two-parameter variant of seqan:Function.FaiIndex#build is good enough.\n}}}\n Solution ::\n{{{#!FoldOut\n----\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution1.cpp)]]\n}}}\n}}}\n\n== Using the Index ==\n\nTo load a FAI file, we use the function seqan:Function.FaiIndex#read:\nWe pass the seqan:Class.FaiIndex object as the first and the path to the FASTA file as the second parameter.\nThe function returns an `int` indicating success (value `0`) or failure (non-`0` value).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not read FAI index path/to/file.fasta.fai\n";\n}}}\n\nIn the example above, the FAI file `"path/to/file.fasta.fai"` would be loaded.\nOptionally, we can specify an extra path to the FAI file:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta", "path/to/index.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not load FAI index path/to/index.fai\n";\n}}}\n\nAfter loading the index, we can then use the index to map a sequence id to its (zero-based) position (a position ''i'' meaning that it is the ''i''-th sequence) in the FASTA file using seqan:Function.FaiIndex#getIdByName.\nThe function gets the seqan:Class.FaiIndex to use, the id of the sequence, and an `unsigned` position as parameters.\nIt returns a `bool` indicating whether the mapping was successful (`true` on success, `false` on failure).\n\n{{{#!cpp\nunsigned idx = 0;\nif (!getIdByName(faiIndex, "chr1", idx))\n    std::cerr << "ERROR: FAI index has no entry for chr1.\n";\n}}}\n\nOnce we have the index for the sequence in the FASTA file, we can then query the seqan:Class.FaiIndex for the length of the sequence using seqan:Function.FaiIndex#sequenceLength, get the whole sequence using seqan:Function.FaiIndex#readSequence, or get just a part of the sequence using seqan:Function.FaiIndex#readRegion.\n\n{{{#!cpp\nunsigned seqLength = sequenceLength(faiIndex, idx);\n\n// Load first 1000 characters of chr1.\nseqan::CharString seqChr1Prefix;\nif (readRegion(seqChr1Prefix, faiIdx, idx, 0, 1000) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n\n// Load all of chr1.\nseqan::CharString seqChr1;\nif (readSequence(seqChr1, faiIdx, idx) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n}}}\n\nThe sequence length can be determined by only looking at the index.\nWhen loading the sequence or a sequence infix, only the relevant part of the file will be touched.\nThus, only the minimal amount of memory, time, and disk I/O is used.\n\n{{{#!AssignmentBox\n'''Assignment 2:''' Using the FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `query_fai` that takes four parameters from the command line:\n  A path to a FASTA file, the id of the sequence, a begin and an end position.\n  The program should then read the given infix of the given sequence from the file and print it to stdout.\n Hint ::\n{{{#!FoldOut\n----\nUse the seqan:Function.lexicalCast2 to convert strings of numbers into integers.\n}}}\n Solution ::\n{{{#!FoldOut\n----\nThe program appears to be very long, but most is error handling, as usual with robust I/O code.\n\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution2.cpp)]]\n}}}\n}}}\n\n== Next Steps ==\n\n * Read the Wikipedia articles about the [http://en.wikipedia.org/wiki/FASTA_format FASTA file format] and the [http://en.wikipedia.org/wiki/FASTQ_format FASTQ file format and quality values] to refresh your knowledge.\n * Read the API documentation of the seqan:Class.GenomicRegion class for storing regions (sequence identifier, start and end position).\n   There also is functionality for parsing strings like `chr1:2,032-3,212` into seqan:Class.GenomicRegion objects.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\n\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:54.573+02:00	TYPING-text-= Indexed FASTA I/O =\n[[TOC()]]\n\n Learning Objective ::\n  In this tutorial, you will learn how to use a FASTA Index file (`.fai`) for indexed random-access to FASTA files.\n  This is useful for retrieving regions (e.g. `chr1:123-10004`) or single sequences (e.g. `chr1`) from FASTA files quickly.\n Difficulty ::\n  Average\n Duration ::\n  30 min\n Prerequisites ::\n  Tutorials: [wiki:Tutorial/Sequences Sequences]\n\nThe idea of FASTA index files (''FAI'') comes from the [http://samtools.sourceforge.net/samtools.shtml samtools] program by Heng Li.\nThe program provides a command `samtools faidx` for rapidly accessing parts of a large FASTA file (e.g. querying for the first chromosome by the identifier "chr1" or querying for 900 characters starting from character 100 (1-based) by `chr1:100-1,000`).\nTo do this, the program creates an index file that contains one entry for each sequence.\nIf the FASTA file is named `path/sequence.fasta`, the index file is usually named `path/sequence.fasta.fai`.\n\nUsing such index files, it is possible to rapidly read parts of the given sequence file.\nThe module `seqan/seq_io.h` allows to create and read such `.fai` index files and exposes an API to read parts randomly of FASTA file.\n\n{{{#!InfoBox\n'''Information:''' FASTA/FASTQ Meta Data and Sequence Ids\n\nFASTA and FASTQ files have one meta data record for each sequence.\nThis usually contains the sequence name but sometimes a lot of additional information is stored.\nThere is no consensus for the meta data.\n\nIt is common, however, to store the identifier (''id'') of the sequence at the beginning of the meta data field before the first space.\nThe id is unique to the whole file and often identifies the associate sequence uniquely in a data base (see section Sequence Identifiers on the [http://en.wikipedia.org/wiki/FASTA_format Wikipedia FASTA format] page).\n\nWhile not documented anywhere explicitely, '''only the characters up to the first space are used as the identifiers''' by widely used tools such as [http://bio-bwa.sourceforge.net/ BWA].\nOnly the identifier is carried over into files generated from the input files (BWA uses the sequence id from the genome FASTA to identify the contig/chromosome and the read id as the read name in the SAM output).\n}}}\n\n== How Does It Work? ==\n\nThere are two requirements that a FASTA file has to fulfill to work with the FAI scheme:\nFor each sequence in the FASTA file, the number of characters stored per line has to be the same and the number of bytes per line has to be the same.\nThe first restriction speaks for itself, the second restriction means that the same line ending character has to be used and no line should contain any additional spaces.\n\nThe index file then stores records of sequence identifier, length, the offset of the first sequence character in the file, the number of characters per line, and the number of bytes per line.\nWith this information, we can easily compute the byte offset of the i-th character of a sequence in a file by looking at its index record.\nWe skip to this byte offset in the file and from there, we can read the necessary sequence characters.\n\n== Building the Index ==\n\nThe class seqan:Class.FaiIndex allows for building and loading FAI indices.\nTo build such an index, we use the function seqan:Function.FaiIndex#build of the class seqan:Class.FaiIndex.\nThe first parameter is the seqan:Class.FaiIndex object, the second is the path to the FASTA file.\nThe function returns an integer indicating the result (as usual, `0` for no errors, a value different from `0` indicating an error).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nThere is an alternative variant of this function where you can pass the path to the FAI file that is to be built as third parameter.\nThe FAI file name will be stored in the seqan:Class.FaiIndex.\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta", "another/path/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nWe can write out the index after building it using the function seqan:Function.FaiIndex#write:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\n// ... index building here ...\n\nint res = write(faiIndex, "path/to/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not write the index to file!\n";\n}}}\n\n{{{#!AssignmentBox\n'''Assignment 1:''' Building a FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `build_fai` that takes one parameter from the command line:\n  A path to a FASTA file.\n  The program should then build a FAI index and write it out.\n Hints ::\n{{{#!FoldOut\n----\nUsing the two-parameter variant of seqan:Function.FaiIndex#build is good enough.\n}}}\n Solution ::\n{{{#!FoldOut\n----\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution1.cpp)]]\n}}}\n}}}\n\n== Using the Index ==\n\nTo load a FAI file, we use the function seqan:Function.FaiIndex#read:\nWe pass the seqan:Class.FaiIndex object as the first and the path to the FASTA file as the second parameter.\nThe function returns an `int` indicating success (value `0`) or failure (non-`0` value).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not read FAI index path/to/file.fasta.fai\n";\n}}}\n\nIn the example above, the FAI file `"path/to/file.fasta.fai"` would be loaded.\nOptionally, we can specify an extra path to the FAI file:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta", "path/to/index.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not load FAI index path/to/index.fai\n";\n}}}\n\nAfter loading the index, we can then use the index to map a sequence id to its (zero-based) position (a position ''i'' meaning that it is the ''i''-th sequence) in the FASTA file using seqan:Function.FaiIndex#getIdByName.\nThe function gets the seqan:Class.FaiIndex to use, the id of the sequence, and an `unsigned` position as parameters.\nIt returns a `bool` indicating whether the mapping was successful (`true` on success, `false` on failure).\n\n{{{#!cpp\nunsigned idx = 0;\nif (!getIdByName(faiIndex, "chr1", idx))\n    std::cerr << "ERROR: FAI index has no entry for chr1.\n";\n}}}\n\nOnce we have the index for the sequence in the FASTA file, we can then query the seqan:Class.FaiIndex for the length of the sequence using seqan:Function.FaiIndex#sequenceLength, get the whole sequence using seqan:Function.FaiIndex#readSequence, or get just a part of the sequence using seqan:Function.FaiIndex#readRegion.\n\n{{{#!cpp\nunsigned seqLength = sequenceLength(faiIndex, idx);\n\n// Load first 1000 characters of chr1.\nseqan::CharString seqChr1Prefix;\nif (readRegion(seqChr1Prefix, faiIdx, idx, 0, 1000) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n\n// Load all of chr1.\nseqan::CharString seqChr1;\nif (readSequence(seqChr1, faiIdx, idx) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n}}}\n\nThe sequence length can be determined by only looking at the index.\nWhen loading the sequence or a sequence infix, only the relevant part of the file will be touched.\nThus, only the minimal amount of memory, time, and disk I/O is used.\n\n{{{#!AssignmentBox\n'''Assignment 2:''' Using the FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `query_fai` that takes four parameters from the command line:\n  A path to a FASTA file, the id of the sequence, a begin and an end position.\n  The program should then read the given infix of the given sequence from the file and print it to stdout.\n Hint ::\n{{{#!FoldOut\n----\nUse the seqan:Function.lexicalCast2 to convert strings of numbers into integers.\n}}}\n Solution ::\n{{{#!FoldOut\n----\nThe program appears to be very long, but most is error handling, as usual with robust I/O code.\n\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution2.cpp)]]\n}}}\n}}}\n\n== Next Steps ==\n\n * Read the Wikipedia articles about the [http://en.wikipedia.org/wiki/FASTA_format FASTA file format] and the [http://en.wikipedia.org/wiki/FASTQ_format FASTQ file format and quality values] to refresh your knowledge.\n * Read the API documentation of the seqan:Class.GenomicRegion class for storing regions (sequence identifier, start and end position).\n   There also is functionality for parsing strings like `chr1:2,032-3,212` into seqan:Class.GenomicRegion objects.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\n\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:54.988+02:00	TYPING-text-= Indexed FASTA I/O =\n[[TOC()]]\n\n Learning Objective ::\n  In this tutorial, you will learn how to use a FASTA Index file (`.fai`) for indexed random-access to FASTA files.\n  This is useful for retrieving regions (e.g. `chr1:123-10004`) or single sequences (e.g. `chr1`) from FASTA files quickly.\n Difficulty ::\n  Average\n Duration ::\n  30 min\n Prerequisites ::\n  Tutorials: [wiki:Tutorial/Sequences Sequences]\n\nThe idea of FASTA index files (''FAI'') comes from the [http://samtools.sourceforge.net/samtools.shtml samtools] program by Heng Li.\nThe program provides a command `samtools faidx` for rapidly accessing parts of a large FASTA file (e.g. querying for the first chromosome by the identifier "chr1" or querying for 900 characters starting from character 100 (1-based) by `chr1:100-1,000`).\nTo do this, the program creates an index file that contains one entry for each sequence.\nIf the FASTA file is named `path/sequence.fasta`, the index file is usually named `path/sequence.fasta.fai`.\n\nUsing such index files, it is possible to rapidly read parts of the given sequence file.\nThe module `seqan/seq_io.h` allows to create and read such `.fai` index files and exposes an API to read parts randomly of FASTA file.\n\n{{{#!InfoBox\n'''Information:''' FASTA/FASTQ Meta Data and Sequence Ids\n\nFASTA and FASTQ files have one meta data record for each sequence.\nThis usually contains the sequence name but sometimes a lot of additional information is stored.\nThere is no consensus for the meta data.\n\nIt is common, however, to store the identifier (''id'') of the sequence at the beginning of the meta data field before the first space.\nThe id is unique to the whole file and often identifies the associate sequence uniquely in a data base (see section Sequence Identifiers on the [http://en.wikipedia.org/wiki/FASTA_format Wikipedia FASTA format] page).\n\nWhile not documented anywhere explicitely, '''only the characters up to the first space are used as the identifiers''' by widely used tools such as [http://bio-bwa.sourceforge.net/ BWA].\nOnly the identifier is carried over into files generated from the input files (BWA uses the sequence id from the genome FASTA to identify the contig/chromosome and the read id as the read name in the SAM output).\n}}}\n\n== How Does It Work? ==\n\nThere are two requirements that a FASTA file has to fulfill to work with the FAI scheme:\nFor each sequence in the FASTA file, the number of characters stored per line has to be the same and the number of bytes per line has to be the same.\nThe first restriction speaks for itself, the second restriction means that the same line ending character has to be used and no line should contain any additional spaces.\n\nThe index file then stores records of sequence identifier, length, the offset of the first sequence character in the file, the number of characters per line, and the number of bytes per line.\nWith this information, we can easily compute the byte offset of the i-th character of a sequence in a file by looking at its index record.\nWe skip to this byte offset in the file and from there, we can read the necessary sequence characters.\n\n== Building the Index ==\n\nThe class seqan:Class.FaiIndex allows for building and loading FAI indices.\nTo build such an index, we use the function seqan:Function.FaiIndex#build of the class seqan:Class.FaiIndex.\nThe first parameter is the seqan:Class.FaiIndex object, the second is the path to the FASTA file.\nThe function returns an integer indicating the result (as usual, `0` for no errors, a value different from `0` indicating an error).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nThere is an alternative variant of this function where you can pass the path to the FAI file that is to be built as third parameter.\nThe FAI file name will be stored in the seqan:Class.FaiIndex.\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta", "another/path/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nWe can write out the index after building it using the function seqan:Function.FaiIndex#write:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\n// ... index building here ...\n\nint res = write(faiIndex, "path/to/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not write the index to file!\n";\n}}}\n\n{{{#!AssignmentBox\n'''Assignment 1:''' Building a FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `build_fai` that takes one parameter from the command line:\n  A path to a FASTA file.\n  The program should then build a FAI index and write it out.\n Hints ::\n{{{#!FoldOut\n----\nUsing the two-parameter variant of seqan:Function.FaiIndex#build is good enough.\n}}}\n Solution ::\n{{{#!FoldOut\n----\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution1.cpp)]]\n}}}\n}}}\n\n== Using the Index ==\n\nTo load a FAI file, we use the function seqan:Function.FaiIndex#read:\nWe pass the seqan:Class.FaiIndex object as the first and the path to the FASTA file as the second parameter.\nThe function returns an `int` indicating success (value `0`) or failure (non-`0` value).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not read FAI index path/to/file.fasta.fai\n";\n}}}\n\nIn the example above, the FAI file `"path/to/file.fasta.fai"` would be loaded.\nOptionally, we can specify an extra path to the FAI file:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta", "path/to/index.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not load FAI index path/to/index.fai\n";\n}}}\n\nAfter loading the index, we can then use the index to map a sequence id to its (zero-based) position (a position ''i'' meaning that it is the ''i''-th sequence) in the FASTA file using seqan:Function.FaiIndex#getIdByName.\nThe function gets the seqan:Class.FaiIndex to use, the id of the sequence, and an `unsigned` position as parameters.\nIt returns a `bool` indicating whether the mapping was successful (`true` on success, `false` on failure).\n\n{{{#!cpp\nunsigned idx = 0;\nif (!getIdByName(faiIndex, "chr1", idx))\n    std::cerr << "ERROR: FAI index has no entry for chr1.\n";\n}}}\n\nOnce we have the index for the sequence in the FASTA file, we can then query the seqan:Class.FaiIndex for the length of the sequence using seqan:Function.FaiIndex#sequenceLength, get the whole sequence using seqan:Function.FaiIndex#readSequence, or get just a part of the sequence using seqan:Function.FaiIndex#readRegion.\n\n{{{#!cpp\nunsigned seqLength = sequenceLength(faiIndex, idx);\n\n// Load first 1000 characters of chr1.\nseqan::CharString seqChr1Prefix;\nif (readRegion(seqChr1Prefix, faiIdx, idx, 0, 1000) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n\n// Load all of chr1.\nseqan::CharString seqChr1;\nif (readSequence(seqChr1, faiIdx, idx) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n}}}\n\nThe sequence length can be determined by only looking at the index.\nWhen loading the sequence or a sequence infix, only the relevant part of the file will be touched.\nThus, only the minimal amount of memory, time, and disk I/O is used.\n\n{{{#!AssignmentBox\n'''Assignment 2:''' Using the FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `query_fai` that takes four parameters from the command line:\n  A path to a FASTA file, the id of the sequence, a begin and an end position.\n  The program should then read the given infix of the given sequence from the file and print it to stdout.\n Hint ::\n{{{#!FoldOut\n----\nUse the seqan:Function.lexicalCast2 to convert strings of numbers into integers.\n}}}\n Solution ::\n{{{#!FoldOut\n----\nThe program appears to be very long, but most is error handling, as usual with robust I/O code.\n\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution2.cpp)]]\n}}}\n}}}\n\n== Next Steps ==\n\n * Read the Wikipedia articles about the [http://en.wikipedia.org/wiki/FASTA_format FASTA file format] and the [http://en.wikipedia.org/wiki/FASTQ_format FASTQ file format and quality values] to refresh your knowledge.\n * Read the API documentation of the seqan:Class.GenomicRegion class for storing regions (sequence identifier, start and end position).\n   There also is functionality for parsing strings like `chr1:2,032-3,212` into seqan:Class.GenomicRegion objects.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\n\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:55.012+02:00	TYPING-text-= Indexed FASTA I/O =\n[[TOC()]]\n\n Learning Objective ::\n  In this tutorial, you will learn how to use a FASTA Index file (`.fai`) for indexed random-access to FASTA files.\n  This is useful for retrieving regions (e.g. `chr1:123-10004`) or single sequences (e.g. `chr1`) from FASTA files quickly.\n Difficulty ::\n  Average\n Duration ::\n  30 min\n Prerequisites ::\n  Tutorials: [wiki:Tutorial/Sequences Sequences]\n\nThe idea of FASTA index files (''FAI'') comes from the [http://samtools.sourceforge.net/samtools.shtml samtools] program by Heng Li.\nThe program provides a command `samtools faidx` for rapidly accessing parts of a large FASTA file (e.g. querying for the first chromosome by the identifier "chr1" or querying for 900 characters starting from character 100 (1-based) by `chr1:100-1,000`).\nTo do this, the program creates an index file that contains one entry for each sequence.\nIf the FASTA file is named `path/sequence.fasta`, the index file is usually named `path/sequence.fasta.fai`.\n\nUsing such index files, it is possible to rapidly read parts of the given sequence file.\nThe module `seqan/seq_io.h` allows to create and read such `.fai` index files and exposes an API to read parts randomly of FASTA file.\n\n{{{#!InfoBox\n'''Information:''' FASTA/FASTQ Meta Data and Sequence Ids\n\nFASTA and FASTQ files have one meta data record for each sequence.\nThis usually contains the sequence name but sometimes a lot of additional information is stored.\nThere is no consensus for the meta data.\n\nIt is common, however, to store the identifier (''id'') of the sequence at the beginning of the meta data field before the first space.\nThe id is unique to the whole file and often identifies the associate sequence uniquely in a data base (see section Sequence Identifiers on the [http://en.wikipedia.org/wiki/FASTA_format Wikipedia FASTA format] page).\n\nWhile not documented anywhere explicitely, '''only the characters up to the first space are used as the identifiers''' by widely used tools such as [http://bio-bwa.sourceforge.net/ BWA].\nOnly the identifier is carried over into files generated from the input files (BWA uses the sequence id from the genome FASTA to identify the contig/chromosome and the read id as the read name in the SAM output).\n}}}\n\n== How Does It Work? ==\n\nThere are two requirements that a FASTA file has to fulfill to work with the FAI scheme:\nFor each sequence in the FASTA file, the number of characters stored per line has to be the same and the number of bytes per line has to be the same.\nThe first restriction speaks for itself, the second restriction means that the same line ending character has to be used and no line should contain any additional spaces.\n\nThe index file then stores records of sequence identifier, length, the offset of the first sequence character in the file, the number of characters per line, and the number of bytes per line.\nWith this information, we can easily compute the byte offset of the i-th character of a sequence in a file by looking at its index record.\nWe skip to this byte offset in the file and from there, we can read the necessary sequence characters.\n\n== Building the Index ==\n\nThe class seqan:Class.FaiIndex allows for building and loading FAI indices.\nTo build such an index, we use the function seqan:Function.FaiIndex#build of the class seqan:Class.FaiIndex.\nThe first parameter is the seqan:Class.FaiIndex object, the second is the path to the FASTA file.\nThe function returns an integer indicating the result (as usual, `0` for no errors, a value different from `0` indicating an error).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nThere is an alternative variant of this function where you can pass the path to the FAI file that is to be built as third parameter.\nThe FAI file name will be stored in the seqan:Class.FaiIndex.\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta", "another/path/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nWe can write out the index after building it using the function seqan:Function.FaiIndex#write:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\n// ... index building here ...\n\nint res = write(faiIndex, "path/to/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not write the index to file!\n";\n}}}\n\n{{{#!AssignmentBox\n'''Assignment 1:''' Building a FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `build_fai` that takes one parameter from the command line:\n  A path to a FASTA file.\n  The program should then build a FAI index and write it out.\n Hints ::\n{{{#!FoldOut\n----\nUsing the two-parameter variant of seqan:Function.FaiIndex#build is good enough.\n}}}\n Solution ::\n{{{#!FoldOut\n----\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution1.cpp)]]\n}}}\n}}}\n\n== Using the Index ==\n\nTo load a FAI file, we use the function seqan:Function.FaiIndex#read:\nWe pass the seqan:Class.FaiIndex object as the first and the path to the FASTA file as the second parameter.\nThe function returns an `int` indicating success (value `0`) or failure (non-`0` value).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not read FAI index path/to/file.fasta.fai\n";\n}}}\n\nIn the example above, the FAI file `"path/to/file.fasta.fai"` would be loaded.\nOptionally, we can specify an extra path to the FAI file:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta", "path/to/index.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not load FAI index path/to/index.fai\n";\n}}}\n\nAfter loading the index, we can then use the index to map a sequence id to its (zero-based) position (a position ''i'' meaning that it is the ''i''-th sequence) in the FASTA file using seqan:Function.FaiIndex#getIdByName.\nThe function gets the seqan:Class.FaiIndex to use, the id of the sequence, and an `unsigned` position as parameters.\nIt returns a `bool` indicating whether the mapping was successful (`true` on success, `false` on failure).\n\n{{{#!cpp\nunsigned idx = 0;\nif (!getIdByName(faiIndex, "chr1", idx))\n    std::cerr << "ERROR: FAI index has no entry for chr1.\n";\n}}}\n\nOnce we have the index for the sequence in the FASTA file, we can then query the seqan:Class.FaiIndex for the length of the sequence using seqan:Function.FaiIndex#sequenceLength, get the whole sequence using seqan:Function.FaiIndex#readSequence, or get just a part of the sequence using seqan:Function.FaiIndex#readRegion.\n\n{{{#!cpp\nunsigned seqLength = sequenceLength(faiIndex, idx);\n\n// Load first 1000 characters of chr1.\nseqan::CharString seqChr1Prefix;\nif (readRegion(seqChr1Prefix, faiIdx, idx, 0, 1000) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n\n// Load all of chr1.\nseqan::CharString seqChr1;\nif (readSequence(seqChr1, faiIdx, idx) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n}}}\n\nThe sequence length can be determined by only looking at the index.\nWhen loading the sequence or a sequence infix, only the relevant part of the file will be touched.\nThus, only the minimal amount of memory, time, and disk I/O is used.\n\n{{{#!AssignmentBox\n'''Assignment 2:''' Using the FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `query_fai` that takes four parameters from the command line:\n  A path to a FASTA file, the id of the sequence, a begin and an end position.\n  The program should then read the given infix of the given sequence from the file and print it to stdout.\n Hint ::\n{{{#!FoldOut\n----\nUse the seqan:Function.lexicalCast2 to convert strings of numbers into integers.\n}}}\n Solution ::\n{{{#!FoldOut\n----\nThe program appears to be very long, but most is error handling, as usual with robust I/O code.\n\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution2.cpp)]]\n}}}\n}}}\n\n== Next Steps ==\n\n * Read the Wikipedia articles about the [http://en.wikipedia.org/wiki/FASTA_format FASTA file format] and the [http://en.wikipedia.org/wiki/FASTQ_format FASTQ file format and quality values] to refresh your knowledge.\n * Read the API documentation of the seqan:Class.GenomicRegion class for storing regions (sequence identifier, start and end position).\n   There also is functionality for parsing strings like `chr1:2,032-3,212` into seqan:Class.GenomicRegion objects.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\n\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:56.461+02:00	TYPING-text-= Indexed FASTA I/O =\n[[TOC()]]\n\n Learning Objective ::\n  In this tutorial, you will learn how to use a FASTA Index file (`.fai`) for indexed random-access to FASTA files.\n  This is useful for retrieving regions (e.g. `chr1:123-10004`) or single sequences (e.g. `chr1`) from FASTA files quickly.\n Difficulty ::\n  Average\n Duration ::\n  30 min\n Prerequisites ::\n  Tutorials: [wiki:Tutorial/Sequences Sequences]\n\nThe idea of FASTA index files (''FAI'') comes from the [http://samtools.sourceforge.net/samtools.shtml samtools] program by Heng Li.\nThe program provides a command `samtools faidx` for rapidly accessing parts of a large FASTA file (e.g. querying for the first chromosome by the identifier "chr1" or querying for 900 characters starting from character 100 (1-based) by `chr1:100-1,000`).\nTo do this, the program creates an index file that contains one entry for each sequence.\nIf the FASTA file is named `path/sequence.fasta`, the index file is usually named `path/sequence.fasta.fai`.\n\nUsing such index files, it is possible to rapidly read parts of the given sequence file.\nThe module `seqan/seq_io.h` allows to create and read such `.fai` index files and exposes an API to read parts randomly of FASTA file.\n\n{{{#!InfoBox\n'''Information:''' FASTA/FASTQ Meta Data and Sequence Ids\n\nFASTA and FASTQ files have one meta data record for each sequence.\nThis usually contains the sequence name but sometimes a lot of additional information is stored.\nThere is no consensus for the meta data.\n\nIt is common, however, to store the identifier (''id'') of the sequence at the beginning of the meta data field before the first space.\nThe id is unique to the whole file and often identifies the associate sequence uniquely in a data base (see section Sequence Identifiers on the [http://en.wikipedia.org/wiki/FASTA_format Wikipedia FASTA format] page).\n\nWhile not documented anywhere explicitely, '''only the characters up to the first space are used as the identifiers''' by widely used tools such as [http://bio-bwa.sourceforge.net/ BWA].\nOnly the identifier is carried over into files generated from the input files (BWA uses the sequence id from the genome FASTA to identify the contig/chromosome and the read id as the read name in the SAM output).\n}}}\n\n== How Does It Work? ==\n\nThere are two requirements that a FASTA file has to fulfill to work with the FAI scheme:\nFor each sequence in the FASTA file, the number of characters stored per line has to be the same and the number of bytes per line has to be the same.\nThe first restriction speaks for itself, the second restriction means that the same line ending character has to be used and no line should contain any additional spaces.\n\nThe index file then stores records of sequence identifier, length, the offset of the first sequence character in the file, the number of characters per line, and the number of bytes per line.\nWith this information, we can easily compute the byte offset of the i-th character of a sequence in a file by looking at its index record.\nWe skip to this byte offset in the file and from there, we can read the necessary sequence characters.\n\n== Building the Index ==\n\nThe class seqan:Class.FaiIndex allows for building and loading FAI indices.\nTo build such an index, we use the function seqan:Function.FaiIndex#build of the class seqan:Class.FaiIndex.\nThe first parameter is the seqan:Class.FaiIndex object, the second is the path to the FASTA file.\nThe function returns an integer indicating the result (as usual, `0` for no errors, a value different from `0` indicating an error).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nThere is an alternative variant of this function where you can pass the path to the FAI file that is to be built as third parameter.\nThe FAI file name will be stored in the seqan:Class.FaiIndex.\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta", "another/path/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nWe can write out the index after building it using the function seqan:Function.FaiIndex#write:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\n// ... index building here ...\n\nint res = write(faiIndex, "path/to/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not write the index to file!\n";\n}}}\n\n{{{#!AssignmentBox\n'''Assignment 1:''' Building a FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `build_fai` that takes one parameter from the command line:\n  A path to a FASTA file.\n  The program should then build a FAI index and write it out.\n Hints ::\n{{{#!FoldOut\n----\nUsing the two-parameter variant of seqan:Function.FaiIndex#build is good enough.\n}}}\n Solution ::\n{{{#!FoldOut\n----\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution1.cpp)]]\n}}}\n}}}\n\n== Using the Index ==\n\nTo load a FAI file, we use the function seqan:Function.FaiIndex#read:\nWe pass the seqan:Class.FaiIndex object as the first and the path to the FASTA file as the second parameter.\nThe function returns an `int` indicating success (value `0`) or failure (non-`0` value).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not read FAI index path/to/file.fasta.fai\n";\n}}}\n\nIn the example above, the FAI file `"path/to/file.fasta.fai"` would be loaded.\nOptionally, we can specify an extra path to the FAI file:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta", "path/to/index.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not load FAI index path/to/index.fai\n";\n}}}\n\nAfter loading the index, we can then use the index to map a sequence id to its (zero-based) position (a position ''i'' meaning that it is the ''i''-th sequence) in the FASTA file using seqan:Function.FaiIndex#getIdByName.\nThe function gets the seqan:Class.FaiIndex to use, the id of the sequence, and an `unsigned` position as parameters.\nIt returns a `bool` indicating whether the mapping was successful (`true` on success, `false` on failure).\n\n{{{#!cpp\nunsigned idx = 0;\nif (!getIdByName(faiIndex, "chr1", idx))\n    std::cerr << "ERROR: FAI index has no entry for chr1.\n";\n}}}\n\nOnce we have the index for the sequence in the FASTA file, we can then query the seqan:Class.FaiIndex for the length of the sequence using seqan:Function.FaiIndex#sequenceLength, get the whole sequence using seqan:Function.FaiIndex#readSequence, or get just a part of the sequence using seqan:Function.FaiIndex#readRegion.\n\n{{{#!cpp\nunsigned seqLength = sequenceLength(faiIndex, idx);\n\n// Load first 1000 characters of chr1.\nseqan::CharString seqChr1Prefix;\nif (readRegion(seqChr1Prefix, faiIndex, idx, 0, 1000) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n\n// Load all of chr1.\nseqan::CharString seqChr1;\nif (readSequence(seqChr1, faiIdx, idx) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n}}}\n\nThe sequence length can be determined by only looking at the index.\nWhen loading the sequence or a sequence infix, only the relevant part of the file will be touched.\nThus, only the minimal amount of memory, time, and disk I/O is used.\n\n{{{#!AssignmentBox\n'''Assignment 2:''' Using the FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `query_fai` that takes four parameters from the command line:\n  A path to a FASTA file, the id of the sequence, a begin and an end position.\n  The program should then read the given infix of the given sequence from the file and print it to stdout.\n Hint ::\n{{{#!FoldOut\n----\nUse the seqan:Function.lexicalCast2 to convert strings of numbers into integers.\n}}}\n Solution ::\n{{{#!FoldOut\n----\nThe program appears to be very long, but most is error handling, as usual with robust I/O code.\n\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution2.cpp)]]\n}}}\n}}}\n\n== Next Steps ==\n\n * Read the Wikipedia articles about the [http://en.wikipedia.org/wiki/FASTA_format FASTA file format] and the [http://en.wikipedia.org/wiki/FASTQ_format FASTQ file format and quality values] to refresh your knowledge.\n * Read the API documentation of the seqan:Class.GenomicRegion class for storing regions (sequence identifier, start and end position).\n   There also is functionality for parsing strings like `chr1:2,032-3,212` into seqan:Class.GenomicRegion objects.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\n\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:51:56.509+02:00	TYPING-text-= Indexed FASTA I/O =\n[[TOC()]]\n\n Learning Objective ::\n  In this tutorial, you will learn how to use a FASTA Index file (`.fai`) for indexed random-access to FASTA files.\n  This is useful for retrieving regions (e.g. `chr1:123-10004`) or single sequences (e.g. `chr1`) from FASTA files quickly.\n Difficulty ::\n  Average\n Duration ::\n  30 min\n Prerequisites ::\n  Tutorials: [wiki:Tutorial/Sequences Sequences]\n\nThe idea of FASTA index files (''FAI'') comes from the [http://samtools.sourceforge.net/samtools.shtml samtools] program by Heng Li.\nThe program provides a command `samtools faidx` for rapidly accessing parts of a large FASTA file (e.g. querying for the first chromosome by the identifier "chr1" or querying for 900 characters starting from character 100 (1-based) by `chr1:100-1,000`).\nTo do this, the program creates an index file that contains one entry for each sequence.\nIf the FASTA file is named `path/sequence.fasta`, the index file is usually named `path/sequence.fasta.fai`.\n\nUsing such index files, it is possible to rapidly read parts of the given sequence file.\nThe module `seqan/seq_io.h` allows to create and read such `.fai` index files and exposes an API to read parts randomly of FASTA file.\n\n{{{#!InfoBox\n'''Information:''' FASTA/FASTQ Meta Data and Sequence Ids\n\nFASTA and FASTQ files have one meta data record for each sequence.\nThis usually contains the sequence name but sometimes a lot of additional information is stored.\nThere is no consensus for the meta data.\n\nIt is common, however, to store the identifier (''id'') of the sequence at the beginning of the meta data field before the first space.\nThe id is unique to the whole file and often identifies the associate sequence uniquely in a data base (see section Sequence Identifiers on the [http://en.wikipedia.org/wiki/FASTA_format Wikipedia FASTA format] page).\n\nWhile not documented anywhere explicitely, '''only the characters up to the first space are used as the identifiers''' by widely used tools such as [http://bio-bwa.sourceforge.net/ BWA].\nOnly the identifier is carried over into files generated from the input files (BWA uses the sequence id from the genome FASTA to identify the contig/chromosome and the read id as the read name in the SAM output).\n}}}\n\n== How Does It Work? ==\n\nThere are two requirements that a FASTA file has to fulfill to work with the FAI scheme:\nFor each sequence in the FASTA file, the number of characters stored per line has to be the same and the number of bytes per line has to be the same.\nThe first restriction speaks for itself, the second restriction means that the same line ending character has to be used and no line should contain any additional spaces.\n\nThe index file then stores records of sequence identifier, length, the offset of the first sequence character in the file, the number of characters per line, and the number of bytes per line.\nWith this information, we can easily compute the byte offset of the i-th character of a sequence in a file by looking at its index record.\nWe skip to this byte offset in the file and from there, we can read the necessary sequence characters.\n\n== Building the Index ==\n\nThe class seqan:Class.FaiIndex allows for building and loading FAI indices.\nTo build such an index, we use the function seqan:Function.FaiIndex#build of the class seqan:Class.FaiIndex.\nThe first parameter is the seqan:Class.FaiIndex object, the second is the path to the FASTA file.\nThe function returns an integer indicating the result (as usual, `0` for no errors, a value different from `0` indicating an error).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nThere is an alternative variant of this function where you can pass the path to the FAI file that is to be built as third parameter.\nThe FAI file name will be stored in the seqan:Class.FaiIndex.\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = build(faiIndex, "path/to/file.fasta", "another/path/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not build the index!\n";\n}}}\n\nWe can write out the index after building it using the function seqan:Function.FaiIndex#write:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\n// ... index building here ...\n\nint res = write(faiIndex, "path/to/file.fasta.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not write the index to file!\n";\n}}}\n\n{{{#!AssignmentBox\n'''Assignment 1:''' Building a FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `build_fai` that takes one parameter from the command line:\n  A path to a FASTA file.\n  The program should then build a FAI index and write it out.\n Hints ::\n{{{#!FoldOut\n----\nUsing the two-parameter variant of seqan:Function.FaiIndex#build is good enough.\n}}}\n Solution ::\n{{{#!FoldOut\n----\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution1.cpp)]]\n}}}\n}}}\n\n== Using the Index ==\n\nTo load a FAI file, we use the function seqan:Function.FaiIndex#read:\nWe pass the seqan:Class.FaiIndex object as the first and the path to the FASTA file as the second parameter.\nThe function returns an `int` indicating success (value `0`) or failure (non-`0` value).\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta");\nif (res != 0)\n    std::cerr << "ERROR: Could not read FAI index path/to/file.fasta.fai\n";\n}}}\n\nIn the example above, the FAI file `"path/to/file.fasta.fai"` would be loaded.\nOptionally, we can specify an extra path to the FAI file:\n\n{{{#!cpp\n#include <seqan/seq_io.h>\n\nseqan::FaiIndex faiIndex;\nint res = read(faiIndex, "path/to/file.fasta", "path/to/index.fai");\nif (res != 0)\n    std::cerr << "ERROR: Could not load FAI index path/to/index.fai\n";\n}}}\n\nAfter loading the index, we can then use the index to map a sequence id to its (zero-based) position (a position ''i'' meaning that it is the ''i''-th sequence) in the FASTA file using seqan:Function.FaiIndex#getIdByName.\nThe function gets the seqan:Class.FaiIndex to use, the id of the sequence, and an `unsigned` position as parameters.\nIt returns a `bool` indicating whether the mapping was successful (`true` on success, `false` on failure).\n\n{{{#!cpp\nunsigned idx = 0;\nif (!getIdByName(faiIndex, "chr1", idx))\n    std::cerr << "ERROR: FAI index has no entry for chr1.\n";\n}}}\n\nOnce we have the index for the sequence in the FASTA file, we can then query the seqan:Class.FaiIndex for the length of the sequence using seqan:Function.FaiIndex#sequenceLength, get the whole sequence using seqan:Function.FaiIndex#readSequence, or get just a part of the sequence using seqan:Function.FaiIndex#readRegion.\n\n{{{#!cpp\nunsigned seqLength = sequenceLength(faiIndex, idx);\n\n// Load first 1000 characters of chr1.\nseqan::CharString seqChr1Prefix;\nif (readRegion(seqChr1Prefix, faiIndex, idx, 0, 1000) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n\n// Load all of chr1.\nseqan::CharString seqChr1;\nif (readSequence(seqChr1, faiIdx, idx) != 0)\n    std::cerr << "ERROR: Could not load chr1.\n";\n}}}\n\nThe sequence length can be determined by only looking at the index.\nWhen loading the sequence or a sequence infix, only the relevant part of the file will be touched.\nThus, only the minimal amount of memory, time, and disk I/O is used.\n\n{{{#!AssignmentBox\n'''Assignment 2:''' Using the FAI index\n\n Type ::\n  Application\n Objective ::\n  Write a small program `query_fai` that takes four parameters from the command line:\n  A path to a FASTA file, the id of the sequence, a begin and an end position.\n  The program should then read the given infix of the given sequence from the file and print it to stdout.\n Hint ::\n{{{#!FoldOut\n----\nUse the seqan:Function.lexicalCast2 to convert strings of numbers into integers.\n}}}\n Solution ::\n{{{#!FoldOut\n----\nThe program appears to be very long, but most is error handling, as usual with robust I/O code.\n\n[[Include(source:/trunk/extras/demos/tutorial/indexed_fasta_io/solution2.cpp)]]\n}}}\n}}}\n\n== Next Steps ==\n\n * Read the Wikipedia articles about the [http://en.wikipedia.org/wiki/FASTA_format FASTA file format] and the [http://en.wikipedia.org/wiki/FASTQ_format FASTQ file format and quality values] to refresh your knowledge.\n * Read the API documentation of the seqan:Class.GenomicRegion class for storing regions (sequence identifier, start and end position).\n   There also is functionality for parsing strings like `chr1:2,032-3,212` into seqan:Class.GenomicRegion objects.\n * Continue with the [wiki:Tutorial rest of the tutorials].\n\n== Submit a  Comment ==\n\nIf you found a mistake, or have suggestions about an improvement of this page press:\n[/newticket?component=Documentation&description=Tutorial+Enhancement+for+page+http://trac.seqan.de/wiki/Tutorial/IndexedFastaIO&type=enhancement submit your comment]	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	0	1276	683
2013-04-10T15:52:00.309+02:00	TYPING-comment-	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	175	1276	683
2013-04-10T15:52:00.404+02:00	TYPING-comment-	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	175	1276	683
2013-04-10T15:52:00.569+02:00	TYPING-comment-T	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	175	1276	683
2013-04-10T15:52:00.656+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	175	1276	683
2013-04-10T15:52:00.717+02:00	TYPING-comment-Ty	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	175	1276	683
2013-04-10T15:52:00.845+02:00	TYPING-comment-Typ	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	175	1276	683
2013-04-10T15:52:01.373+02:00	TYPING-comment-Typo	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO?action=edit	160.45.44.126	-	0	175	1276	683
2013-04-10T15:52:03.115+02:00	READY	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	476	1276	683
2013-04-10T15:52:11.266+02:00	READY	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	0	1276	683
2013-04-10T15:52:13.984+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	1064	1276	683
2013-04-10T15:52:21.021+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2125	1276	683
2013-04-10T15:52:50.248+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2186	1276	683
2013-04-10T15:53:02.171+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2240	1276	683
2013-04-10T15:53:29.418+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2251	1276	683
2013-04-10T15:53:43.610+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2171	1276	683
2013-04-10T15:53:49.603+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2215	1276	683
2013-04-10T15:53:50.532+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2215	1276	683
2013-04-10T15:53:59.310+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2370	1276	683
2013-04-10T15:54:08.248+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2553	1276	683
2013-04-10T15:54:13.684+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2714	1276	683
2013-04-10T15:54:14.417+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2714	1276	683
2013-04-10T15:54:14.418+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2714	1276	683
2013-04-10T16:00:58.320+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2714	1276	683
2013-04-10T16:01:25.373+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2714	1276	683
2013-04-10T16:01:25.374+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2714	1276	683
2013-04-10T16:12:20.772+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2714	1276	683
2013-04-10T16:12:20.938+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	160.45.44.126	-	0	2714	1276	683
2013-04-10T17:24:38.164+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T17:24:39.370+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T17:24:42.043+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T17:24:43.456+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-10T17:57:16.083+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION_Sequence_Stream_23read_Record.html	87.77.216.245	-	0	0	1276	683
2013-04-10T17:57:16.250+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/IndexedFastaIO	87.77.216.245	-	0	2714	1276	683
2013-04-10T17:57:16.398+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	87.77.216.245	-	0	1536	1276	683
2013-04-10T17:57:16.560+02:00	FOCUS	http://docs.seqan.de/seqan/dev/MEMFUNC_Unbanded+_Local_Alignment_Enumerator_23_Local_Alignment_Enumerator.html	87.77.216.245	-	0	15	1276	683
2013-04-11T09:36:02.869+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-04-11T09:36:05.906+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1276	683
2013-04-11T09:36:10.424+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	0	1276	683
2013-04-11T09:36:13.106+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	133	1276	683
2013-04-11T09:36:27.635+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	253	1276	683
2013-04-11T09:36:30.649+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	293	1276	683
2013-04-11T09:36:36.972+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	500	1276	683
2013-04-11T09:36:39.067+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	500	1276	683
2013-04-11T09:36:46.760+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	500	1276	683
2013-04-11T09:36:55.377+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	410	1276	683
2013-04-11T09:36:58.073+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	421	1276	683
2013-04-11T09:37:02.791+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	659	1276	683
2013-04-11T09:37:06.769+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	678	1276	683
2013-04-11T09:37:21.648+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	717	1276	683
2013-04-11T09:37:33.678+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1014	1276	683
2013-04-11T09:37:38.781+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Indices#	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1087	1276	683
2013-04-11T09:37:44.393+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1861	1276	683
2013-04-11T09:38:01.970+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1861	1276	683
2013-04-11T09:38:01.972+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1861	1276	683
2013-04-11T09:38:59.012+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1861	1276	683
2013-04-11T09:38:59.694+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1861	1276	683
2013-04-11T09:38:59.693+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1861	1276	683
2013-04-11T09:39:15.244+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1861	1276	683
2013-04-11T09:39:32.218+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1861	1276	683
2013-04-11T09:39:32.217+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1861	1276	683
2013-04-11T09:39:36.947+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1861	1276	683
2013-04-11T09:39:39.944+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1894	1276	683
2013-04-11T09:39:44.853+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1889	1276	683
2013-04-11T09:39:52.422+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1910	1276	683
2013-04-11T09:39:56.214+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1998	1276	683
2013-04-11T09:40:05.143+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2367	1276	683
2013-04-11T09:40:16.223+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2618	1276	683
2013-04-11T09:40:21.983+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2814	1276	683
2013-04-11T09:40:32.732+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2814	1276	683
2013-04-11T09:40:32.733+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2814	1276	683
2013-04-11T09:42:09.335+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2814	1276	683
2013-04-11T09:42:13.132+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2734	1276	683
2013-04-11T09:42:13.133+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2734	1276	683
2013-04-11T09:42:14.287+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2734	1276	683
2013-04-11T09:42:36.062+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2734	1276	683
2013-04-11T09:42:48.124+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2734	1276	683
2013-04-11T09:42:48.126+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2734	1276	683
2013-04-11T09:43:18.647+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2734	1276	683
2013-04-11T09:43:23.506+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2507	1276	683
2013-04-11T09:43:25.194+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2507	1276	683
2013-04-11T09:43:27.332+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2507	1276	683
2013-04-11T09:43:30.306+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	3380	1276	683
2013-04-11T09:43:30.956+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2515	1276	683
2013-04-11T09:43:31.052+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2515	1276	683
2013-04-11T09:43:32.132+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	2515	1276	683
2013-04-11T09:43:35.729+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	3357	1276	683
2013-04-11T09:43:40.273+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	-15	1276	683
2013-04-11T09:43:42.020+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	537	1276	683
2013-04-11T09:43:42.712+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	537	1276	683
2013-04-11T09:43:42.711+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	537	1276	683
2013-04-11T09:43:44.799+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	919	1276	683
2013-04-11T09:43:49.803+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	0	1276	683
2013-04-11T09:43:52.180+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	132	1276	683
2013-04-11T09:44:05.162+02:00	READY	http://trac.seqan.de/wiki/HowTo/AccessIndexFibres	160.45.111.85	-	0	0	1276	683
2013-04-11T09:44:07.007+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	132	1276	683
2013-04-11T09:44:10.367+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	184	1276	683
2013-04-11T09:44:23.061+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	339	1276	683
2013-04-11T09:44:32.463+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	462	1276	683
2013-04-11T09:44:54.112+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	406	1276	683
2013-04-11T09:46:53.423+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	0	1276	683
2013-04-11T09:46:53.815+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	0	1276	683
2013-04-11T09:46:55.893+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	0	1276	683
2013-04-11T09:46:59.575+02:00	READY	https://trac.seqan.de/	160.45.111.85	-	0	0	1276	658
2013-04-11T09:46:59.632+02:00	BLUR	https://trac.seqan.de/	160.45.111.85	-	0	0	1276	647
2013-04-11T09:47:00.524+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:03.777+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram?action=edit	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:04.784+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram?action=edit	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:07.370+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram?action=edit	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:07.821+02:00	TYPING-text-= Tutorial q-gram Index =\n\n[[TOC]]\n\n Learning Objective ::\n You will know the features of the q-gram Index, how it can be used for searching and how to access the different fibres.\n Difficulty ::\n  Average\n Duration ::\n  1h\n Prerequisites ::\n  [wiki:Tutorial/Sequences], [wiki:Tutorial/Iterators]\n\n== The q-gram Index ==\nA q-gram index can be used to efficiently retrieve all occurrences of a certain q-gram in the text.\nIt consists of various tables, called fibres (see [wiki:HowTo/AccessIndexFibres HowTo]), to retrieve q-gram positions, q-gram counts, etc.\nHowever, it has no support for suffix tree iterators.\nA q-gram index must be specialized with a seqan:Class.Shape type.\nA seqan:Class.Shape defines q, the number of characters in a q-gram and possibly gaps between these characters.\nThere are different specializations of seqan:Class.Shape available:\n\n|| '''Specialization''' || '''Modifiable*''' || '''Number of Gaps''' ||\n|| seqan:Spec.UngappedShape || - || 0 ||\n|| seqan:Spec.SimpleShape || + || 0 ||\n|| seqan:Spec.OneGappedShape || + || 0/1 ||\n|| seqan:Spec.GappedShape || - || any ||\n|| seqan:Spec.GenericShape || + || any ||\n\n* - ''fixed at compile time'', + ''can be changed at runtime''\n\nEach shape evaluates a gapped or ungapped sequence of q characters to a hash value by the Functions seqan:Function.hash, seqan:Function.hashNext, etc.\nFor example, the shape 1101 represents a 3-gram with one gap of length 1.\nThis shape overlayed with the seqan:Spec.Dna text "GATTACA" at the third position corresponds to "TT-C".\nThe function seqan:Function.hash converts this 3-gram into 61=(('''3'''*4+'''3''')*4+'''1'''. 4 is the alphabet size in this example (see seqan:Metafunction.ValueSize).\n\nThe q-gram index offers different function to search or count occurrences of q-grams in an indexed text, see seqan:Function.getOccurrences, seqan:Function.countOccurrences.\nA q-gram index over a seqan:Class.StringSet stores occurrence positions in the same way as the ESA index and in the same fibre (FibreSA).\nIf only the number of q-grams per sequence are needed the QGramCounts and QGramCountsDir fibres can be used.\nThey store pairs `(seqNo, count)`, `count`>0, for each q-gram that occurs `counts` times in sequence number `seqNo`.\n\nTo efficiently retrieve all occurrence positions or all pairs `(seqNo, count)` for a given q-gram, these positions or pairs are stored in contiguous blocks (in QGramSA, QGramCounts fibres), called buckets.\nThe begin position of bucket i is stored in directory fibres (QGramDir, QGramCountsDir) at position i, the end position is the begin positions of the bucket i+1.\nThe default implementation of the seqan:Spec.IndexQGram index maps q-gram hash values 1-to-1 to bucket numbers.\nFor large q or large alphabets the seqan:Spec.OpenAddressing index can be more appropriate as its directories are additionally bound by the text length.\nThis is realized by a non-trivial mapping from q-gram hashes to bucket numbers that requires an additional fibre (QGramBucketMap).\n\nFor more details on q-gram index fibres see the [wiki:HowTo/AccessIndexFibres HowTo] or seqan:"Tag.QGram Index Fibres".\n\n== Example ==\nWe want to construct the q-gram index of the string "CATGATTACATA" and output the occurrences of the ungapped 3-gram "CAT".\nAs 3 is fixed at compile-time and the shape has no gaps we can use a seqan:Spec.UngappedShape which is the first template argument of seqan:Spec.IndexQGram, the second template argument of seqan:Class.Index.\nNext we create the string "CATGATTACATA" and specialize the first index template argument with the type of this string. The string can be given to the index constructor.\n[[Include(source:trunk/core/demos/tutorial/index/index_qgram.cpp, fragment=initialization)]]\n\nTo get all occurrences of a q-gram, we first have to hash it with a shape of the same type as the index shape (we can even use the index shape returned by seqan:Function.indexShape).\nThe hash value returned by seqan:Function.hash or seqan:Function.hashNext is also stored in the shape and is used by the function seqan:Function.getOccurrences to retrieve all occurrences of our 3-gram.\n[[Include(source:trunk/core/demos/tutorial/index/index_qgram.cpp, fragment=output)]]\n\nProgram output:\n{{{\n#!html\n<pre class="wiki" style="background-color:black;color:lightgray">\n0\n8\n</pre>\n}}}\n\n=== Assignment 1 ===\n{{{#!AssignmentBox\n Type ::\n Review\n Objective ::  \n Write a program that outputs all occurrences of the gapped q-gram "AT-A" in "CATGATTACATA".\n Solution :: \n Click [wiki:Tutorial/Indices/Assignment5 more]\n}}}\n\n=== Assignment 2 ===\n{{{#!AssignmentBox\n  Type ::\n Review\n Objective :: \n Create and output a matrix M where M(i,j) is the number of common ungapped 5-grams between sequence i and sequence j for 3 random seqan:Spec.Dna sequences, each not longer than 200 characters. Optional: Run the matrix calculation twice, once for an seqan:Spec.IndexQGram and once for an seqan:Spec.OpenAddressing index and output the directory sizes (QGram_Dir, QGram_CountsDir fibre).[[br]]\n Hint :: A common g-gram that occurs a times in one and b times in the other sequence counts for min(a,b).\n Solution ::  \n Click [wiki:Tutorial/Indices/Assignment6 more]\n}}}	http://trac.seqan.de/wiki/Tutorial/IndexQGram?action=edit	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:08.779+02:00	TYPING-comment-	http://trac.seqan.de/wiki/Tutorial/IndexQGram?action=edit	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:09.004+02:00	TYPING-comment-	http://trac.seqan.de/wiki/Tutorial/IndexQGram?action=edit	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:09.171+02:00	TYPING-comment-T	http://trac.seqan.de/wiki/Tutorial/IndexQGram?action=edit	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:09.299+02:00	TYPING-comment-Ty	http://trac.seqan.de/wiki/Tutorial/IndexQGram?action=edit	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:09.420+02:00	TYPING-comment-Typ	http://trac.seqan.de/wiki/Tutorial/IndexQGram?action=edit	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:23.517+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:23.937+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	0	1276	683
2013-04-11T09:47:25.194+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	512	1276	683
2013-04-11T09:47:26.429+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	512	1276	683
2013-04-11T09:47:29.399+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	557	1276	683
2013-04-11T09:47:33.359+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	600	1276	683
2013-04-11T09:47:44.203+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	1064	1276	683
2013-04-11T09:48:52.620+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	1136	1276	683
2013-04-11T09:49:02.562+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	1140	1276	683
2013-04-11T09:49:39.852+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	160.45.111.85	-	0	1200	1276	683
2013-04-11T09:49:48.191+02:00	READY	https://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1276	683
2013-04-11T09:49:52.917+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1118	1276	683
2013-04-11T09:49:56.478+02:00	READY	https://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	0	1276	683
2013-04-11T09:50:01.449+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	657	1276	683
2013-04-11T09:50:14.878+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	1979	1276	683
2013-04-11T09:50:27.119+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	2219	1276	683
2013-04-11T09:50:33.949+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	2189	1276	683
2013-04-11T09:50:37.740+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	0	1276	683
2013-04-11T09:50:37.739+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	0	1276	683
2013-04-11T09:50:39.022+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	0	1276	683
2013-04-11T10:03:14.327+02:00	READY	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	0	1276	683
2013-04-11T10:03:15.129+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	0	1276	683
2013-04-11T10:03:15.718+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	0	1276	683
2013-04-11T10:03:18.676+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1206	1276	683
2013-04-11T10:03:19.305+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1206	1276	683
2013-04-11T10:03:21.931+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:03:22.063+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:03:23.980+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:03:23.982+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:03:30.529+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:03:54.369+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:03:54.371+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:04:07.288+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:04:08.347+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:04:08.349+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:04:11.393+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:04:17.597+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:04:18.342+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:04:18.720+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:04:18.718+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:05:16.460+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:05:20.455+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:05:20.456+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:06:05.573+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:06:07.213+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:06:07.219+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:12:23.032+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1766	1276	683
2013-04-11T10:12:26.991+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	2120	1276	683
2013-04-11T10:12:29.025+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	2120	1276	683
2013-04-11T10:12:29.026+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	2120	1276	683
2013-04-11T10:12:29.835+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	2120	1276	683
2013-04-11T10:12:59.409+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	2221	1276	683
2013-04-11T10:13:34.299+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	2413	1276	683
2013-04-11T10:18:08.624+02:00	READY	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1153	1276	683
2013-04-11T10:18:12.499+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1218	1276	683
2013-04-11T10:18:15.414+02:00	READY	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1276	683
2013-04-11T10:18:18.637+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	191	1276	683
2013-04-11T10:18:22.054+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	359	1276	683
2013-04-11T10:18:25.450+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	476	1276	683
2013-04-11T10:18:31.663+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	582	1276	683
2013-04-11T10:18:42.388+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	649	1276	683
2013-04-11T10:18:47.738+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	635	1276	683
2013-04-11T10:18:56.975+02:00	READY	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1403	1276	683
2013-04-11T10:18:57.638+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1276	683
2013-04-11T10:18:59.293+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1276	683
2013-04-11T10:18:59.299+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1403	1276	683
2013-04-11T10:18:59.297+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1403	1276	683
2013-04-11T10:19:10.445+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1248	1276	683
2013-04-11T10:19:57.162+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1395	1276	683
2013-04-11T10:20:17.008+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1604	1276	683
2013-04-11T10:20:17.960+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1604	1276	683
2013-04-11T10:20:17.961+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1604	1276	683
2013-04-11T10:38:24.839+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1604	1276	683
2013-04-11T10:39:32.059+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	718	1276	683
2013-04-11T10:40:08.252+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	718	1276	683
2013-04-11T10:40:08.251+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	718	1276	683
2013-04-11T10:43:44.365+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	718	1276	683
2013-04-11T10:43:51.932+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1348	1276	683
2013-04-11T10:43:55.000+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1348	1276	683
2013-04-11T10:43:55.002+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1348	1276	683
2013-04-11T10:44:06.437+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1348	1276	683
2013-04-11T10:44:11.134+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1223	1276	683
2013-04-11T10:44:13.661+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1276	683
2013-04-11T10:44:15.247+02:00	READY	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1276	683
2013-04-11T10:44:15.376+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1276	683
2013-04-11T10:44:17.663+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	967	1276	683
2013-04-11T10:44:22.611+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	752	1276	683
2013-04-11T10:44:31.715+02:00	READY	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1276	683
2013-04-11T10:44:35.871+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	904	1276	683
2013-04-11T10:44:48.791+02:00	RESIZE	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	904	1264	683
2013-04-11T10:44:55.812+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	904	1264	683
2013-04-11T10:44:55.813+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	904	1264	683
2013-04-11T10:45:36.636+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	904	1264	683
2013-04-11T10:45:44.087+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	1456	1264	683
2013-04-11T10:45:48.712+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	1533	1264	683
2013-04-11T10:45:56.940+02:00	READY	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T10:45:58.914+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T10:45:58.911+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T10:47:11.192+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T10:47:12.339+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T10:47:45.806+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T10:47:46.744+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T10:47:46.745+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T10:48:26.327+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T10:48:27.428+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T10:48:27.439+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1264	683
2013-04-11T10:48:27.578+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1264	683
2013-04-11T10:48:28.950+02:00	RESIZE	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1264	683
2013-04-11T11:33:10.905+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T11:33:13.677+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T11:33:13.679+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T11:37:39.350+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1019	1264	683
2013-04-11T11:37:43.249+02:00	SCROLL	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1060	1264	683
2013-04-11T11:42:35.008+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1060	1264	683
2013-04-11T11:49:07.606+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1060	1264	683
2013-04-11T11:49:07.895+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1060	1264	683
2013-04-11T11:49:07.897+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1264	683
2013-04-11T11:49:09.271+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1264	683
2013-04-11T11:49:11.943+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1264	683
2013-04-11T11:49:16.075+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1264	683
2013-04-11T11:49:20.029+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	971	1264	683
2013-04-11T11:49:21.121+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexQGram	87.77.216.245	-	0	0	1264	683
2013-04-11T11:49:22.750+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexQGram	87.77.216.245	-	0	1211	1264	683
2013-04-11T11:49:27.343+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexQGram	87.77.216.245	-	0	1380	1264	683
2013-04-11T11:49:28.095+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexQGram	87.77.216.245	-	0	1380	1264	683
2013-04-11T11:49:28.570+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	87.77.216.245	-	0	0	1264	683
2013-04-11T11:49:31.569+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	87.77.216.245	-	0	262	1264	683
2013-04-11T11:49:41.557+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	87.77.216.245	-	0	318	1264	683
2013-04-11T11:49:45.202+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices/Assignment5	87.77.216.245	-	0	333	1264	683
2013-04-11T12:58:17.674+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1264	683
2013-04-11T12:58:18.229+02:00	UNLOAD	https://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	0	1264	683
2013-04-11T12:58:18.237+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1060	1264	683
2013-04-11T12:58:19.737+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1060	1264	683
2013-04-11T12:58:19.744+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1060	1264	683
2013-04-11T12:58:59.794+02:00	FOCUS	https://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1060	1264	683
2013-04-11T12:58:59.951+02:00	BLUR	https://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1060	1264	683
2013-04-11T14:11:06.262+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1264	683
2013-04-11T14:11:07.876+02:00	READY	http://trac.seqan.de/wiki/Tutorial/GettingStarted	87.77.216.245	-	0	0	1264	683
2013-04-11T14:11:08.521+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1264	683
2013-04-11T14:11:09.412+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1264	683
2013-04-11T14:11:09.543+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1264	683
2013-04-11T14:11:11.923+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1085	1264	683
2013-04-11T14:11:12.013+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1085	1264	683
2013-04-11T14:11:12.689+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	0	1264	683
2013-04-11T14:11:13.223+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	0	1264	683
2013-04-11T14:11:16.380+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	1599	1264	683
2013-04-11T14:11:22.821+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T14:11:36.780+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T14:11:37.964+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T14:11:40.174+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	963	683
2013-04-11T14:11:40.224+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:40.474+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:40.476+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:42.113+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	0	963	683
2013-04-11T14:11:44.956+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	32	963	683
2013-04-11T14:11:45.465+02:00	TYPING-search-beginPosition	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:45.537+02:00	TYPING-search-beginPosition	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:45.543+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:46.103+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:46.105+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:11:46.682+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:46.825+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:11:46.827+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:46.883+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:11:46.884+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:47.186+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:11:47.188+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:11:47.357+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:11:47.864+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:11:48.470+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:11:48.482+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T14:13:17.687+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T14:13:17.691+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:13:21.556+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T14:13:21.554+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:13:26.053+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T14:13:26.055+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:13:27.357+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.begin_Position.html	87.77.216.245	-	0	71	963	683
2013-04-11T14:13:27.358+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:13:28.169+02:00	TYPING-search-beginPosition	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:13:28.194+02:00	TYPING-search-beginPosition	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:13:28.689+02:00	TYPING-search-findBegin	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:13:28.943+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.find_Begin.html	87.77.216.245	-	0	0	963	683
2013-04-11T14:13:31.845+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.find_Begin.html	87.77.216.245	-	0	118	963	683
2013-04-11T14:15:26.054+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.find_Begin.html	87.77.216.245	-	0	115	963	683
2013-04-11T14:15:59.746+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T14:57:08.409+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1264	683
2013-04-11T14:57:09.701+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1264	683
2013-04-11T14:57:09.719+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1264	683
2013-04-11T14:57:11.436+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1085	1264	683
2013-04-11T14:57:12.396+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	0	1264	683
2013-04-11T14:57:16.927+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	0	1264	683
2013-04-11T14:57:20.232+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	160	1264	683
2013-04-11T14:57:26.402+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T14:57:42.332+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T14:57:44.304+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T14:57:44.305+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T14:59:58.819+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T15:00:04.092+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T15:00:04.094+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T15:00:12.635+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T15:00:17.033+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T15:00:17.034+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T15:00:31.755+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	158	1264	683
2013-04-11T15:00:33.814+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	4063	1264	683
2013-04-11T15:00:41.098+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	1589	1264	683
2013-04-11T15:00:44.000+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	1589	1264	683
2013-04-11T15:00:44.001+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	1589	1264	683
2013-04-11T15:01:17.755+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	1589	1264	683
2013-04-11T15:01:18.999+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	1200	1264	683
2013-04-11T15:01:20.334+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	3727	1264	683
2013-04-11T15:01:25.503+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	3946	1264	683
2013-04-11T15:01:33.865+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	1921	1264	683
2013-04-11T15:01:37.626+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1085	1264	683
2013-04-11T15:01:37.872+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1085	1264	683
2013-04-11T15:01:41.032+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1024	1264	683
2013-04-11T15:01:41.637+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	0	1264	683
2013-04-11T15:01:42.955+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	1413	1264	683
2013-04-11T15:01:45.387+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	981	1264	683
2013-04-11T15:01:45.538+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	981	1264	683
2013-04-11T15:01:47.804+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	981	1264	683
2013-04-11T15:01:47.803+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	981	1264	683
2013-04-11T15:02:20.207+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	981	1264	683
2013-04-11T15:02:27.985+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices	87.77.216.245	-	0	0	1264	683
2013-04-11T15:02:28.884+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1085	1264	683
2013-04-11T15:02:31.105+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	0	1264	683
2013-04-11T15:02:35.068+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	3329	1264	683
2013-04-11T15:02:39.801+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	0	1264	683
2013-04-11T15:02:42.743+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	193	1264	683
2013-04-11T15:02:45.155+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	193	1264	683
2013-04-11T15:02:45.156+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	193	1264	683
2013-04-11T15:02:46.714+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	193	1264	683
2013-04-11T15:03:37.113+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	0	1264	683
2013-04-11T15:03:39.546+02:00	READY	https://trac.seqan.de/	87.77.216.245	-	0	0	1264	683
2013-04-11T15:03:42.618+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	87.77.216.245	-	0	0	1264	683
2013-04-11T15:03:46.180+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T15:04:09.701+02:00	TYPING-text-= Assignment 3 =\n\n== Task ==\n\nModify the example above to search with an seqan:Spec.OpenAddressing q-gram index for matches of "tobe" in "tobeornottobe".\n\n== Solution ==\n\nWe simply add a second template argument to the definition of the seqan:Class.Index as described in the documentation of the seqan:Spec.OpenAddressing index.\nAs shape we can use an seqan:Spec.UngappedShape of length 4.\n[[Include(source:trunk/core/demos/tutorial/find/find_assignment3.cpp, fragment=initialization)]]\nThe rest of the program remains unchanged.\n[[Include(source:trunk/core/demos/tutorial/find/find_assignment3.cpp, fragment=output)]]\n\nProgram output:\n{{{\n#!html\n<pre class="wiki" style="background-color:black;color:lightgray">\n[0,4)\ttobe\n[9,13)\ttobe\n</pre>\n}}}	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T15:04:09.759+02:00	TYPING-text-= Assignment 3 =\n\n== Task ==\n\nModify the example above to search with an seqan:Spec.OpenAddressing q-gram index for matches of "tobe" in "tobeornottobe".\n\n== Solution ==\n\nWe simply add a second template argument to the definition of the seqan:Class.Index as described in the documentation of the seqan:Spec.OpenAddressing index.\nAs shape we can use an seqan:Spec.UngappedShape of length 4.\n[[Include(source:trunk/core/demos/tutorial/find/find_assignment3.cpp, fragment=initialization)]]\nThe rest of the program remains unchanged.\n[[Include(source:trunk/core/demos/tutorial/find/find_assignment3.cpp, fragment=output)]]\n\nProgram output:\n{{{\n#!html\n<pre class="wiki" style="background-color:black;color:lightgray">\n[0,4)\ttobe\n[9,13)\ttobe\n</pre>\n}}}	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T15:04:10.535+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T15:04:10.537+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T15:10:40.103+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T15:10:40.250+02:00	TYPING-text-= Assignment 3 =\n\n== Task ==\n\nModify the example above to search with an seqan:Spec.OpenAddressing q-gram index for matches of "tobe" in "tobeornottobe".\n\n== Solution ==\n\nWe simply add a second template argument to the definition of the seqan:Class.Index as described in the documentation of the seqan:Spec.OpenAddressing index.\nAs shape we can use an seqan:Spec.UngappedShape of length 4.\n[[Include(source:trunk/core/demos/tutorial/find/find_assignment3.cpp, fragment=initialization)]]\nThe rest of the program remains unchanged.\n[[Include(source:trunk/core/demos/tutorial/find/find_assignment3.cpp, fragment=output)]]\n\nProgram output:\n{{{\n#!html\n<pre class="wiki" style="background-color:black;color:lightgray">\n[0,4)\ttobe\n[9,13)\ttobe\n</pre>\n}}}	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T15:10:40.379+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:07.090+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:08.518+02:00	READY	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:09.783+02:00	TYPING-proj-search-	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:09.823+02:00	TYPING-proj-search-d	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:10.078+02:00	TYPING-proj-search-di	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:10.207+02:00	TYPING-proj-search-d	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:10.334+02:00	TYPING-proj-search-	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:10.558+02:00	TYPING-proj-search-	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:10.646+02:00	TYPING-proj-search-f	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:10.686+02:00	TYPING-proj-search-fi	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:11.126+02:00	TYPING-proj-search-fin	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:11.230+02:00	TYPING-proj-search-find	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:11.359+02:00	TYPING-proj-search-find	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:11.646+02:00	TYPING-proj-search-find_	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:11.710+02:00	TYPING-proj-search-find_i	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:11.774+02:00	TYPING-proj-search-find_in	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:11.909+02:00	TYPING-proj-search-find_ind	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:12.094+02:00	TYPING-proj-search-find_inde	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:12.198+02:00	TYPING-proj-search-find_index	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:12.262+02:00	TYPING-proj-search-find_index	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:12.430+02:00	TYPING-proj-search-find_index_	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:12.942+02:00	TYPING-proj-search-find_index_q	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:13.078+02:00	TYPING-proj-search-find_index_qg	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:13.109+02:00	TYPING-proj-search-find_index_qgr	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:13.166+02:00	TYPING-proj-search-find_index_qgra	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:13.238+02:00	TYPING-proj-search-find_index_qgram	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:14.282+02:00	READY	http://trac.seqan.de/search?q=find_index_qgram	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:18.791+02:00	READY	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:19.080+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:20.048+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:20.207+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:20.238+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:20.287+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:20.359+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:20.558+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:20.717+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:21.062+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:21.287+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:21.494+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:21.583+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:21.609+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:22.110+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:22.255+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:22.406+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:22.487+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:22.727+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:22.991+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:23.039+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:23.095+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:22.863+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:23.174+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:23.882+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/SpecializeSeqanClasses	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:24.635+02:00	READY	http://trac.seqan.de/search?q=find_index_qgram	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:27.565+02:00	READY	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:28.017+02:00	BLUR	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:17:28.019+02:00	BLUR	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:32.146+02:00	FOCUS	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:32.653+02:00	BLUR	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:32.656+02:00	BLUR	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:37.924+02:00	FOCUS	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:38.357+02:00	BLUR	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:39.074+02:00	FOCUS	http://trac.seqan.de/browser	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:43.271+02:00	READY	http://trac.seqan.de/browser/trunk	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:48.842+02:00	READY	http://trac.seqan.de/changeset/13897	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:49.788+02:00	READY	http://trac.seqan.de/browser/trunk	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:53.411+02:00	READY	http://trac.seqan.de/log/trunk	87.77.216.245	-	0	0	1264	683
2013-04-11T15:20:53.821+02:00	FOCUS	http://trac.seqan.de/log/trunk	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:00.974+02:00	SCROLL	http://trac.seqan.de/log/trunk	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:01.099+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:01.257+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:03.249+02:00	READY	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:06.546+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:06.681+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:06.833+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:07.040+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:07.185+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:07.337+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:07.489+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:07.649+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:08.216+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:21:20.310+02:00	SCROLL	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:21:21.504+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:21:21.787+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:21:21.788+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:21:30.625+02:00	FOCUS	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:21:31.817+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:21:31.933+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:21:31.934+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:22:05.421+02:00	FOCUS	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:22:06.307+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:22:06.429+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:22:06.430+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:22:59.868+02:00	FOCUS	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	1900	1264	683
2013-04-11T15:23:04.536+02:00	TYPING-limit-100	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:04.763+02:00	TYPING-limit-	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:04.889+02:00	SCROLL	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:04.895+02:00	TYPING-limit-	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:05.424+02:00	TYPING-limit-1	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:05.807+02:00	TYPING-limit-10	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:05.944+02:00	TYPING-limit-1	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:06.088+02:00	TYPING-limit-	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:06.456+02:00	TYPING-limit-	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:06.576+02:00	TYPING-limit-9	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:06.687+02:00	TYPING-limit-99	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:07.096+02:00	TYPING-limit-999	http://trac.seqan.de/log/trunk?limit=100&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T15:23:24.379+02:00	READY	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T16:00:58.016+02:00	FOCUS	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T16:00:58.191+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T16:12:02.987+02:00	FOCUS	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T16:12:03.306+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T16:12:03.308+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T16:12:03.644+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T16:12:04.409+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T16:12:04.952+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T16:12:05.586+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T16:12:05.920+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T16:12:05.927+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T16:12:06.384+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T16:24:04.699+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T16:24:05.352+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T16:37:27.324+02:00	FOCUS	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T16:37:27.817+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T16:37:27.820+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T16:37:31.766+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T16:37:32.549+02:00	TYPING-text-= Assignment 3 =\n\n== Task ==\n\nModify the example above to search with an seqan:Spec.OpenAddressing q-gram index for matches of "tobe" in "tobeornottobe".\n\n== Solution ==\n\nWe simply add a second template argument to the definition of the seqan:Class.Index as described in the documentation of the seqan:Spec.OpenAddressing index.\nAs shape we can use an seqan:Spec.UngappedShape of length 4.\n[[Include(source:trunk/core/demos/tutorial/find/find_assignment3.cpp, fragment=initialization)]]\nThe rest of the program remains unchanged.\n[[Include(source:trunk/core/demos/tutorial/find/find_assignment3.cpp, fragment=output)]]\n\nProgram output:\n{{{\n#!html\n<pre class="wiki" style="background-color:black;color:lightgray">\n[0,4)\ttobe\n[9,13)\ttobe\n</pre>\n}}}	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3?action=edit	87.77.216.245	-	0	0	1264	683
2013-04-11T16:37:32.780+02:00	FOCUS	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T16:37:33.989+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-11T17:34:49.758+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T17:34:50.378+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T17:34:50.381+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T17:34:50.620+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-11T17:34:50.622+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-11T17:34:50.737+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-12T09:05:50.935+02:00	FOCUS	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-12T09:05:51.089+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-12T09:05:51.880+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-12T09:05:52.166+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-12T09:07:10.565+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1264	683
2013-04-12T09:07:12.557+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1264	683
2013-04-12T09:07:15.955+02:00	READY	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	31	1264	683
2013-04-12T09:07:19.788+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	2196	1264	683
2013-04-12T09:07:26.996+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	2183	1264	683
2013-04-12T09:07:50.654+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	3144	1264	683
2013-04-12T09:07:57.143+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:07:57.144+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:07:57.725+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:07:58.098+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:07:58.126+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:07:58.124+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:08:04.095+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:08:06.200+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:08:11.962+02:00	FOCUS	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-12T09:08:13.001+02:00	BLUR	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-12T09:08:14.427+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-12T09:08:14.608+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-12T09:09:16.957+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:09:17.640+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:09:17.642+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:09:24.203+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:09:24.679+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:09:25.447+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:09:25.589+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:10:25.475+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1264	683
2013-04-12T09:10:27.046+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1264	683
2013-04-12T09:10:27.062+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1264	683
2013-04-12T09:10:31.340+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	0	1264	683
2013-04-12T09:10:34.663+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	123	1264	683
2013-04-12T09:10:42.596+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1661	1264	683
2013-04-12T09:10:48.043+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1346	1264	683
2013-04-12T09:11:07.063+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1360	1264	683
2013-04-12T09:11:16.603+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1375	1264	683
2013-04-12T09:11:41.088+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1447	1264	683
2013-04-12T09:11:51.058+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1974	1264	683
2013-04-12T09:12:47.113+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2050	1264	683
2013-04-12T09:12:50.601+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2438	1264	683
2013-04-12T09:13:07.086+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3314	1264	683
2013-04-12T09:13:42.131+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3719	1264	683
2013-04-12T09:13:49.000+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3925	1264	683
2013-04-12T09:13:57.068+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3935	1264	683
2013-04-12T09:14:12.622+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	4015	1264	683
2013-04-12T09:14:19.541+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	5201	1264	683
2013-04-12T09:14:20.639+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	5201	1264	683
2013-04-12T09:19:01.899+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-12T09:19:02.080+02:00	UNLOAD	http://trac.seqan.de/wiki/Tutorial/PatternMatching	87.77.216.245	-	0	2036	1264	683
2013-04-12T09:19:05.235+02:00	UNLOAD	http://trac.seqan.de/wiki/Tutorial/IndexIterators	87.77.216.245	-	0	6341	1264	683
2013-04-12T09:19:05.244+02:00	UNLOAD	http://trac.seqan.de/log/trunk?limit=999&rev=13897&action=stop_on_copy&mode=stop_on_copy	87.77.216.245	-	0	0	1264	683
2013-04-12T09:19:05.235+02:00	UNLOAD	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	5201	1264	683
2013-04-12T09:37:21.837+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1136	683
2013-04-12T09:37:22.686+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1136	683
2013-04-12T09:37:22.684+02:00	FOCUS	http://trac.seqan.de/	87.77.216.245	-	0	0	1136	683
2013-04-12T09:37:26.689+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1136	683
2013-04-12T09:37:38.270+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	560	1136	683
2013-04-12T09:37:45.479+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2030	1136	683
2013-04-12T09:38:15.332+02:00	LINK-http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2030	1136	683
2013-04-12T09:38:15.952+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	0	1136	683
2013-04-12T09:38:15.991+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function_Graph.html#addEdges	87.77.216.245	-	0	0	180	683
2013-04-12T09:38:17.068+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	0	1136	683
2013-04-12T09:38:17.064+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2030	1136	683
2013-04-12T09:38:17.070+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	0	1136	683
2013-04-12T09:38:27.470+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1136	683
2013-04-12T09:38:28.294+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1136	683
2013-04-12T09:38:28.296+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2030	1136	683
2013-04-12T09:38:30.684+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2030	1136	683
2013-04-12T09:38:32.255+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2030	1136	683
2013-04-12T09:38:53.453+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2030	1136	683
2013-04-12T09:39:22.238+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	292	1136	683
2013-04-12T09:39:41.791+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	326	1136	683
2013-04-12T09:39:45.177+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	382	1136	683
2013-04-12T09:39:49.245+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	436	1136	683
2013-04-12T09:39:52.566+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	0	1136	683
2013-04-12T09:39:54.620+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2030	1136	683
2013-04-12T09:40:06.985+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	436	1136	683
2013-04-12T09:40:06.990+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1136	683
2013-04-12T09:40:14.246+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1136	683
2013-04-12T09:40:14.249+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2030	1136	683
2013-04-12T09:40:21.652+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1771	1136	683
2013-04-12T09:40:21.654+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1136	683
2013-04-12T09:40:22.407+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1771	1136	683
2013-04-12T09:40:39.231+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	436	1136	683
2013-04-12T09:40:39.228+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1136	683
2013-04-12T09:40:44.042+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	557	1136	683
2013-04-12T09:40:46.297+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	514	1136	683
2013-04-12T09:40:52.178+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	508	1136	683
2013-04-12T09:41:01.518+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	508	1136	683
2013-04-12T09:41:01.520+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	508	1136	683
2013-04-12T09:41:24.740+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	508	1136	683
2013-04-12T09:41:26.308+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	508	1136	683
2013-04-12T09:41:26.310+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	508	1136	683
2013-04-12T09:41:28.925+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	508	1136	683
2013-04-12T09:41:29.846+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	508	1136	683
2013-04-12T09:41:29.845+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	508	1136	683
2013-04-12T09:41:33.757+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T09:41:35.271+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T09:41:39.464+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	411	1136	683
2013-04-12T09:41:52.100+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	411	1136	683
2013-04-12T09:48:12.536+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	835	683
2013-04-12T09:48:13.557+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:14.190+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:14.381+02:00	TYPING-search-a	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:14.534+02:00	TYPING-search-ar	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:14.565+02:00	TYPING-search-arr	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:14.682+02:00	TYPING-search-arra	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:14.781+02:00	TYPING-search-array	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:14.901+02:00	TYPING-search-arrayc	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:14.974+02:00	TYPING-search-arrayco	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:16.191+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.array_Copy.html	87.77.216.245	-	0	0	835	683
2013-04-12T09:48:30.733+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.array_Copy.html	87.77.216.245	-	0	34	835	683
2013-04-12T09:48:37.837+02:00	TYPING-search-arraycop	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:37.844+02:00	TYPING-search-arraycop	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:38.152+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:53.028+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:53.521+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:48:53.682+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	411	1136	683
2013-04-12T09:48:54.065+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	411	1136	683
2013-04-12T09:48:54.451+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:49:39.278+02:00	TYPING-search-arraycop	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:49:39.285+02:00	TYPING-search-arraycop	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:49:39.510+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.array_Copy.html	87.77.216.245	-	0	0	835	683
2013-04-12T09:49:39.719+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:49:39.722+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:52:00.361+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:52:01.022+02:00	TYPING-search-arraycop	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:52:01.132+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:52:01.134+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:52:02.307+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:52:02.605+02:00	TYPING-search-arraycop	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:52:02.620+02:00	TYPING-search-arraycop	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:52:02.779+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:52:03.115+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	411	1136	683
2013-04-12T09:52:03.259+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	411	1136	683
2013-04-12T09:52:03.261+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1136	683
2013-04-12T09:52:03.392+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1136	683
2013-04-12T09:52:03.394+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1771	1136	683
2013-04-12T09:52:03.538+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1771	1136	683
2013-04-12T09:56:14.653+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:18.561+02:00	TYPING-search-arraycop	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:18.711+02:00	TYPING-search-a	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:18.873+02:00	TYPING-search-ad	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:19.113+02:00	TYPING-search-add	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:19.793+02:00	TYPING-search-adda	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:19.993+02:00	TYPING-search-addad	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:20.072+02:00	TYPING-search-addadg	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:20.240+02:00	TYPING-search-addadge	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:20.769+02:00	TYPING-search-addadges	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:20.889+02:00	TYPING-search-addadge	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:21.025+02:00	TYPING-search-addadg	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:21.168+02:00	TYPING-search-addad	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:21.298+02:00	TYPING-search-adda	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:21.345+02:00	TYPING-search-add	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:21.512+02:00	TYPING-search-adde	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:21.736+02:00	TYPING-search-added	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:21.809+02:00	TYPING-search-addedg	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:21.953+02:00	TYPING-search-addedge	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:23.314+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.add_Edges.html	87.77.216.245	-	0	0	835	683
2013-04-12T09:56:37.366+02:00	TYPING-search-addedges	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:37.495+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:37.496+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:37.980+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:38.076+02:00	TYPING-search-addedges	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:38.764+02:00	TYPING-search-addedges	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:38.818+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:39.572+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T09:56:41.865+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:16:01.274+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1771	1136	683
2013-04-12T10:16:04.500+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1042	1136	683
2013-04-12T10:16:08.342+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1153	1136	683
2013-04-12T10:16:14.404+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1222	1136	683
2013-04-12T10:16:17.578+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1126	1136	683
2013-04-12T10:16:19.313+02:00	READY	http://docs.seqan.de/seqan/dev/METAFUNCTION_Vertex_Descriptor.html	87.77.216.245	-	0	0	1136	683
2013-04-12T10:16:19.352+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Metafunction_Graph.html#VertexDescriptor	87.77.216.245	-	0	0	180	1709
2013-04-12T10:16:31.739+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1126	1136	683
2013-04-12T10:16:35.199+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1218	1136	683
2013-04-12T10:17:07.301+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1536	1136	683
2013-04-12T10:17:11.325+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1729	1136	683
2013-04-12T10:17:14.784+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2042	1136	683
2013-04-12T10:17:15.165+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2042	1136	683
2013-04-12T10:17:16.025+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	0	1136	683
2013-04-12T10:17:16.029+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2042	1136	683
2013-04-12T10:17:16.040+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	0	1136	683
2013-04-12T10:17:16.041+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	0	1136	683
2013-04-12T10:17:18.808+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	197	1136	683
2013-04-12T10:17:31.887+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	743	1136	683
2013-04-12T10:17:38.916+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	0	1136	683
2013-04-12T10:17:45.167+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T10:18:23.461+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T10:18:23.464+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T10:18:24.129+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T10:18:24.650+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T10:18:24.652+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T10:18:29.290+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T10:18:30.258+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T10:18:30.260+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2042	1136	683
2013-04-12T10:18:30.425+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2042	1136	683
2013-04-12T10:18:52.001+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2042	1136	683
2013-04-12T10:18:55.343+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2477	1136	683
2013-04-12T10:18:57.812+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	0	1136	683
2013-04-12T10:18:59.411+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	0	1136	683
2013-04-12T10:18:59.420+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	0	1136	683
2013-04-12T10:19:07.176+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1136	683
2013-04-12T10:19:08.099+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1136	683
2013-04-12T10:19:10.942+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:11.596+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:11.788+02:00	TYPING-search-p	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:11.826+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	835	683
2013-04-12T10:19:11.871+02:00	TYPING-search-pr	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:11.936+02:00	TYPING-search-pro	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:12.011+02:00	TYPING-search-prop	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:12.017+02:00	TYPING-search-prope	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:12.196+02:00	TYPING-search-proper	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:12.245+02:00	TYPING-search-propert	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:15.201+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_External+_Property+_Map.html	87.77.216.245	-	0	0	835	683
2013-04-12T10:19:49.591+02:00	TYPING-search-property	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:49.599+02:00	TYPING-search-property	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:49.659+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:50.197+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:50.326+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:19:51.857+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1136	683
2013-04-12T10:20:08.363+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1136	683
2013-04-12T10:20:09.274+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1136	683
2013-04-12T10:21:10.952+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1136	683
2013-04-12T10:22:44.668+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1136	683
2013-04-12T10:22:47.555+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1136	683
2013-04-12T10:22:47.558+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T10:22:47.891+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1136	683
2013-04-12T10:22:47.898+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1136	683
2013-04-12T10:22:48.203+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1136	683
2013-04-12T10:22:48.205+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	411	1136	683
2013-04-12T10:22:48.506+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	411	1136	683
2013-04-12T10:22:48.651+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:22:48.818+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:22:49.102+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:22:49.265+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:31:16.591+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1136	683
2013-04-12T10:31:19.462+02:00	SCROLL	http://trac.seqan.de/	87.77.216.245	-	0	148	1136	683
2013-04-12T10:31:52.481+02:00	SCROLL	http://trac.seqan.de/	87.77.216.245	-	0	91	1136	683
2013-04-12T10:31:55.124+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1136	683
2013-04-12T10:32:00.903+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	0	1136	683
2013-04-12T10:32:14.179+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs?action=edit	87.77.216.245	-	0	0	1136	683
2013-04-12T10:32:20.176+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	5169	1136	683
2013-04-12T10:32:25.400+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	824	1136	683
2013-04-12T10:32:25.402+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	824	1136	683
2013-04-12T10:32:25.685+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	824	1136	683
2013-04-12T10:38:38.728+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	824	1136	683
2013-04-12T10:40:50.794+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	751	1136	683
2013-04-12T10:41:16.269+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:16.270+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:16.917+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:36.772+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:39.291+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:39.292+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:40.201+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:54.740+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:54.743+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:55.233+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:55.913+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:55.912+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:41:58.874+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	735	1136	683
2013-04-12T10:42:01.312+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1109	1136	683
2013-04-12T10:42:01.313+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1109	1136	683
2013-04-12T10:42:01.727+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1109	1136	683
2013-04-12T10:42:03.001+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1109	1136	683
2013-04-12T10:42:05.442+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1109	1136	683
2013-04-12T10:42:05.443+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1109	1136	683
2013-04-12T10:42:06.575+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1109	1136	683
2013-04-12T10:42:09.442+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1365	1136	683
2013-04-12T10:42:10.646+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	0	1136	683
2013-04-12T10:42:10.645+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	0	1136	683
2013-04-12T10:42:11.664+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	0	1136	683
2013-04-12T10:42:11.927+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	0	1136	683
2013-04-12T10:42:14.008+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1182	1136	683
2013-04-12T10:42:14.072+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1182	1136	683
2013-04-12T10:42:14.956+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1182	1136	683
2013-04-12T10:42:14.954+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1182	1136	683
2013-04-12T10:42:16.278+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1182	1136	683
2013-04-12T10:42:17.880+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	122	1136	683
2013-04-12T10:42:19.538+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1443	1136	683
2013-04-12T10:42:19.539+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1443	1136	683
2013-04-12T10:42:20.070+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1443	1136	683
2013-04-12T10:42:20.885+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1443	1136	683
2013-04-12T10:42:22.743+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1443	1136	683
2013-04-12T10:42:22.745+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1443	1136	683
2013-04-12T10:42:23.845+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1443	1136	683
2013-04-12T10:42:26.361+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1728	1136	683
2013-04-12T10:42:26.481+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1728	1136	683
2013-04-12T10:42:26.483+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1728	1136	683
2013-04-12T10:42:27.270+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1728	1136	683
2013-04-12T10:42:28.984+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1728	1136	683
2013-04-12T10:42:28.986+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1728	1136	683
2013-04-12T10:45:35.938+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1728	1136	683
2013-04-12T10:45:36.153+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1728	1136	683
2013-04-12T10:47:50.382+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	1728	1136	683
2013-04-12T10:47:58.603+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2881	1136	683
2013-04-12T10:48:08.409+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2881	1136	683
2013-04-12T10:48:08.410+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2881	1136	683
2013-04-12T10:48:09.103+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2881	1136	683
2013-04-12T10:48:09.811+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2881	1136	683
2013-04-12T10:48:09.810+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2881	1136	683
2013-04-12T10:48:38.943+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2881	1136	683
2013-04-12T10:48:41.993+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2881	1136	683
2013-04-12T10:48:41.994+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2881	1136	683
2013-04-12T10:48:43.620+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	2881	1136	683
2013-04-12T10:48:46.302+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3277	1136	683
2013-04-12T10:48:47.394+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3277	1136	683
2013-04-12T10:48:47.395+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3277	1136	683
2013-04-12T10:48:48.581+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3277	1136	683
2013-04-12T10:48:52.161+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3278	1136	683
2013-04-12T10:48:52.162+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3278	1136	683
2013-04-12T10:48:52.303+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3278	1136	683
2013-04-12T10:49:40.357+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3278	1136	683
2013-04-12T10:49:46.798+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3821	1136	683
2013-04-12T10:49:58.807+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	4204	1136	683
2013-04-12T10:50:06.013+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3208	1136	683
2013-04-12T10:50:06.014+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3208	1136	683
2013-04-12T10:50:06.438+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3208	1136	683
2013-04-12T10:50:38.034+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3208	1136	683
2013-04-12T10:50:39.177+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3208	1136	683
2013-04-12T10:51:18.619+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3208	1136	683
2013-04-12T10:51:19.894+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3208	1136	683
2013-04-12T10:51:19.904+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:51:20.645+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T10:51:20.648+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3208	1136	683
2013-04-12T10:51:20.806+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3208	1136	683
2013-04-12T14:39:39.321+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1236	683
2013-04-12T14:39:40.833+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1236	683
2013-04-12T14:39:42.041+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1236	683
2013-04-12T14:39:42.051+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1236	683
2013-04-12T14:39:43.561+02:00	RESIZE	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1236	683
2013-04-12T14:39:48.872+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1236	683
2013-04-12T14:39:48.873+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1236	683
2013-04-12T14:41:55.759+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	741	1236	683
2013-04-12T14:42:02.512+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1236	683
2013-04-12T14:42:04.027+02:00	RESIZE	http://docs.seqan.de/seqan/dev/FUNCTION.add_Edges.html	87.77.216.245	-	0	41	1236	683
2013-04-12T14:42:05.753+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs/Assignment1GraphBasics	87.77.216.245	-	0	411	1236	683
2013-04-12T14:42:06.064+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T14:42:06.375+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-12T14:42:06.535+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs	87.77.216.245	-	0	3208	1236	683
2013-04-12T14:42:07.162+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Graphs#PropertyMapsAndIterators	87.77.216.245	-	0	2694	1236	683
2013-04-12T15:50:11.475+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1133	683
2013-04-12T15:50:13.742+02:00	READY	http://trac.seqan.de/wiki/TitleIndex	87.77.216.245	-	0	0	1133	683
2013-04-12T15:50:14.156+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	87.77.216.245	-	0	0	1133	683
2013-04-12T15:50:14.157+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	87.77.216.245	-	0	0	1133	683
2013-04-12T15:50:21.420+02:00	FOCUS	http://trac.seqan.de/wiki/TitleIndex	87.77.216.245	-	0	0	1133	683
2013-04-12T15:50:22.460+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	87.77.216.245	-	0	0	1133	683
2013-04-12T15:50:25.314+02:00	READY	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	0	1133	683
2013-04-12T15:50:46.369+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	257	1133	683
2013-04-12T15:50:47.782+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	257	1133	683
2013-04-12T15:50:47.784+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	257	1133	683
2013-04-12T15:51:36.666+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	257	1133	683
2013-04-12T15:51:40.868+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	849	1133	683
2013-04-12T15:51:50.199+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T15:51:52.569+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T15:51:52.570+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:04:43.779+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:04:43.954+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:05:08.585+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:05:09.375+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:05:09.376+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:42:28.879+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:42:29.087+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:00.854+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:01.448+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:01.449+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:27.695+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:28.568+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:28.569+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:29.381+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:29.954+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:29.955+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:30.982+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:34.465+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:34.466+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:50.854+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:51.063+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:53.296+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:54.110+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:43:57.109+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:45:25.767+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:45:25.761+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:45:27.794+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:46:11.868+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-12T16:46:11.871+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/WritingTests	87.77.216.245	-	0	3372	1133	683
2013-04-13T12:27:30.311+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/WritingTests	93.219.57.181	-	0	3372	1133	683
2013-04-16T08:47:06.559+02:00	READY	http://trac.seqan.de/	79.201.109.90	-	0	0	1276	683
2013-04-16T11:32:30.146+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1178	683
2013-04-16T11:32:31.993+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1178	683
2013-04-16T11:32:32.291+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1178	683
2013-04-16T11:32:35.082+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	722	1178	683
2013-04-16T11:32:35.433+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	722	1178	683
2013-04-16T11:32:36.713+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	160.45.111.85	-	0	0	1178	683
2013-04-16T11:32:36.830+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	160.45.111.85	-	0	0	1178	683
2013-04-16T11:32:39.919+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	160.45.111.85	-	0	0	1178	683
2013-04-16T11:32:39.989+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment	160.45.111.85	-	0	0	1178	683
2013-04-16T11:32:41.995+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	5350	1178	683
2013-04-16T11:32:50.585+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	5457	1178	683
2013-04-16T11:32:59.037+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	6304	1178	683
2013-04-16T11:33:03.046+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	6337	1178	683
2013-04-16T11:33:06.095+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	6338	1178	683
2013-04-16T11:33:13.185+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	5845	1178	683
2013-04-16T11:33:16.349+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	5431	1178	683
2013-04-16T11:33:20.433+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2585	1178	683
2013-04-16T11:33:23.651+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	1462	1178	683
2013-04-16T11:33:28.986+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2311	1178	683
2013-04-16T11:33:45.838+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2891	1178	683
2013-04-16T11:33:48.475+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	3130	1178	683
2013-04-16T11:33:56.043+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2843	1178	683
2013-04-16T11:34:27.750+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2843	1178	683
2013-04-16T11:34:27.845+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2843	1178	683
2013-04-16T11:34:29.205+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2843	1178	683
2013-04-16T11:35:05.244+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2843	1178	683
2013-04-16T11:37:43.458+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2843	1178	683
2013-04-16T11:37:43.464+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2843	1178	683
2013-04-16T11:46:47.313+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2843	1178	683
2013-04-16T11:46:48.358+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	160.45.111.85	-	0	2843	1178	683
2013-04-16T12:27:43.965+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PairwiseSequenceAlignment#LocalAlignments	87.77.216.245	-	0	2843	1178	683
2013-04-19T11:17:26.659+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1178	683
2013-04-22T09:01:46.851+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:46.887+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	160.45.111.85	-	0	0	946	667
2013-04-22T09:01:47.301+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:47.351+02:00	TYPING-search-r	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:47.433+02:00	TYPING-search-re	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:47.584+02:00	TYPING-search-rea	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:47.801+02:00	TYPING-search-read	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:47.833+02:00	TYPING-search-readr	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:48.170+02:00	TYPING-search-readre	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:49.873+02:00	TYPING-search-readrec	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:50.117+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	0	946	667
2013-04-22T09:01:54.197+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	610	946	667
2013-04-22T09:01:58.890+02:00	TYPING-search-readrec	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:59.003+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:59.005+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:59.226+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	504	946	667
2013-04-22T09:01:59.590+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:01:59.993+02:00	TYPING-search-readrec	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:02:00.171+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:02:00.169+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:09:31.462+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:09:31.615+02:00	TYPING-search-readrec	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:09:31.739+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	667
2013-04-22T09:11:13.049+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1247	667
2013-04-22T10:19:42.675+02:00	READY	http://trac.seqan.de/	87.77.216.245	-	0	0	1247	639
2013-04-22T10:19:47.000+02:00	READY	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1247	639
2013-04-22T10:19:47.184+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1247	639
2013-04-22T10:19:47.641+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	0	1247	639
2013-04-22T10:19:54.077+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	87.77.216.245	-	0	1663	1247	639
2013-04-22T10:19:57.149+02:00	READY	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	87.77.216.245	-	0	1148	1247	639
2013-04-22T10:20:02.433+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	87.77.216.245	-	0	1089	1247	639
2013-04-22T10:20:08.092+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	87.77.216.245	-	0	1050	1247	639
2013-04-22T10:21:00.963+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	87.77.216.245	-	0	1050	1247	639
2013-04-22T10:21:00.964+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	87.77.216.245	-	0	1050	1247	639
2013-04-22T10:22:05.191+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	87.77.216.245	-	0	1050	1247	639
2013-04-22T10:22:05.793+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	87.77.216.245	-	0	1050	1247	639
2013-04-22T10:22:05.795+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	87.77.216.245	-	0	1050	1247	639
2013-04-22T10:26:31.679+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	87.77.216.245	-	0	1050	1247	639
2013-04-22T10:26:33.828+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	87.77.216.245	-	0	1050	1247	639
2013-04-22T10:40:07.944+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	1050	1247	639
2013-04-22T10:40:13.387+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	639
2013-04-22T11:50:38.959+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	504	946	683
2013-04-22T11:50:39.006+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-22T18:16:18.541+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1240	639
2013-04-22T18:16:21.031+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1240	639
2013-04-22T18:16:21.755+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1240	639
2013-04-22T18:16:23.605+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1240	639
2013-04-22T18:16:28.910+02:00	READY	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	0	1240	639
2013-04-22T18:16:29.058+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	0	1240	639
2013-04-22T18:16:29.825+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	0	1240	639
2013-04-22T18:16:31.116+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	0	1240	639
2013-04-22T18:16:37.288+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	2230	1240	639
2013-04-22T18:16:38.157+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	2230	1240	639
2013-04-22T18:18:08.830+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	2230	1240	639
2013-04-22T18:18:18.426+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	2076	1240	639
2013-04-22T18:18:19.414+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	378	1240	639
2013-04-22T18:18:19.879+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	378	1240	639
2013-04-22T18:18:20.304+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	378	1240	639
2013-04-22T18:18:20.936+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	378	1240	639
2013-04-22T18:18:21.080+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/BasicSequenceIO	160.45.111.85	-	0	378	1240	639
2013-04-22T18:18:26.051+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1240	639
2013-04-22T18:18:28.445+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1991	1240	639
2013-04-22T18:18:28.728+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1991	1240	639
2013-04-22T18:18:29.997+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	0	1240	639
2013-04-22T18:18:30.673+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	0	1240	639
2013-04-22T18:18:35.844+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2656	1240	639
2013-04-22T18:18:48.137+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1991	1240	639
2013-04-22T18:18:52.608+02:00	READY	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2656	1240	639
2013-04-22T18:19:03.583+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2527	1240	639
2013-04-22T18:19:12.100+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:19:18.257+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:19:18.258+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:20:04.273+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:20:04.882+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:20:04.883+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:20:58.907+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:20:59.613+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:20:59.612+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:23:10.227+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:23:10.579+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-22T18:29:46.391+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/SequenceFileIO	160.45.111.85	-	0	2615	1240	639
2013-04-25T17:40:36.210+02:00	READY	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	559	1289	1083
2013-04-25T17:40:40.646+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:40:40.648+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:40:41.858+02:00	SCROLL	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:41:10.742+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:41:27.842+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:41:27.845+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:45:51.451+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:45:53.614+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:46:07.960+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:46:09.295+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:46:09.296+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:49:21.187+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:49:21.325+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:56:13.678+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T17:56:18.319+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T18:09:50.710+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T18:09:54.604+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T18:09:54.614+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T18:11:46.026+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T18:11:51.190+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T18:11:51.191+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T18:11:56.410+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T18:11:56.879+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1289	1083
2013-04-25T21:47:11.461+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:47:12.973+02:00	RESIZE	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:47:13.098+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:47:13.099+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:47:17.630+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:47:17.756+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:48:19.765+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:48:20.427+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:48:20.428+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:48:22.149+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:48:46.162+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:51:33.434+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:51:36.092+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:51:36.093+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:53:27.013+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:53:27.911+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:55:29.482+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:55:30.237+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T21:55:30.243+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T22:02:03.219+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T22:02:03.528+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T22:04:51.602+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T22:04:52.673+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T22:04:52.674+02:00	BLUR	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T22:05:00.077+02:00	FOCUS	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	1274	683
2013-04-25T22:05:04.448+02:00	RESIZE	http://trac.seqan.de/wiki/HowTo/WriteAppTests#HowTo:WriteApplicationTests	93.219.30.194	-	0	5000	963	1073
2013-04-29T10:50:56.938+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:50:57.405+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-29T10:50:58.803+02:00	TYPING-search-it	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-29T10:50:58.980+02:00	TYPING-search-iter	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-29T10:50:59.114+02:00	TYPING-search-iterat	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-29T10:50:59.307+02:00	TYPING-search-iterato	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-29T10:50:59.398+02:00	TYPING-search-iterator	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-29T10:51:01.915+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TAG_Iterator+_Spec.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:51:04.169+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TAG_Iterator+_Spec.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:51:04.166+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-29T10:51:04.530+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Default_Iterator_Spec.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:51:07.275+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Iterator.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:51:10.170+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Iterator.html	87.77.216.245	-	0	152	790	683
2013-04-29T10:51:11.002+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TAG_Iterator+_Spec.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:51:13.901+02:00	READY	http://docs.seqan.de/seqan/dev2/files/DEMO_Rooted+_Iterators.html	87.77.216.245	-	0	23	790	683
2013-04-29T10:51:16.409+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TAG_Iterator+_Spec.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:51:17.010+02:00	READY	http://docs.seqan.de/seqan/dev2/files/DEMO_Rooted+_Iterators.html	87.77.216.245	-	0	180	790	683
2013-04-29T10:51:18.929+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:51:30.630+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:51:30.627+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:51:37.149+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:52:03.037+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	87.77.216.245	-	0	0	790	683
2013-04-29T10:52:03.042+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	87.77.216.245	-	0	0	790	683
2013-04-29T11:46:45.408+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	87.77.216.245	-	0	0	790	683
2013-04-29T11:46:45.259+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	87.77.216.245	-	0	0	790	683
2013-04-29T13:56:27.134+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	160.45.111.85	-	0	0	925	683
2013-04-29T13:56:28.636+02:00	RESIZE	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	160.45.111.85	-	0	0	925	683
2013-04-29T13:56:28.701+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	160.45.111.85	-	0	0	925	683
2013-04-29T14:19:34.088+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.position.html	87.77.216.245	-	0	0	925	683
2013-04-29T14:19:34.238+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-04-29T16:36:02.403+02:00	READY	http://trac.seqan.de/ticket/1015	160.45.111.85	-	0	0	1226	683
2013-04-29T16:36:04.583+02:00	RESIZE	http://trac.seqan.de/ticket/1015	160.45.111.85	-	0	0	1226	647
2013-04-29T16:36:10.663+02:00	SCROLL	http://trac.seqan.de/ticket/1015	160.45.111.85	-	0	0	1226	647
2013-04-29T16:36:13.420+02:00	SCROLL	http://trac.seqan.de/ticket/1015	160.45.111.85	-	0	89	1226	647
2013-04-29T16:36:16.032+02:00	SCROLL	http://trac.seqan.de/ticket/1015	160.45.111.85	-	0	0	1226	647
2013-04-29T16:36:24.181+02:00	RESIZE	http://trac.seqan.de/ticket/1015	160.45.111.85	-	0	131	1226	647
2013-04-29T16:36:27.149+02:00	SCROLL	http://trac.seqan.de/ticket/1015	160.45.111.85	-	0	181	1226	647
2013-04-29T16:36:31.175+02:00	SCROLL	http://trac.seqan.de/ticket/1015	160.45.111.85	-	0	144	1226	647
2013-04-29T16:36:43.302+02:00	SCROLL	http://trac.seqan.de/ticket/1015	160.45.111.85	-	0	166	1226	647
2013-04-29T16:36:48.562+02:00	SCROLL	http://trac.seqan.de/ticket/1015	160.45.111.85	-	0	271	1226	647
2013-04-30T09:14:24.248+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1233	683
2013-04-30T09:14:27.961+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1233	683
2013-04-30T09:14:28.066+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1233	683
2013-04-30T09:14:31.408+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1024	1233	683
2013-04-30T09:14:34.454+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	0	1233	683
2013-04-30T09:14:37.073+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	598	1233	683
2013-04-30T09:14:38.287+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	537	1233	683
2013-04-30T09:14:42.364+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1059	1233	683
2013-04-30T09:14:46.715+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/Indices#	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	1059	1233	683
2013-04-30T09:14:53.115+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	989	1233	683
2013-04-30T09:14:53.192+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	989	1233	683
2013-04-30T09:14:53.822+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1085	1233	683
2013-04-30T09:14:53.911+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1085	1233	683
2013-04-30T09:14:54.660+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1085	1233	683
2013-04-30T09:14:56.411+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	0	1233	683
2013-04-30T09:14:56.631+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	0	1233	683
2013-04-30T09:14:58.786+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	0	1233	683
2013-04-30T09:14:58.793+02:00	LINK-http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	0	1233	683
2013-04-30T09:15:00.798+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3015	1233	683
2013-04-30T09:15:33.003+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3015	1233	683
2013-04-30T09:15:33.009+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3015	1233	683
2013-04-30T09:15:40.406+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3015	1233	683
2013-04-30T09:15:42.055+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3015	1233	683
2013-04-30T09:15:42.056+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3015	1233	683
2013-04-30T09:18:37.880+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3015	1233	683
2013-04-30T09:18:41.428+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3726	1233	683
2013-04-30T09:18:43.944+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3591	1233	683
2013-04-30T09:19:08.879+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3591	1233	683
2013-04-30T09:19:08.880+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3591	1233	683
2013-04-30T09:19:09.881+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3591	1233	683
2013-04-30T09:19:19.423+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3591	1233	683
2013-04-30T09:19:19.424+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3591	1233	683
2013-04-30T09:19:49.484+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3591	1233	683
2013-04-30T09:19:52.559+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	3703	1233	683
2013-04-30T09:19:59.480+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:20:01.446+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:20:04.654+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1233	683
2013-04-30T09:20:06.831+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1233	683
2013-04-30T09:20:10.801+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	1144	1233	683
2013-04-30T09:20:22.237+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	912	1233	683
2013-04-30T09:20:23.589+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	912	1233	683
2013-04-30T09:20:35.180+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:20:35.194+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:20:35.288+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:20:35.729+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:32.681+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:33.358+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:33.360+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:22:33.678+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:22:33.680+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:38.131+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:38.132+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:39.364+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:40.281+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:40.283+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:41.416+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:42.783+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:22:42.785+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:22:42.911+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:22:43.521+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:22:45.381+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:25:30.374+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching#ExactSearch1	160.45.111.85	-	0	0	1233	683
2013-04-30T09:25:31.394+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	890	1233	683
2013-04-30T09:40:13.024+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	160.45.111.85	-	0	0	932	683
2013-04-30T09:40:13.087+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:40:13.684+02:00	TYPING-search-sa	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:40:13.835+02:00	TYPING-search-save	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:40:15.022+02:00	TYPING-search-in	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:40:15.068+02:00	TYPING-search-ind	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:40:15.105+02:00	TYPING-search-inde	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:40:15.323+02:00	TYPING-search-index	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:40:15.505+02:00	TYPING-search-indexsa	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:40:15.644+02:00	TYPING-search-indexsave	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:40:17.061+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	932	683
2013-04-30T09:40:22.936+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Index_23save.html	160.45.111.85	-	0	124	932	683
2013-04-30T09:43:32.562+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:43:32.570+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:43:33.282+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:43:37.222+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	932	683
2013-04-30T09:44:51.758+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:44:51.761+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:45:41.578+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:45:42.846+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:45:42.847+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:45:44.472+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:45:44.724+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:46:07.244+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	160.45.111.85	-	0	0	932	683
2013-04-30T09:46:08.485+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:46:11.910+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:46:12.456+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:46:15.869+02:00	READY	http://docs.seqan.de/seqan/dev/	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:16.028+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:16.897+02:00	BLUR	http://docs.seqan.de/seqan/dev/	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:16.901+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:18.710+02:00	TYPING-search-in	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:18.901+02:00	TYPING-search-inde	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:19.111+02:00	TYPING-search-index	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:19.721+02:00	TYPING-search-indexsa	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:19.921+02:00	TYPING-search-indexsave	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:20.545+02:00	TYPING-search-indexsav	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:20.665+02:00	TYPING-search-indexsa	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:20.808+02:00	TYPING-search-indexs	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:20.931+02:00	TYPING-search-index	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:21.393+02:00	TYPING-search-index#	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:21.624+02:00	TYPING-search-index#sa	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:21.831+02:00	TYPING-search-index#save	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:22.425+02:00	TYPING-search-sa	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:22.569+02:00	TYPING-search-save	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:46:31.624+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:31.751+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	0	180	683
2013-04-30T09:46:32.758+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:34.653+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:34.761+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	0	180	683
2013-04-30T09:46:38.056+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:38.060+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:43.386+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:45.905+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:45.907+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:49.415+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:46:56.421+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:46:56.494+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:46:56.492+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	29	1233	683
2013-04-30T09:46:56.926+02:00	TYPING-search-l	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:46:57.000+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	29	1233	683
2013-04-30T09:46:57.561+02:00	TYPING-search-la	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:46:57.838+02:00	TYPING-search-l	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:46:57.992+02:00	TYPING-search-load	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:47:00.115+02:00	TYPING-search-re	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1900	180	683
2013-04-30T09:47:00.168+02:00	TYPING-search-rea	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1900	180	683
2013-04-30T09:47:00.232+02:00	TYPING-search-read	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1900	180	683
2013-04-30T09:47:00.510+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1900	180	683
2013-04-30T09:47:03.167+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	2575	180	683
2013-04-30T09:47:22.999+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	29	1233	683
2013-04-30T09:47:23.306+02:00	TYPING-search-l	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:47:23.427+02:00	TYPING-search-loa	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:47:23.465+02:00	TYPING-search-load	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:47:25.914+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1900	180	683
2013-04-30T09:47:27.540+02:00	TYPING-search-op	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1900	180	683
2013-04-30T09:47:27.709+02:00	TYPING-search-ope	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1900	180	683
2013-04-30T09:47:27.756+02:00	TYPING-search-open	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1900	180	683
2013-04-30T09:47:30.290+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	2125	180	683
2013-04-30T09:47:46.780+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23open.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:47:46.895+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23open	160.45.111.85	-	0	0	180	683
2013-04-30T09:47:47.562+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23open.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:48:27.916+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:48:27.990+02:00	READY	http://docs.seqan.de/seqan/dev/	160.45.111.85	-	0	0	1233	683
2013-04-30T09:48:29.097+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:48:29.127+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	160.45.111.85	-	0	0	932	683
2013-04-30T09:48:29.869+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Page.html	160.45.111.85	-	0	0	180	1081
2013-04-30T09:48:30.240+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:48:30.269+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	0	180	683
2013-04-30T09:48:32.453+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	29	1233	683
2013-04-30T09:48:32.457+02:00	FOCUS	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	29	1233	683
2013-04-30T09:48:32.460+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	29	1233	683
2013-04-30T09:48:32.461+02:00	FOCUS	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:48:33.269+02:00	TYPING-search-sa	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:48:33.405+02:00	TYPING-search-save	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:48:33.424+02:00	SCROLL	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	1840	180	683
2013-04-30T09:48:33.550+02:00	SCROLL	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	29	1233	683
2013-04-30T09:48:35.463+02:00	READY	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:48:35.575+02:00	READY	http://docs.seqan.de/seqan/dev/INDEX_Function.html#Index%23save	160.45.111.85	-	0	0	180	683
2013-04-30T09:48:36.400+02:00	BLUR	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:49:23.478+02:00	UNLOAD	http://docs.seqan.de/seqan/dev/FUNCTION_Index_23save.html	160.45.111.85	-	0	0	1233	683
2013-04-30T09:49:24.478+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-04-30T09:49:25.302+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-04T18:11:23.228+02:00	READY	http://trac.seqan.de/	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:29.395+02:00	READY	http://trac.seqan.de/wiki/TitleIndex	109.96.27.1	-	0	696	1268	683
2013-05-04T18:11:29.509+02:00	BLUR	http://trac.seqan.de/wiki/TitleIndex	109.96.27.1	-	0	696	1268	683
2013-05-04T18:11:32.958+02:00	SCROLL	http://trac.seqan.de/wiki/TitleIndex	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:35.278+02:00	SCROLL	http://trac.seqan.de/wiki/TitleIndex	109.96.27.1	-	0	1896	1268	683
2013-05-04T18:11:38.145+02:00	READY	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:43.190+02:00	SCROLL	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:44.946+02:00	FOCUS	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:44.954+02:00	LINK-http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:46.958+02:00	SCROLL	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:11:48.122+02:00	BLUR	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:11:53.485+02:00	READY	http://trac.seqan.de/wiki/Tutorial	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:55.786+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	109.96.27.1	-	0	1024	1268	683
2013-05-04T18:11:57.821+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:58.156+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:58.759+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:59.443+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	109.96.27.1	-	0	0	1268	683
2013-05-04T18:11:59.444+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	109.96.27.1	-	0	0	1268	683
2013-05-04T18:12:02.729+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	109.96.27.1	-	0	0	1268	683
2013-05-04T18:12:03.938+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	109.96.27.1	-	0	0	1268	683
2013-05-04T18:12:08.875+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:12:08.923+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:10.348+02:00	TYPING-search-ba	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:10.480+02:00	TYPING-search-bac	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:10.579+02:00	TYPING-search-back	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:10.692+02:00	TYPING-search-backg	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:10.855+02:00	TYPING-search-backgr	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:12.422+02:00	TYPING-search-backg	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:12.686+02:00	TYPING-search-back	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:12.800+02:00	TYPING-search-backt	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:12.969+02:00	TYPING-search-backtra	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:15.647+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:12:18.617+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	123	967	683
2013-05-04T18:12:20.877+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:12:22.230+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:12:22.851+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	327	967	683
2013-05-04T18:12:24.184+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:12:33.917+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	77	967	683
2013-05-04T18:12:37.207+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	233	967	683
2013-05-04T18:12:44.654+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	556	967	683
2013-05-04T18:12:50.399+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	400	967	683
2013-05-04T18:12:50.440+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	400	967	683
2013-05-04T18:12:50.441+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	400	967	683
2013-05-04T18:12:58.430+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	400	967	683
2013-05-04T18:13:00.357+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	147	967	683
2013-05-04T18:13:00.358+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	147	967	683
2013-05-04T18:13:01.355+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	147	967	683
2013-05-04T18:13:14.388+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	147	967	683
2013-05-04T18:13:14.958+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	147	967	683
2013-05-04T18:13:14.960+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	147	967	683
2013-05-04T18:17:32.740+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	147	967	683
2013-05-04T18:17:34.908+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:17:35.491+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:17:37.808+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:17:37.961+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:17:38.007+02:00	TYPING-search-string	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:17:38.150+02:00	TYPING-search-strings	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:17:38.299+02:00	TYPING-search-stringset	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:17:41.851+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_String_Set_Type.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:17:47.946+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:17:47.948+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_String_Set_Type.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:17:51.634+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_String_Set_Type.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:17:51.638+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_String_Set_Type.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:24.883+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_String_Set_Type.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:29.874+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.string_Set.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:32.682+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_String_Set_Type.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:34.566+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_String_Set_Type.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:34.568+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:18:35.981+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_String_Set.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:36.329+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:18:36.332+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String_Set.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:36.523+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String_Set.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:36.525+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String_Set.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:39.694+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String_Set.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:40.405+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String_Set.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:40.409+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String_Set.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:42.712+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_String_Set.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:43.737+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_String_Set.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:18:43.737+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:18:44.625+02:00	TYPING-search-ind	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:18:44.700+02:00	TYPING-search-inde	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:18:44.905+02:00	TYPING-search-index	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:18:44.951+02:00	TYPING-search-index.	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:18:45.506+02:00	TYPING-search-index	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:18:50.129+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.index_Create.html	109.96.27.1	-	0	101	967	683
2013-05-04T18:18:50.949+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:18:52.468+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	41	967	683
2013-05-04T18:18:54.669+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	41	967	683
2013-05-04T18:18:54.672+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	41	967	683
2013-05-04T18:18:55.104+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	41	967	683
2013-05-04T18:18:57.112+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	41	967	683
2013-05-04T18:18:57.113+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	41	967	683
2013-05-04T18:19:56.733+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	41	967	683
2013-05-04T18:19:58.304+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	116	967	683
2013-05-04T18:19:58.305+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	116	967	683
2013-05-04T18:19:59.495+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	116	967	683
2013-05-04T18:20:00.197+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	116	967	683
2013-05-04T18:20:00.921+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	116	967	683
2013-05-04T18:20:00.923+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	116	967	683
2013-05-04T18:20:19.918+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	116	967	683
2013-05-04T18:20:20.521+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	116	967	683
2013-05-04T18:20:20.523+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	116	967	683
2013-05-04T18:20:31.541+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	116	967	683
2013-05-04T18:20:38.228+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	57	967	683
2013-05-04T18:20:40.275+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	57	967	683
2013-05-04T18:20:40.277+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	57	967	683
2013-05-04T18:20:42.535+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	57	967	683
2013-05-04T18:20:44.042+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	109.96.27.1	-	0	57	967	683
2013-05-04T18:20:44.043+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:20:45.100+02:00	TYPING-search-f	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:20:45.196+02:00	TYPING-search-fin	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:20:45.223+02:00	TYPING-search-find	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:20:45.384+02:00	TYPING-search-finder	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:20:48.906+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:20:49.066+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:20:49.067+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:20:51.170+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:20:51.173+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:21:08.236+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:21:09.383+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:21:09.404+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	109.96.27.1	-	0	0	1268	683
2013-05-04T18:21:11.399+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	109.96.27.1	-	0	0	1268	683
2013-05-04T18:21:11.411+02:00	FOCUS	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:21:19.066+02:00	BLUR	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:21:19.068+02:00	BLUR	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:22:58.689+02:00	FOCUS	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:23:01.627+02:00	BLUR	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:23:01.629+02:00	BLUR	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:23:02.007+02:00	FOCUS	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:23:02.915+02:00	BLUR	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:23:02.917+02:00	BLUR	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:23:16.125+02:00	FOCUS	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:23:16.973+02:00	BLUR	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:23:16.974+02:00	BLUR	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:42:18.940+02:00	FOCUS	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:42:19.474+02:00	BLUR	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	109.96.27.1	-	0	2991	1268	683
2013-05-04T18:42:22.573+02:00	READY	http://trac.seqan.de/	109.96.27.1	-	0	0	1268	683
2013-05-04T18:42:25.736+02:00	BLUR	http://trac.seqan.de/	109.96.27.1	-	0	0	1268	683
2013-05-04T18:42:27.340+02:00	UNLOAD	http://trac.seqan.de/	109.96.27.1	-	0	0	1268	683
2013-05-04T18:42:28.984+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:29.143+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:42:29.158+02:00	TYPING-search-ba	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:29.216+02:00	TYPING-search-bac	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:29.372+02:00	TYPING-search-back	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:29.462+02:00	TYPING-search-backt	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:29.597+02:00	TYPING-search-backtra	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:29.759+02:00	TYPING-search-backtrac	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:29.815+02:00	TYPING-search-backtrack	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:31.017+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:31.020+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:37.165+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:42:44.394+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:42:56.727+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	264	967	683
2013-05-04T18:43:18.409+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:43:18.413+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:43:30.767+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:43:31.532+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:43:31.533+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:43:55.845+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:44:07.534+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:44:19.363+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:44:19.365+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:44:20.744+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	399	967	683
2013-05-04T18:44:24.328+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:44:30.640+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:44:30.642+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:44:33.287+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:44:34.746+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	109.96.27.1	-	0	0	300	683
2013-05-04T18:44:34.757+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:44:35.992+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:44:37.796+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:44:37.797+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:47:13.738+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:47:18.266+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:47:18.385+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:47:18.387+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:47:19.271+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:47:19.959+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:47:19.960+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:47:57.716+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T18:47:57.900+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Backtracking.html	109.96.27.1	-	0	0	967	683
2013-05-04T22:26:11.955+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/panel/index.html	86.126.108.191	-	0	0	300	683
2013-05-04T22:26:11.956+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/files/CLASS_Finder.html	86.126.108.191	-	0	0	967	683
2013-05-04T22:26:11.989+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/Indices	86.126.108.191	-	0	0	1268	683
2013-05-04T22:26:12.514+02:00	FOCUS	http://trac.seqan.de/wiki/1.4/Tutorial/PatternMatching#IndexSearch	86.126.108.191	-	0	2991	1268	683
2013-05-13T11:47:34.136+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:34.648+02:00	TYPING-search-re	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:34.765+02:00	TYPING-search-rea	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:34.811+02:00	TYPING-search-read	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:34.977+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	160.45.111.85	-	0	0	919	683
2013-05-13T11:47:35.431+02:00	TYPING-search-readre	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:35.440+02:00	TYPING-search-readrea	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:35.489+02:00	TYPING-search-readread	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:36.086+02:00	TYPING-search-readrea	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:36.202+02:00	TYPING-search-readreac	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:36.253+02:00	TYPING-search-readreaco	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:37.286+02:00	TYPING-search-readreac	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:37.421+02:00	TYPING-search-readrea	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:37.735+02:00	TYPING-search-readreac	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:37.926+02:00	TYPING-search-readrea	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:38.068+02:00	TYPING-search-readrec	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:40.097+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	0	919	683
2013-05-13T11:47:52.052+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	11	919	683
2013-05-13T11:47:54.281+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Sequence_Stream_23read_Record.html	160.45.111.85	-	0	0	919	683
2013-05-13T11:47:57.989+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Record_Reader_23result_Code.html	160.45.111.85	-	0	0	919	683
2013-05-13T11:47:59.330+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:47:59.654+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Record_Reader.html	160.45.111.85	-	0	0	919	683
2013-05-13T11:48:03.657+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	0	919	683
2013-05-13T11:48:09.996+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	0	919	683
2013-05-13T11:48:10.392+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	0	919	683
2013-05-13T11:48:11.642+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	0	919	683
2013-05-13T11:48:15.084+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:48:15.171+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	665	919	683
2013-05-13T11:48:15.174+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:48:15.323+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	665	919	683
2013-05-13T11:48:15.325+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:48:15.388+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	665	919	683
2013-05-13T11:48:15.390+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T11:48:16.207+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	665	919	683
2013-05-13T11:48:17.097+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	665	919	683
2013-05-13T11:48:21.547+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T11:50:04.441+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T11:50:04.431+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T11:59:32.074+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T11:59:32.220+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T12:03:50.128+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T12:03:50.572+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T12:03:51.687+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T12:03:51.803+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T12:03:52.303+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T12:03:53.966+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read_Record.html	160.45.111.85	-	0	555	919	683
2013-05-13T12:03:53.968+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-13T12:03:56.629+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-15T21:26:19.464+02:00	READY	http://trac.seqan.de/	79.201.109.203	-	0	0	1217	683
2013-05-15T21:26:19.744+02:00	BLUR	http://trac.seqan.de/	79.201.109.203	-	0	0	1217	683
2013-05-15T21:26:19.746+02:00	BLUR	http://trac.seqan.de/	79.201.109.203	-	0	0	1217	683
2013-05-15T21:26:20.601+02:00	FOCUS	http://trac.seqan.de/	79.201.109.203	-	0	0	1217	683
2013-05-15T21:26:21.707+02:00	BLUR	http://trac.seqan.de/	79.201.109.203	-	0	0	1456	1038
2013-05-15T21:26:22.387+02:00	RESIZE	http://trac.seqan.de/	79.201.109.203	-	0	0	1456	1038
2013-05-15T21:26:23.614+02:00	UNLOAD	http://trac.seqan.de/	79.201.109.203	-	0	0	1456	1038
2013-05-15T21:26:23.622+02:00	FOCUS	http://trac.seqan.de/	79.201.109.203	-	0	0	1456	1038
2013-05-15T21:26:23.985+02:00	BLUR	http://trac.seqan.de/	79.201.109.203	-	0	0	1456	1038
2013-05-15T21:26:23.986+02:00	BLUR	http://trac.seqan.de/	79.201.109.203	-	0	0	1456	1038
2013-05-15T21:26:24.975+02:00	FOCUS	http://trac.seqan.de/	79.201.109.203	-	0	0	1456	1038
2013-05-16T17:00:47.928+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-16T17:00:49.483+02:00	UNLOAD	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-16T17:00:49.493+02:00	FOCUS	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-16T17:00:49.778+02:00	BLUR	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-16T17:00:49.777+02:00	BLUR	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-16T17:00:50.814+02:00	FOCUS	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-16T19:51:07.675+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:51:07.699+02:00	TYPING-search-re	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:51:07.855+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:51:07.882+02:00	TYPING-search-rem	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:51:07.985+02:00	TYPING-search-remov	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:51:08.002+02:00	TYPING-search-remove	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:51:08.124+02:00	TYPING-search-remove 	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:51:08.480+02:00	TYPING-search-remove	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:51:08.568+02:00	TYPING-search-removev	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:51:08.646+02:00	TYPING-search-removeva	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:51:10.713+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:51:20.509+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:51:20.511+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:51:21.236+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:51:34.905+02:00	READY	http://trac.seqan.de/changeset/3045/trunk/seqan	93.219.31.79	-	0	0	1480	857
2013-05-16T19:51:41.309+02:00	READY	http://trac.seqan.de/	93.219.31.79	-	0	0	1480	857
2013-05-16T19:51:42.112+02:00	TYPING-proj-search-removeValueById	http://trac.seqan.de/	93.219.31.79	-	0	0	1480	857
2013-05-16T19:51:44.474+02:00	READY	http://trac.seqan.de/search?q=removeValueById	93.219.31.79	-	0	0	1480	857
2013-05-16T19:51:47.106+02:00	READY	http://trac.seqan.de/search?q=removeValueById&wiki=on&noquickjump=1	93.219.31.79	-	0	0	1480	857
2013-05-16T19:51:47.832+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:51:52.793+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:51:52.794+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:53:35.263+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:53:36.668+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:53:36.669+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:54:23.794+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:54:28.003+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:54:28.006+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:54:38.474+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:54:40.457+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:54:40.454+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.remove_Value_By_Id.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:54:41.299+02:00	TYPING-search-e	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:54:41.375+02:00	TYPING-search-er	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:54:41.470+02:00	TYPING-search-era	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:54:41.614+02:00	TYPING-search-eras	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:54:41.751+02:00	TYPING-search-erase	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:54:43.563+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.erase.html	93.219.31.79	-	0	0	1179	857
2013-05-16T19:54:45.760+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:54:45.762+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:54:49.016+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:54:50.108+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:54:50.110+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:15.097+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:15.752+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:15.754+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:18.291+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:19.144+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:19.146+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:35.221+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:35.709+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:35.710+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:36.430+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:36.815+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:36.819+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:45.218+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:45.746+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:56:45.747+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:57:45.336+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:57:45.503+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:57:55.908+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:57:56.423+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:57:56.425+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:58:00.572+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T19:58:00.977+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T20:12:41.482+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-16T20:12:41.652+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/panel/index.html	93.219.31.79	-	0	0	300	857
2013-05-17T09:07:12.916+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:07:13.382+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:07:14.076+02:00	TYPING-search-s	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:07:14.267+02:00	TYPING-search-seq	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:07:14.613+02:00	TYPING-search-sequ	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:07:14.696+02:00	TYPING-search-sequen	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:07:14.862+02:00	TYPING-search-sequence	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:07:15.066+02:00	TYPING-search-sequences	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:07:15.157+02:00	TYPING-search-sequencest	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:07:15.300+02:00	TYPING-search-sequencestre	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:07:18.660+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Sequence_Stream_23open.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:07:22.085+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:07:22.338+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:07:26.510+02:00	READY	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:07:30.212+02:00	READY	http://docs.seqan.de/seqan/dev2/files/ENUM_Sequence_Stream_5ccolon_5ccolon_Operation_Mode.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:07:33.638+02:00	READY	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:10:21.676+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:10:21.685+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:24:14.987+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:24:15.159+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:25:16.962+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:25:24.783+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:25:24.784+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:25:25.854+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Sequence_Stream_23read_All.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:25:27.906+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:25:30.112+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:25:30.317+02:00	READY	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:25:37.312+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:26:56.262+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:26:56.268+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:26:59.022+02:00	TYPING-search-re	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:26:59.072+02:00	TYPING-search-rea	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:26:59.176+02:00	TYPING-search-read	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:27:04.174+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:27:07.023+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.read.html	160.45.111.85	-	0	16	975	683
2013-05-17T09:27:09.098+02:00	READY	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Sequence_Stream_23_Sequence_Stream.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:27:31.147+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:27:33.768+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-17T09:27:34.158+02:00	FOCUS	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-17T09:27:34.160+02:00	FOCUS	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-17T09:27:36.505+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1276	683
2013-05-17T09:27:36.589+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1276	683
2013-05-17T09:27:37.039+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1276	683
2013-05-17T09:27:41.089+02:00	READY	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	0	1276	683
2013-05-17T09:27:41.995+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	488	1276	683
2013-05-17T09:27:46.540+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	4487	1276	683
2013-05-17T09:27:46.814+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	4487	1276	683
2013-05-17T09:27:49.379+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	0	1276	683
2013-05-17T09:27:54.748+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	5590	1276	683
2013-05-17T09:28:12.671+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	5590	1276	683
2013-05-17T09:28:13.714+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	5590	1276	683
2013-05-17T09:28:14.051+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:28:15.240+02:00	TYPING-search-addOption	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:28:18.379+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Argument_Parser_23add_Option.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:28:20.168+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T09:28:20.421+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Arg_Parse_Option.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:28:23.152+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Arg_Parse_Option.html	160.45.111.85	-	0	186	975	683
2013-05-17T09:28:23.511+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION_Argument_Parser_23add_Option.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:28:26.575+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Arg_Parse_Option.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:28:29.452+02:00	READY	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	160.45.111.85	-	0	0	975	683
2013-05-17T09:28:33.654+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	160.45.111.85	-	0	76	975	683
2013-05-17T09:30:40.346+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	160.45.111.85	-	0	76	975	683
2013-05-17T09:30:40.357+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	160.45.111.85	-	0	76	975	683
2013-05-17T09:34:16.702+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	160.45.111.85	-	0	76	975	683
2013-05-17T09:34:18.627+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	160.45.111.85	-	0	76	975	683
2013-05-17T10:59:18.928+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	975	683
2013-05-17T10:59:19.047+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T10:59:19.118+02:00	TYPING-search-getKmerSimilarityMatrix	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T10:59:19.380+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	87.77.216.245	-	0	0	975	683
2013-05-17T10:59:22.157+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	87.77.216.245	-	0	52	975	683
2013-05-17T10:59:28.589+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T10:59:28.592+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	87.77.216.245	-	0	52	975	683
2013-05-17T11:00:27.794+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	87.77.216.245	-	0	0	975	683
2013-05-17T11:00:30.504+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	87.77.216.245	-	0	327	975	683
2013-05-17T11:00:32.569+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	87.77.216.245	-	0	52	975	683
2013-05-17T11:00:32.619+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T11:00:33.300+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	87.77.216.245	-	0	1274	975	683
2013-05-17T11:00:33.347+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T11:00:36.395+02:00	TYPING-search-getKmerSimilarityMatrix	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T11:00:36.559+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	87.77.216.245	-	0	1275	975	683
2013-05-17T11:00:57.538+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T11:01:00.145+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	87.77.216.245	-	0	0	975	683
2013-05-17T11:01:00.195+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T11:01:00.457+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T11:01:00.502+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T11:01:00.538+02:00	TYPING-search-	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T11:01:01.975+02:00	TYPING-search-getKmerSimilarityMatrix	http://docs.seqan.de/seqan/dev2/panel/index.html	87.77.216.245	-	0	0	300	683
2013-05-17T11:01:04.011+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	87.77.216.245	-	0	0	975	683
2013-05-17T11:01:06.545+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	87.77.216.245	-	0	78	975	683
2013-05-17T11:16:37.048+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	87.77.216.245	-	0	76	975	683
2013-05-17T11:16:39.093+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	87.77.216.245	-	0	76	975	683
2013-05-17T11:16:39.095+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	87.77.216.245	-	0	76	975	683
2013-05-17T11:06:59.313+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	87.77.216.245	-	0	78	975	683
2013-05-17T11:17:11.521+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	87.77.216.245	-	0	76	975	683
2013-05-17T11:17:11.686+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	87.77.216.245	-	0	76	975	683
2013-05-17T12:32:54.893+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:32:55.249+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:32:56.045+02:00	TYPING-search-g	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:32:56.238+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:32:56.552+02:00	TYPING-search-getk	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:32:56.638+02:00	TYPING-search-getkm	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:32:56.817+02:00	TYPING-search-getkma	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:32:58.284+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:32:58.992+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:32:58.989+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:32:59.422+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:33:02.654+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-17T12:33:05.883+02:00	READY	http://trac.seqan.de/search	160.45.111.85	-	0	0	1276	683
2013-05-17T12:33:06.385+02:00	TYPING-q-getKmerSimilarityMatrix	http://trac.seqan.de/search	160.45.111.85	-	0	0	1276	683
2013-05-17T12:33:10.185+02:00	READY	http://trac.seqan.de/search?q=getKmerSimilarityMatrix&wiki=on&noquickjump=1	160.45.111.85	-	0	0	1276	683
2013-05-17T12:33:13.492+02:00	READY	http://trac.seqan.de/search?q=getKmerSimilarityMatrix&wiki=on&noquickjump=1	160.45.111.85	-	0	0	1276	683
2013-05-17T12:33:14.177+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:33:17.663+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:33:31.917+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:33:31.926+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:36:35.850+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:36:39.993+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:36:39.993+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:37:06.405+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:37:09.931+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:37:09.932+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:37:10.514+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:37:10.792+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:37:10.793+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:38:55.415+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:38:58.492+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:38:58.493+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:38:58.891+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:42:10.210+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:42:12.296+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:42:12.298+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:42:14.325+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:42:16.102+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:42:35.246+02:00	READY	http://docs.seqan.de/seqan/dev2/files/index.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:42:35.947+02:00	READY	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:36.330+02:00	TYPING-search-indexCountsDir	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:37.952+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.index_Counts_Dir.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:42:42.301+02:00	TYPING-search-g	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:42.485+02:00	TYPING-search-get	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:42.744+02:00	TYPING-search-getF	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:42.834+02:00	TYPING-search-getFir	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:43.201+02:00	TYPING-search-getFirb	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:43.314+02:00	TYPING-search-getFirbe	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:43.723+02:00	TYPING-search-getFirb	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:43.957+02:00	TYPING-search-getFir	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:44.179+02:00	TYPING-search-getFirb	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:44.267+02:00	TYPING-search-getFirbe	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:45.106+02:00	TYPING-search-getFirb	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:45.246+02:00	TYPING-search-getFir	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:45.389+02:00	TYPING-search-getFi	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:45.570+02:00	TYPING-search-getFib	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:45.842+02:00	TYPING-search-getFibe	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:42:47.541+02:00	READY	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Fibre.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:42:52.084+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Fibre.html	160.45.111.85	-	0	83	975	683
2013-05-17T12:43:01.567+02:00	BLUR	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T12:43:01.802+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Fibre.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:43:04.646+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Fibre.html	160.45.111.85	-	0	75	975	683
2013-05-17T12:43:20.120+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Fibre.html	160.45.111.85	-	0	75	975	683
2013-05-17T12:43:20.123+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Fibre.html	160.45.111.85	-	0	75	975	683
2013-05-17T12:46:37.568+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Fibre.html	160.45.111.85	-	0	75	975	683
2013-05-17T12:46:39.766+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:46:42.629+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	160.45.111.85	-	0	167	975	683
2013-05-17T12:46:43.617+02:00	READY	http://docs.seqan.de/seqan/dev2/files/METAFUNCTION_Spec.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:46:44.160+02:00	READY	http://docs.seqan.de/seqan/dev2/files/CLASS_Index.html	160.45.111.85	-	0	167	975	683
2013-05-17T12:46:46.182+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:46:48.947+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:46:48.949+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:46:52.118+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:46:53.868+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:46:53.869+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:46:56.094+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:47:01.075+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	107	975	683
2013-05-17T12:47:04.680+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	107	975	683
2013-05-17T12:47:04.680+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	107	975	683
2013-05-17T12:47:07.099+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	107	975	683
2013-05-17T12:47:11.922+02:00	READY	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:47:14.859+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/SPEC_Index_Q_Gram.html	160.45.111.85	-	0	261	975	683
2013-05-17T12:47:21.754+02:00	READY	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:47:24.110+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	34	975	683
2013-05-17T12:47:29.490+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	559	975	683
2013-05-17T12:47:49.080+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	559	975	683
2013-05-17T12:47:53.228+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-17T12:47:54.727+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1276	683
2013-05-17T12:47:57.132+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	0	1276	683
2013-05-17T12:47:59.644+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	963	1276	683
2013-05-17T12:48:02.362+02:00	READY	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	0	1276	683
2013-05-17T12:48:02.802+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	0	1276	683
2013-05-17T12:48:10.011+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/Indices	160.45.111.85	-	0	445	1276	683
2013-05-17T12:48:13.415+02:00	READY	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	963	1276	683
2013-05-17T12:48:14.074+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial	160.45.111.85	-	0	963	1276	683
2013-05-17T12:48:17.836+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	0	1276	683
2013-05-17T12:48:17.944+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	0	1276	683
2013-05-17T12:48:18.217+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	447	1276	683
2013-05-17T12:48:20.730+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching	160.45.111.85	-	0	3746	1276	683
2013-05-17T12:48:23.243+02:00	READY	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	198	1276	683
2013-05-17T12:48:23.680+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	193	1276	683
2013-05-17T12:48:27.219+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T12:48:28.052+02:00	SCROLL	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T12:48:28.966+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T12:48:28.967+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T12:49:09.190+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T12:49:10.369+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T12:49:10.374+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	559	975	683
2013-05-17T12:49:10.482+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:10.480+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	559	975	683
2013-05-17T12:49:21.738+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:21.740+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:24.275+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:25.215+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:25.216+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:26.783+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:28.089+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:28.090+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:30.422+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:31.282+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:31.283+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:35.151+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:37.023+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:37.025+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:39.336+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:39.959+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:39.957+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:44.067+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:44.574+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:49:44.575+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:59:03.216+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	0	975	683
2013-05-17T12:59:05.953+02:00	SCROLL	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T12:59:51.486+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T12:59:51.487+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:05:50.370+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:05:51.745+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:05:52.419+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:05:52.759+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:05:53.066+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:05:53.265+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:05:53.684+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:05:53.826+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:05:53.830+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	5590	1276	683
2013-05-17T13:05:54.026+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	5590	1276	683
2013-05-17T13:05:54.364+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	160.45.111.85	-	0	76	975	683
2013-05-17T13:05:54.698+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	160.45.111.85	-	0	76	975	683
2013-05-17T13:05:54.700+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:05:55.120+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:05:55.124+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	559	975	683
2013-05-17T13:05:55.512+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	559	975	683
2013-05-17T13:05:55.515+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:05:55.873+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:28:35.104+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:28:35.476+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:36:53.955+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:36:54.289+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:39:11.016+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:39:11.508+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:39:11.512+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	559	975	683
2013-05-17T13:39:12.014+02:00	BLUR	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	559	975	683
2013-05-17T13:39:12.017+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:39:12.158+02:00	BLUR	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:39:53.287+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/PatternMatching/Assignment3	160.45.111.85	-	0	68	1276	683
2013-05-17T13:39:53.989+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/TAG_Q_Gram+_Index+_Fibres.html	160.45.111.85	-	0	559	975	683
2013-05-17T13:39:54.325+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T13:39:54.344+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:39:54.837+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T13:39:55.223+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/FUNCTION.get_Kmer_Similarity_Matrix.html	160.45.111.85	-	0	78	975	683
2013-05-17T13:39:55.533+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-17T13:39:55.551+02:00	FOCUS	http://trac.seqan.de/wiki/Tutorial/ParsingCommandLineArguments	160.45.111.85	-	0	5590	1276	683
2013-05-17T13:39:56.004+02:00	FOCUS	http://docs.seqan.de/seqan/dev2/files/MEMFUNC_Arg_Parse_Option_23_Arg_Parse_Option.html	160.45.111.85	-	0	76	975	683
2013-05-17T13:39:56.172+02:00	UNLOAD	http://docs.seqan.de/seqan/dev2/panel/index.html	160.45.111.85	-	0	0	300	683
2013-05-22T13:09:30.580+02:00	READY	http://trac.seqan.de/	160.45.111.85	-	0	0	1276	683
2013-05-22T13:09:32.985+02:00	READY	http://trac.seqan.de/browser	160.45.111.85	-	0	0	1276	683
2013-05-22T13:09:35.136+02:00	READY	http://trac.seqan.de/browser/trunk	160.45.111.85	-	0	0	1276	683
2013-05-22T13:09:38.725+02:00	READY	http://trac.seqan.de/timeline	160.45.111.85	-	0	0	1276	683
2013-05-22T13:09:41.354+02:00	SCROLL	http://trac.seqan.de/timeline	160.45.111.85	-	0	70	1276	683
2013-05-22T13:09:53.421+02:00	READY	http://trac.seqan.de/timeline?update=Update&repo-=on&daysback=30&from=05%2F22%2F13&changeset=on	160.45.111.85	-	0	0	1276	683
2013-05-22T13:09:55.983+02:00	SCROLL	http://trac.seqan.de/timeline?update=Update&repo-=on&daysback=30&from=05%2F22%2F13&changeset=on	160.45.111.85	-	0	47	1276	683
2013-05-22T13:13:44.983+02:00	BLUR	http://trac.seqan.de/timeline?update=Update&repo-=on&daysback=30&from=05%2F22%2F13&changeset=on	160.45.111.85	-	0	47	1276	683
2013-05-22T13:41:33.282+02:00	FOCUS	http://trac.seqan.de/timeline?update=Update&repo-=on&daysback=30&from=05%2F22%2F13&changeset=on	160.45.111.85	-	0	47	1276	639

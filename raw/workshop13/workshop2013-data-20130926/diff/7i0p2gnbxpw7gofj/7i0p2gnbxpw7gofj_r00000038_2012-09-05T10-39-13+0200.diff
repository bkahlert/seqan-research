diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/7i0p2gnbxpw7gofj_stats.txt -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata/7i0p2gnbxpw7gofj_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/alignment/CMakeLists.txt ./sandbox/my_sandbox/apps/alignment/CMakeLists.txt
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/alignment/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/apps/alignment/CMakeLists.txt	2012-09-05 10:37:21.000000000 +0200
@@ -0,0 +1,5 @@
+cmake_minimum_required (VERSION 2.6)
+project (sandbox_my_sandbox_apps_alignment)
+
+# Update the list of file names below if you add source files to your application.
+seqan_add_executable(alignment alignment.cpp)
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/7i0p2gnbxpw7gofj_stats.txt -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata/7i0p2gnbxpw7gofj_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/alignment/INFO ./sandbox/my_sandbox/apps/alignment/INFO
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/alignment/INFO	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/apps/alignment/INFO	2012-09-05 10:37:21.000000000 +0200
@@ -0,0 +1,21 @@
+Name: alignment
+Author: Your Name <your.email@example.net>
+Maintainer: Your Name <your.email@example.net>
+License: GPL v3
+Copyright: 2008-2012, FU Berlin
+Status: under development
+Description: One-line description for app alignment.
+ This is the long text description for the app.  You should wrap text to 78
+ characters and you have to wrap it to 80 characters.  The lines must have one
+ leading space.  Successive lines in this format will be word-wrapped when
+ displayed.  Leading space is stripped off.
+ .
+ Use empty lines with one dot to insert an empty line / break paragraphs.
+ .
+  Start lines with two spaces to make them display verbatim.  Lines that
+  cannot be displayed horizontally will be hard-wrapped (not at word bor-
+  ders), so maybe do your own hyphenation.
+ .
+ Do not use tab characters, their effect is not predictable.
+ .
+ The INFO file format is oriented after the Debian controfields format.
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/7i0p2gnbxpw7gofj_stats.txt -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata/7i0p2gnbxpw7gofj_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/alignment/alignment.cpp ./sandbox/my_sandbox/apps/alignment/alignment.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/alignment/alignment.cpp	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/apps/alignment/alignment.cpp	2012-09-05 10:37:21.000000000 +0200
@@ -0,0 +1,150 @@
+// ==========================================================================
+//                                 alignment
+// ==========================================================================
+// Copyright (c) 2006-2012, Knut Reinert, FU Berlin
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright
+//       notice, this list of conditions and the following disclaimer.
+//     * Redistributions in binary form must reproduce the above copyright
+//       notice, this list of conditions and the following disclaimer in the
+//       documentation and/or other materials provided with the distribution.
+//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
+//       its contributors may be used to endorse or promote products derived
+//       from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+// DAMAGE.
+//
+// ==========================================================================
+// Author: Your Name <your.email@example.net>
+// ==========================================================================
+
+#include <seqan/basic.h>
+#include <seqan/sequence.h>
+
+#include <seqan/arg_parse.h>
+
+// ==========================================================================
+// Classes
+// ==========================================================================
+
+// --------------------------------------------------------------------------
+// Class AppOptions
+// --------------------------------------------------------------------------
+
+// This struct stores the options from the command line.
+//
+// You might want to rename this to reflect the name of your app.
+
+struct AppOptions
+{
+    // Verbosity level.  0 -- quiet, 1 -- normal, 2 -- verbose, 3 -- very verbose.
+    int verbosity;
+
+    // The first (and only) argument of the program is stored here.
+    seqan::CharString text;
+
+    AppOptions() :
+        verbosity(1)
+    {}
+};
+
+// ==========================================================================
+// Functions
+// ==========================================================================
+
+// --------------------------------------------------------------------------
+// Function parseCommandLine()
+// --------------------------------------------------------------------------
+
+seqan::ArgumentParser::ParseResult
+parseCommandLine(AppOptions & options, int argc, char const ** argv)
+{
+    // Setup ArgumentParser.
+    seqan::ArgumentParser parser("alignment");
+    // Set short description, version, and date.
+    setShortDescription(parser, "Put a Short Description Here");
+    setVersion(parser, "0.1");
+    setDate(parser, "July 2012");
+
+    // Define usage line and long description.
+    addUsageLine(parser, "[\\fIOPTIONS\\fP] \"\\fITEXT\\fP\"");
+    addDescription(parser, "This is the application skelleton and you should modify this string.");
+
+    // We require one argument.
+    addArgument(parser, seqan::ArgParseArgument(seqan::ArgParseArgument::STRING, "TEXT"));
+
+    addOption(parser, seqan::ArgParseOption("q", "quiet", "Set verbosity to a minimum."));
+    addOption(parser, seqan::ArgParseOption("v", "verbose", "Enable verbose output."));
+    addOption(parser, seqan::ArgParseOption("vv", "very-verbose", "Enable very verbose output."));
+
+    // Add Examples Section.
+    addTextSection(parser, "Examples");
+    addListItem(parser, "\\fBalignment\\fP \\fB-v\\fP \\fItext\\fP",
+                "Call with \\fITEXT\\fP set to \"text\" with verbose output.");
+
+    // Parse command line.
+    seqan::ArgumentParser::ParseResult res = seqan::parse(parser, argc, argv);
+
+    // Only extract  options if the program will continue after parseCommandLine()
+    if (res != seqan::ArgumentParser::PARSE_OK)
+        return res;
+
+    // Extract option values.
+    if (isSet(parser, "quiet"))
+        options.verbosity = 0;
+    if (isSet(parser, "verbose"))
+        options.verbosity = 2;
+    if (isSet(parser, "very-verbose"))
+        options.verbosity = 3;
+    seqan::getArgumentValue(options.text, parser, 0);
+
+    return seqan::ArgumentParser::PARSE_OK;
+}
+
+// --------------------------------------------------------------------------
+// Function main()
+// --------------------------------------------------------------------------
+
+// Program entry point.
+
+int main(int argc, char const ** argv)
+{
+    // Parse the command line.
+    seqan::ArgumentParser parser;
+    AppOptions options;
+    seqan::ArgumentParser::ParseResult res = parseCommandLine(options, argc, argv);
+
+    // If there was an error parsing or built-in argument parser functionality
+    // was triggered then we exit the program.  The return code is 1 if there
+    // were errors and 0 if there were none.
+    if (res != seqan::ArgumentParser::PARSE_OK)
+        return res == seqan::ArgumentParser::PARSE_ERROR;
+
+    std::cout << "EXAMPLE PROGRAM\n"
+              << "===============\n\n";
+    
+    // Print the command line arguments back to the user.
+    if (options.verbosity > 0)
+    {
+        std::cout << "__OPTIONS____________________________________________________________________\n"
+                  << '\n'
+                  << "VERBOSITY\t" << options.verbosity << '\n'
+                  << "TEXT     \t" << options.text << "\n\n";
+    }
+
+    return 0;
+}
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/7i0p2gnbxpw7gofj_stats.txt -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata/7i0p2gnbxpw7gofj_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /Users/fjribeiro/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/app2/#app2.stl.cpp# ./sandbox/my_sandbox/apps/app2/#app2.stl.cpp#
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/app2/#app2.stl.cpp#	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/my_sandbox/apps/app2/#app2.stl.cpp#	2012-09-04 21:53:15.000000000 +0200
@@ -0,0 +1,111 @@
+#include <iostream>
+#include <seqan/sequence.h>
+#include <seqan/file.h>
+
+using namespace seqan;
+
+
+// Function to print simple alignment between two sequences with the same length
+template <typename TText1, typename TText2>
+void printAlign(TText1 const & genomeFragment, TText2 const & read)
+{
+        std::cout <<  "Alignment " << std::endl;
+        std::cout << "  genome : " << genomeFragment << std::endl;
+        std::cout << "  read   : " << read << std::endl;
+}
+
+
+int main(int, char const **)
+{
+    // Build reads and genomes
+    DnaString chr1 = "TATAATATTGCTATCGCGATATCGCTAGCTAGCTACGGATTATGCGCTCTGCGATATATCGCGCTAGATGTGCAGCTCGATCGAATGCACGTGTGTGCGATCGATTAGCGTCGATCATCGATCTATATTAGCGCGCGGTATCGGACGATCATATTAGCGGTCTAGCATTTAG";
+    // Build List containing all reads
+    typedef String<DnaString> TDnaList;
+    TDnaList readList(4);
+    readList[0] = "TTGCTATCGCGATATCGCTAGCTAGCTACGGATTATGCGCTCTGCGATATATCGCGCT";
+    readList[1] = "TCGATTAGCGTCGATCATCGATCTATATTAGCGCGCGGTATCGGACGATCATATTAGCGGTCTAGCATT";
+    readList[2] = "AGCCTGCGTACGTTGCAGTGCGTGCGTAGACTGTTGCAAGCCGGGGGTTCATGTGCGCTGAAGCACACATGCACA";
+    readList[3] = "CGTGCACTGCTGACGTCGTGGTTGTCACATCGTCGTGCGTGCGTACTGCTGCTGACA";
+
+    // Append a second chromosome sequence fragment to chr1
+    DnaString chr2 = "AGCCTGCGTACGTTGCAGTGCGTGCGTAGACTGTTGCAAGCCGGGGGTTCATGTGCGCTGAAGCACACATGCACACGTCTCTGTGTTCCGACGTGTGTCACGTGCACTGCTGACGTCGTGGTTGTCACATCGTCGTGCGTGCGTACTGCTGCTGACACATGCTGCTG";
+    chr1.append(chr2);
+
+    // Print readlist
+    std::cout << "\n Read list: " << std::endl;
+    for(unsigned i = 0; i < readList.size(); ++i)
+        std::cout << readList[i] << std::endl;
+
+
+    // Assume we have mapped the 4 reads to chr1 (and chr2) and now have the mapping start positions (no gaps).
+    // Store the start position in a String alignPosList: 7, 100, 172, 272
+    String<unsigned> alignPosList(4);
+    alignPosList[0] = 7;
+    alignPosList[1] = 100;
+    alignPosList[2] = 172;
+    alignPosList[3] = 272;
+
+
+    // Print alignments using Segment
+    std::cout << " \n Print alignment using Segment: " << std::endl;
+    for (unsigned i = 0; i < readList.size(); ++i)
+    {
+        // Temporary copy of begin and end position (beginPosition) from alignPosList
+        // of a given alignment between the read and the genome
+        unsigned beginPosition = alignPosList[i];
+        unsigned endPosition = beginPosition + readList[i].size();
+        // Build infix
+        Infix<DnaString> genomeFragment = infix(chr1, beginPosition, endPosition);
+        // Call of our function to print the simple alignment
+        printAlign(genomeFragment, readList[i]);
+    }
+
+
+
+    // Iterators :)
+    // Print alignments using Iterators: Do the same as above, but use Iterators to iterate over the read list.
+    // First, use Standard Iterators.
+
+    std::cout << " \n Print alignment using Standard Iterators: " << std::endl;
+    for (unsigned i = 0, TDnaList::const_iterator it = readList.begin();
+	 it != readList.end(); ++it, ++i) {
+      // Temporary copy of begin and end position (beginPosition) from alignPosList
+      // of a given alignment between the read and the genome
+
+        unsigned beginPosition = alignPosList[i];
+        unsigned endPosition = beginPosition + it->size();
+        // Build Infix
+        Infix<DnaString> genomeFragment = infix(chr1, beginPosition, endPosition);
+        // Call of our function to print the simple alignment
+        printAlign(genomeFragment, *it);
+    }
+    // Now, use Rooted Iterators.
+    Iterator<TDnaList, Rooted>::Type it2 = begin(readList);
+    std::cout << " \n Print alignment using Rooted Iterators: " << std::endl;
+    for(; !atEnd(it2); goNext(it2))
+    {
+        int i = position(it2);
+        // Temporary copy of begin and end position (beginPosition) from alignPosList
+        // of a given alignment between the read and the genome
+        unsigned beginPosition = alignPosList[i];
+        unsigned endPosition = beginPosition + length(value(it2));
+        // Build Infix
+        Infix<DnaString>::Type genomeFragment = infix(chr1, beginPosition, endPosition);
+        // Call of our function to print the simple alignment
+        printAlign(genomeFragment, value(it2));
+    }
+    // StringSets
+    // Build StringSet of readList: Build a StringSet of DnaQString and append the reads from readList.
+    // Reuse the Rooted Iterator from above.
+    typedef StringSet<DnaString> TDnaListSet;
+    TDnaListSet readStringSet;
+    goBegin(it2);
+    for(; !atEnd(it2); goNext(it2))
+        appendValue(readStringSet, value(it2));
+    // Iterate over StringSet
+    Iterator<TDnaListSet, Rooted>::Type it3 = begin(readStringSet);
+    std::cout << " \n Print alignment using Rooted Iterators: " << std::endl;
+    for(; !atEnd(it3); goNext(it3))
+        std::cout << value(it3) << std::endl;
+    return 1;
+}

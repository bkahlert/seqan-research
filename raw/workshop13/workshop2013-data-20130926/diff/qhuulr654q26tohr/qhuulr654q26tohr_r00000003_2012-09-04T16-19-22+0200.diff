diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_test/ws_test.cpp ./sandbox/robinson/apps/ws_test/ws_test.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_test/ws_test.cpp	2012-09-04 16:16:43.000000000 +0200
+++ ./sandbox/robinson/apps/ws_test/ws_test.cpp	2012-09-04 16:19:18.573892630 +0200
@@ -8,73 +8,68 @@
 // define used types
 typedef FragmentStore<> TStore;
 // define options
-struct Options
-{
-    std::string annotationFileName;
-    std::string alignmentFileName;
+struct Options {
+	std::string annotationFileName;
+	std::string alignmentFileName;
 };
 //
 // 1. Parse command line and fill Options object
 //
-ArgumentParser::ParseResult parseOptions(Options & options, int argc, char const * argv[])
-{
-    ArgumentParser parser("gene_quant");
-    setShortDescription(parser, "A simple gene quantification tool");
-    setVersion(parser, "1.0");
-    setDate(parser, "Sep 2012");
-    addArgument(parser, ArgParseArgument(ArgParseArgument::INPUTFILE));
-    addArgument(parser, ArgParseArgument(ArgParseArgument::INPUTFILE));
-    addUsageLine(parser, "[\\fIOPTIONS\\fP] <\\fIANNOTATION FILE\\fP> <\\fIREAD ALIGNMENT FILE\\fP>");
-    // Parse command line
-    ArgumentParser::ParseResult res = parse(parser, argc, argv);
-    if (res == ArgumentParser::PARSE_OK)
-    {
-        // Extract option values
-        getArgumentValue(options.annotationFileName, parser, 0);
-        getArgumentValue(options.alignmentFileName, parser, 1);
-    }
-    return res;
+ArgumentParser::ParseResult parseOptions(Options & options, int argc,
+		char const * argv[]) {
+	ArgumentParser parser("gene_quant");
+	setShortDescription(parser, "A simple gene quantification tool");
+	setVersion(parser, "1.0");
+	setDate(parser, "Sep 2012");
+	addArgument(parser, ArgParseArgument(ArgParseArgument::INPUTFILE));
+	addArgument(parser, ArgParseArgument(ArgParseArgument::INPUTFILE));
+	addUsageLine(parser,
+			"[\\fIOPTIONS\\fP] <\\fIANNOTATION FILE\\fP> <\\fIREAD ALIGNMENT FILE\\fP>");
+	// Parse command line
+	ArgumentParser::ParseResult res = parse(parser, argc, argv);
+	if (res == ArgumentParser::PARSE_OK) {
+		// Extract option values
+		getArgumentValue(options.annotationFileName, parser, 0);
+		getArgumentValue(options.alignmentFileName, parser, 1);
+	}
+	return res;
 }
 //
 // 2. Load annotations and alignments from files
 //
-bool loadFiles(TStore & store, Options const & options)
-{
+bool loadFiles(TStore & store, Options const & options) {
 	//
 	// 2. Load annotations and alignments from files
 	//
-	bool loadFiles(TStore & store, Options const & options)
-	{
-	    std::ifstream alignmentFile(options.alignmentFileName.c_str());
-	    if (!alignmentFile.good())
-	    {
-	        std::cerr << "Couldn't open alignment file " << options.alignmentFileName << std::endl;
-	        return false;
-	    }
-	    std::cerr << "Loading read alignments ..... " << std::flush;
-	    read(alignmentFile, store, Sam());
-	    std::cerr << "[" << length(store.alignedReadStore) << "]" << std::endl;
-	    // load annotations
-	    std::ifstream annotationFile(options.annotationFileName.c_str());
-	    if (!annotationFile.good())
-	    {
-	        std::cerr << "Couldn't open annotation file" << options.annotationFileName << std::endl;
-	        return false;
-	    }
-	    std::cerr << "Loading genome annotation ... " << std::flush;
-	    read(annotationFile, store, Gtf());
-	    std::cerr << "[" << length(store.annotationStore) << "]" << std::endl;
-	    return true;
+	std::ifstream alignmentFile(options.alignmentFileName.c_str());
+	if (!alignmentFile.good()) {
+		std::cerr << "Couldn't open alignment file "
+				<< options.alignmentFileName << std::endl;
+		return false;
+	}
+	std::cerr << "Loading read alignments ..... " << std::flush;
+	read(alignmentFile, store, Sam());
+	std::cerr << "[" << length(store.alignedReadStore) << "]" << std::endl;
+	// load annotations
+	std::ifstream annotationFile(options.annotationFileName.c_str());
+	if (!annotationFile.good()) {
+		std::cerr << "Couldn't open annotation file"
+				<< options.annotationFileName << std::endl;
+		return false;
 	}
+	std::cerr << "Loading genome annotation ... " << std::flush;
+	read(annotationFile, store, Gtf());
+	std::cerr << "[" << length(store.annotationStore) << "]" << std::endl;
+	return true;
 }
-int main(int argc, char const * argv[])
-{
-    Options options;
-    TStore store;
-    ArgumentParser::ParseResult res = parseOptions(options, argc, argv);
-    if (res != ArgumentParser::PARSE_OK)
-        return res == ArgumentParser::PARSE_ERROR;
-    if (!loadFiles(store, options))
-        return 1;
-    return 0;
+
+int main(int argc, char const * argv[]) {
+	Options options;
+	TStore store;
+	ArgumentParser::ParseResult res = parseOptions(options, argc, argv);
+	if (res != ArgumentParser::PARSE_OK)
+		return res == ArgumentParser::PARSE_ERROR;
+	if (!loadFiles(store, options))
+		return 1;
+	return 0;
 }

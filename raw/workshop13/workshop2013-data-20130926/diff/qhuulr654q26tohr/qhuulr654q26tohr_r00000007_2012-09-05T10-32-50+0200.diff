diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_ind/CMakeLists.txt ./sandbox/robinson/apps/ws_ind/CMakeLists.txt
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_ind/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/robinson/apps/ws_ind/CMakeLists.txt	2012-09-05 10:32:36.088995511 +0200
@@ -0,0 +1,5 @@
+cmake_minimum_required (VERSION 2.6)
+project (sandbox_robinson_apps_ws_ind)
+
+# Update the list of file names below if you add source files to your application.
+seqan_add_executable(ws_ind ws_ind.cpp)
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_ind/INFO ./sandbox/robinson/apps/ws_ind/INFO
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_ind/INFO	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/robinson/apps/ws_ind/INFO	2012-09-05 10:32:36.088995511 +0200
@@ -0,0 +1,21 @@
+Name: ws_ind
+Author: Your Name <your.email@example.net>
+Maintainer: Your Name <your.email@example.net>
+License: GPL v3
+Copyright: 2008-2012, FU Berlin
+Status: under development
+Description: One-line description for app ws_ind.
+ This is the long text description for the app.  You should wrap text to 78
+ characters and you have to wrap it to 80 characters.  The lines must have one
+ leading space.  Successive lines in this format will be word-wrapped when
+ displayed.  Leading space is stripped off.
+ .
+ Use empty lines with one dot to insert an empty line / break paragraphs.
+ .
+  Start lines with two spaces to make them display verbatim.  Lines that
+  cannot be displayed horizontally will be hard-wrapped (not at word bor-
+  ders), so maybe do your own hyphenation.
+ .
+ Do not use tab characters, their effect is not predictable.
+ .
+ The INFO file format is oriented after the Debian controfields format.
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_ind/ws_ind.cpp ./sandbox/robinson/apps/ws_ind/ws_ind.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_ind/ws_ind.cpp	1970-01-01 01:00:00.000000000 +0100
+++ ./sandbox/robinson/apps/ws_ind/ws_ind.cpp	2012-09-05 10:32:36.088995511 +0200
@@ -0,0 +1,150 @@
+// ==========================================================================
+//                                   ws_ind
+// ==========================================================================
+// Copyright (c) 2006-2012, Knut Reinert, FU Berlin
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are met:
+//
+//     * Redistributions of source code must retain the above copyright
+//       notice, this list of conditions and the following disclaimer.
+//     * Redistributions in binary form must reproduce the above copyright
+//       notice, this list of conditions and the following disclaimer in the
+//       documentation and/or other materials provided with the distribution.
+//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
+//       its contributors may be used to endorse or promote products derived
+//       from this software without specific prior written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
+// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+// DAMAGE.
+//
+// ==========================================================================
+// Author: Your Name <your.email@example.net>
+// ==========================================================================
+
+#include <seqan/basic.h>
+#include <seqan/sequence.h>
+
+#include <seqan/arg_parse.h>
+
+// ==========================================================================
+// Classes
+// ==========================================================================
+
+// --------------------------------------------------------------------------
+// Class AppOptions
+// --------------------------------------------------------------------------
+
+// This struct stores the options from the command line.
+//
+// You might want to rename this to reflect the name of your app.
+
+struct AppOptions
+{
+    // Verbosity level.  0 -- quiet, 1 -- normal, 2 -- verbose, 3 -- very verbose.
+    int verbosity;
+
+    // The first (and only) argument of the program is stored here.
+    seqan::CharString text;
+
+    AppOptions() :
+        verbosity(1)
+    {}
+};
+
+// ==========================================================================
+// Functions
+// ==========================================================================
+
+// --------------------------------------------------------------------------
+// Function parseCommandLine()
+// --------------------------------------------------------------------------
+
+seqan::ArgumentParser::ParseResult
+parseCommandLine(AppOptions & options, int argc, char const ** argv)
+{
+    // Setup ArgumentParser.
+    seqan::ArgumentParser parser("ws_ind");
+    // Set short description, version, and date.
+    setShortDescription(parser, "Put a Short Description Here");
+    setVersion(parser, "0.1");
+    setDate(parser, "July 2012");
+
+    // Define usage line and long description.
+    addUsageLine(parser, "[\\fIOPTIONS\\fP] \"\\fITEXT\\fP\"");
+    addDescription(parser, "This is the application skelleton and you should modify this string.");
+
+    // We require one argument.
+    addArgument(parser, seqan::ArgParseArgument(seqan::ArgParseArgument::STRING, "TEXT"));
+
+    addOption(parser, seqan::ArgParseOption("q", "quiet", "Set verbosity to a minimum."));
+    addOption(parser, seqan::ArgParseOption("v", "verbose", "Enable verbose output."));
+    addOption(parser, seqan::ArgParseOption("vv", "very-verbose", "Enable very verbose output."));
+
+    // Add Examples Section.
+    addTextSection(parser, "Examples");
+    addListItem(parser, "\\fBws_ind\\fP \\fB-v\\fP \\fItext\\fP",
+                "Call with \\fITEXT\\fP set to \"text\" with verbose output.");
+
+    // Parse command line.
+    seqan::ArgumentParser::ParseResult res = seqan::parse(parser, argc, argv);
+
+    // Only extract  options if the program will continue after parseCommandLine()
+    if (res != seqan::ArgumentParser::PARSE_OK)
+        return res;
+
+    // Extract option values.
+    if (isSet(parser, "quiet"))
+        options.verbosity = 0;
+    if (isSet(parser, "verbose"))
+        options.verbosity = 2;
+    if (isSet(parser, "very-verbose"))
+        options.verbosity = 3;
+    seqan::getArgumentValue(options.text, parser, 0);
+
+    return seqan::ArgumentParser::PARSE_OK;
+}
+
+// --------------------------------------------------------------------------
+// Function main()
+// --------------------------------------------------------------------------
+
+// Program entry point.
+
+int main(int argc, char const ** argv)
+{
+    // Parse the command line.
+    seqan::ArgumentParser parser;
+    AppOptions options;
+    seqan::ArgumentParser::ParseResult res = parseCommandLine(options, argc, argv);
+
+    // If there was an error parsing or built-in argument parser functionality
+    // was triggered then we exit the program.  The return code is 1 if there
+    // were errors and 0 if there were none.
+    if (res != seqan::ArgumentParser::PARSE_OK)
+        return res == seqan::ArgumentParser::PARSE_ERROR;
+
+    std::cout << "EXAMPLE PROGRAM\n"
+              << "===============\n\n";
+    
+    // Print the command line arguments back to the user.
+    if (options.verbosity > 0)
+    {
+        std::cout << "__OPTIONS____________________________________________________________________\n"
+                  << '\n'
+                  << "VERBOSITY\t" << options.verbosity << '\n'
+                  << "TEXT     \t" << options.text << "\n\n";
+    }
+
+    return 0;
+}
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata/qhuulr654q26tohr_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_test/ws_test.cpp ./sandbox/robinson/apps/ws_test/ws_test.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/robinson/apps/ws_test/ws_test.cpp	2012-09-04 17:05:07.000000000 +0200
+++ ./sandbox/robinson/apps/ws_test/ws_test.cpp	2012-09-04 17:14:00.727315226 +0200
@@ -6,141 +6,158 @@
 
 using namespace seqan;
 
+
 // FRAGMENT(definitions)
 // define used types
-typedef FragmentStore<> TStore;
-typedef Value<TStore::TAnnotationStore>::Type TAnnotation;
-typedef TAnnotation::TId TId;
-typedef TAnnotation::TId TPos;
-typedef IntervalAndCargo<TPos, TId> TInterval;
-typedef IntervalTree<TPos, TId> TIntervalTree;
+typedef FragmentStore<>                         TStore;
+typedef Value<TStore::TAnnotationStore>::Type   TAnnotation;
+typedef TAnnotation::TId                        TId;
+typedef TAnnotation::TId                        TPos;
+typedef IntervalAndCargo<TPos, TId>             TInterval;
+typedef IntervalTree<TPos, TId>                 TIntervalTree;
+typedef Value<TStore::TAlignedReadStore>::Type  TAlignedRead;
 // FRAGMENT(definitions_end)
 
 // define options
-struct Options {
-	std::string annotationFileName;
-	std::string alignmentFileName;
+struct Options
+{
+    std::string annotationFileName;
+    std::string alignmentFileName;
 };
 
+
 //
 // 1. Parse command line and fill Options object
 //
-ArgumentParser::ParseResult parseOptions(Options & options, int argc,
-		char const * argv[]) {
-	ArgumentParser parser("gene_quant");
-	setShortDescription(parser, "A simple gene quantification tool");
-	setVersion(parser, "1.0");
-	setDate(parser, "Sep 2012");
-
-	addArgument(parser, ArgParseArgument(ArgParseArgument::INPUTFILE));
-	addArgument(parser, ArgParseArgument(ArgParseArgument::INPUTFILE));
-	addUsageLine(parser,
-			"[\\fIOPTIONS\\fP] <\\fIANNOTATION FILE\\fP> <\\fIREAD ALIGNMENT FILE\\fP>");
-
-	// Parse command line
-	ArgumentParser::ParseResult res = parse(parser, argc, argv);
-
-	if (res == ArgumentParser::PARSE_OK) {
-		// Extract option values
-		getArgumentValue(options.annotationFileName, parser, 0);
-		getArgumentValue(options.alignmentFileName, parser, 1);
-	}
+ArgumentParser::ParseResult parseOptions(Options & options, int argc, char const * argv[])
+{
+    ArgumentParser parser("gene_quant");
+    setShortDescription(parser, "A simple gene quantification tool");
+    setVersion(parser, "1.0");
+    setDate(parser, "Sep 2012");
+
+    addArgument(parser, ArgParseArgument(ArgParseArgument::INPUTFILE));
+    addArgument(parser, ArgParseArgument(ArgParseArgument::INPUTFILE));
+    addUsageLine(parser, "[\\fIOPTIONS\\fP] <\\fIANNOTATION FILE\\fP> <\\fIREAD ALIGNMENT FILE\\fP>");
+
+    // Parse command line
+    ArgumentParser::ParseResult res = parse(parser, argc, argv);
+
+    if (res == ArgumentParser::PARSE_OK)
+    {
+        // Extract option values
+        getArgumentValue(options.annotationFileName, parser, 0);
+        getArgumentValue(options.alignmentFileName, parser, 1);
+    }
 
-	return res;
+    return res;
 }
 
+
 //
 // 2. Load annotations and alignments from files
 //
-bool loadFiles(TStore & store, Options const & options) {
-	std::ifstream alignmentFile(options.alignmentFileName.c_str());
-	if (!alignmentFile.good()) {
-		std::cerr << "Couldn't open alignment file "
-				<< options.alignmentFileName << std::endl;
-		return false;
-	}
-	std::cerr << "Loading read alignments ..... " << std::flush;
-	read(alignmentFile, store, Sam());
-	std::cerr << "[" << length(store.alignedReadStore) << "]" << std::endl;
-
-	// load annotations
-	std::ifstream annotationFile(options.annotationFileName.c_str());
-	if (!annotationFile.good()) {
-		std::cerr << "Couldn't open annotation file"
-				<< options.annotationFileName << std::endl;
-		return false;
-	}
-	std::cerr << "Loading genome annotation ... " << std::flush;
-	read(annotationFile, store, Gtf());
-	std::cerr << "[" << length(store.annotationStore) << "]" << std::endl;
+bool loadFiles(TStore & store, Options const & options)
+{
+    std::ifstream alignmentFile(options.alignmentFileName.c_str());
+    if (!alignmentFile.good())
+    {
+        std::cerr << "Couldn't open alignment file " << options.alignmentFileName << std::endl;
+        return false;
+    }
+    std::cerr << "Loading read alignments ..... " << std::flush;
+    read(alignmentFile, store, Sam());
+    std::cerr << "[" << length(store.alignedReadStore) << "]" << std::endl;
+
+    // load annotations
+    std::ifstream annotationFile(options.annotationFileName.c_str());
+    if (!annotationFile.good())
+    {
+        std::cerr << "Couldn't open annotation file" << options.annotationFileName << std::endl;
+        return false;
+    }
+    std::cerr << "Loading genome annotation ... " << std::flush;
+    read(annotationFile, store, Gtf());
+    std::cerr << "[" << length(store.annotationStore) << "]" << std::endl;
 
-	return true;
+    return true;
 }
 
 //
 // 3. Extract intervals from gene annotations (grouped by contigId)
 //
-void extractGeneIntervals(String<String<TInterval> > & intervals,
-		TStore const & store) {
-	// extract intervals from gene annotations (grouped by contigId)
-	resize(intervals, length(store.contigStore));
-
-	Iterator<TStore const, AnnotationTree<> >::Type it = begin(store,
-			AnnotationTree<> ());
-
-	if (!goDown(it))
-		return;
-
-	do {
-		SEQAN_ASSERT_EQ(getType(it), "gene");
-
-		TPos beginPos = getAnnotation(it).beginPos;
-		TPos endPos = getAnnotation(it).endPos;
-		TId contigId = getAnnotation(it).contigId;
-
-		if (beginPos > endPos)
-			std::swap(beginPos, endPos);
-
-		// insert forward-strand interval of the gene and its annotation id
-		appendValue(intervals[contigId], TInterval(beginPos, endPos, value(it)));
-	} while (goRight(it));
+void extractGeneIntervals(String<String<TInterval> > & intervals, TStore const & store)
+{
+    // extract intervals from gene annotations (grouped by contigId)
+    resize(intervals, length(store.contigStore));
+
+    Iterator<TStore const, AnnotationTree<> >::Type it = begin(store, AnnotationTree<>());
+
+    if (!goDown(it))
+        return;
+
+    do
+    {
+        SEQAN_ASSERT_EQ(getType(it), "gene");
+
+        TPos beginPos = getAnnotation(it).beginPos;
+        TPos endPos = getAnnotation(it).endPos;
+        TId contigId = getAnnotation(it).contigId;
+
+        if (beginPos > endPos)
+            std::swap(beginPos, endPos);
+
+        // insert forward-strand interval of the gene and its annotation id
+        appendValue(intervals[contigId], TInterval(beginPos, endPos, value(it)));
+    }
+    while (goRight(it));
 }
 
-// FRAGMENT(yourcode)
 //
 // 4. Construct interval trees
 //
-void constructIntervalTrees(String<TIntervalTree> & intervalTrees,
-		String<String<TInterval> > const & intervals) {
-	for (unsigned j = 0; j < length(intervals); ++j) {
-
-		for (unsigned i = 0; i < length(intervals[j]); ++i) {
-			addInterval(intervalTrees[j], intervals[j][i]);
-		}
-	}
+void constructIntervalTrees(String<TIntervalTree> & intervalTrees, String<String<TInterval> > const & intervals)
+{
+    resize(intervalTrees, length(intervals));
+
+    SEQAN_OMP_PRAGMA(parallel for)
+    for (unsigned i = 0; i < length(intervals); ++i)
+        createIntervalTree(intervalTrees[i], intervals[i]);
+}
+
+// FRAGMENT(yourcode)
+//
+// 5. Count reads per gene
+//
+void countReadsPerGene(String<unsigned> & readsPerGene, String<TIntervalTree> const & intervalTrees, TStore const & store)
+{
+    resize(readsPerGene, length(store.annotationStore), 0);
 
 }
 // FRAGMENT(yourcode_end)
 
-int main(int argc, char const * argv[]) {
-	Options options;
-	TStore store;
-	// FRAGMENT(main)
-	String < String<TInterval> > intervals;
-	String<TIntervalTree> intervalTrees;
-	// FRAGMENT(main_end)
-
-	ArgumentParser::ParseResult res = parseOptions(options, argc, argv);
-	if (res != ArgumentParser::PARSE_OK)
-		return res == ArgumentParser::PARSE_ERROR;
-
-	if (!loadFiles(store, options))
-		return 1;
-
-	// FRAGMENT(main2)
-	extractGeneIntervals(intervals, store);
-	constructIntervalTrees(intervalTrees, intervals);
-	// FRAGMENT(main2_end)
+int main(int argc, char const * argv[])
+{
+    Options options;
+    TStore store;
+    String<String<TInterval> > intervals;
+// FRAGMENT(main)
+    String<TIntervalTree> intervalTrees;
+    String<unsigned> readsPerGene;
+// FRAGMENT(main_end)
+
+    ArgumentParser::ParseResult res = parseOptions(options, argc, argv);
+    if (res != ArgumentParser::PARSE_OK)
+        return res == ArgumentParser::PARSE_ERROR;
+
+    if (!loadFiles(store, options))
+        return 1;
+
+// FRAGMENT(main2)
+    extractGeneIntervals(intervals, store);
+    constructIntervalTrees(intervalTrees, intervals);
+    countReadsPerGene(readsPerGene, intervalTrees, store);
+// FRAGMENT(main2_end)
 
-	return 0;
+    return 0;
 }

diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/first_app.cpp ./sandbox/my_sandbox/apps/first_app/first_app.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/first_app.cpp	2012-09-05 12:20:30.000000000 +0200
+++ ./sandbox/my_sandbox/apps/first_app/first_app.cpp	2012-09-05 13:52:12.731530604 +0200
@@ -1,45 +1,74 @@
 #include <seqan/sequence.h>
 #include <seqan/index.h>
 #include <iostream>
+#include <seqan/sequence_journaled.h>
+#include <seqan/journaled_set.h>
 
 using namespace std;
 using namespace seqan;
 
-int main()
+
+template <typename TString, typename TStream, typename TSpec>
+inline int
+loadAndJoin(StringSet<TString, Owner<JournaledSet> > & /*journalSet*/,
+            TStream & stream,
+            JoinConfig<TSpec> const & /*joinConfig*/)
 {
-//     String<char> text = "This is the first example";
-//     Index<String<char>, IndexEsa<> > index(text);
-// 
-//     String<Dna> genome= "TTATTAAGCGTATAGCCCTATAAATATAA";
-//     Index<String<Dna>, IndexEsa<> > esaIndex(genome); 
-//     Finder<Index<String<Dna>, IndexEsa<> > > esaFinder(esaIndex);
-//     
-//    
-//    while (find(esaFinder, "TATAA")){
-//      cout << position(esaFinder) << endl;
-//    }
-//    
-//    CharString texttext="tobeornottobe";
-//    Index<CharString, IndexEsa<> > esaFinder2(texttext);
-//    
-//    Iterator<Index<CharString>, TopDown<ParentLinks<> >  >::Type it(esaFinder2);
-//    
-// 
-//     do {
-//       do {
-// 	do{
-// 	  cout << representative(it) << endl;
-// 	} while (goDown(it));
-//      }while (goRight(it));
-//   }while (goUp(it)&&goRight(it));
-//    
-Index<DnaString, IndexQGram< GappedShape<3> > >
-      index("CATGATTACATA");
+    typedef typename Host<TString>::Type THost;
+    // Define the RecordReader.
+    RecordReader<std::ifstream, SinglePass<> > reader(stream);
+    // [A] Ensure the Journal Set is not occupied by other sequences.
+    clear(journalSet);
+    // Construct the temporary buffers for the read id and sequence.
+    String<char> tempSeqId;
+    THost tempSeq;
+    // No sequences in the fasta file!
+    if (atEnd(reader))
+    {
+        std::cerr << "Empty FASTA file." << std::endl;
+        return -1;
+    }
+    // First read sequence for reference sequence.
+    if (readRecord(tempSeqId, tempSeq, reader, Fasta()) != 0)
+    {
+        std::cerr << "ERROR reading FASTA." << std::endl;
+        return 1;
+    }
+    // [B] Set the reference sequence to the Journal Set
+    createGlobalReference(journalSet, tempSeq);
+    // Read remaining sequences.
+    while (!atEnd(reader))
+    {
+        if (readRecord(tempSeqId, tempSeq, reader, Fasta()) != 0)
+        {
+            std::cerr << "ERROR reading FASTA." << std::endl;
+            return 1;
+        }
+        // [C] Append and join the current read sequence.
+    appendValue(journalSet,tempSeq);
+    join(journalSet,length(journalSet)-1,joinConfig);  
       
-GappedShape<3> shape;
-hash(shape, "AT-A");
-for (unsigned i=0;i<length(getOccurences(index,shape));++i)
-    std::cout << getOccurences(index, indexShape(index))[i] << std::endl;
-
-return 0;
+    }
+    return 0;
+}
+int main()
+{
+    // Definition of the used types.
+    typedef String<Dna,Alloc<> > TSequence;
+    typedef String<Dna,Journaled<Alloc<>,SortedArray,Alloc<> > > TJournal;
+    typedef StringSet< TJournal, Owner<JournaledSet> > TJournaledSet;
+    // Open the stream to the file containing the sequences.
+    String<char> seqDatabasePath = "/home/gabriel/Downloads/sequences.fasta";
+    std::ifstream databaseFile(toCString(seqDatabasePath), std::ios_base::in);
+    if(!databaseFile.good())
+    {
+        std::cerr << "Cannot open file <" << seqDatabasePath << ">!" << std::endl;
+    }
+    // Reading each sequence and journal them.
+    // [D] Construct Journaled Set and call loadAndJoin
+    TJournaledSet journalSet;
+    JoinConfig<GlobalAlign<JournaledCompact> > joinConfig;
+    loadAndJoin(journalSet, databaseFile, joinConfig);
+    databaseFile.close();
+    return 0;
 }
\ Kein Zeilenumbruch am Dateiende.
diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata/zsrreplh0s7rggp4_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /home/gabriel/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/first_app.cpp~ ./sandbox/my_sandbox/apps/first_app/first_app.cpp~
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/my_sandbox/apps/first_app/first_app.cpp~	2012-09-05 12:20:30.000000000 +0200
+++ ./sandbox/my_sandbox/apps/first_app/first_app.cpp~	2012-09-05 13:52:12.703530859 +0200
@@ -1,45 +1,69 @@
 #include <seqan/sequence.h>
 #include <seqan/index.h>
 #include <iostream>
+#include <seqan/sequence_journaled.h>
+#include <seqan/journaled_set.h>
 
 using namespace std;
 using namespace seqan;
 
+
+template <typename TString, typename TStream, typename TSpec>
+inline int
+loadAndJoin(StringSet<TString, Owner<JournaledSet> > & /*journalSet*/,
+            TStream & stream,
+            JoinConfig<TSpec> const & /*joinConfig*/)
+{
+    typedef typename Host<TString>::Type THost;
+    // Define the RecordReader.
+    RecordReader<std::ifstream, SinglePass<> > reader(stream);
+    // [A] Ensure the Journal Set is not occupied by other sequences.
+
+    // Construct the temporary buffers for the read id and sequence.
+    String<char> tempSeqId;
+    THost tempSeq;
+    // No sequences in the fasta file!
+    if (atEnd(reader))
+    {
+        std::cerr << "Empty FASTA file." << std::endl;
+        return -1;
+    }
+    // First read sequence for reference sequence.
+    if (readRecord(tempSeqId, tempSeq, reader, Fasta()) != 0)
+    {
+        std::cerr << "ERROR reading FASTA." << std::endl;
+        return 1;
+    }
+    // [B] Set the reference sequence to the Journal Set
+
+    // Read remaining sequences.
+    while (!atEnd(reader))
+    {
+        if (readRecord(tempSeqId, tempSeq, reader, Fasta()) != 0)
+        {
+            std::cerr << "ERROR reading FASTA." << std::endl;
+            return 1;
+        }
+        // [C] Append and join the current read sequence.
+    }
+    return 0;
+}
 int main()
 {
-//     String<char> text = "This is the first example";
-//     Index<String<char>, IndexEsa<> > index(text);
-// 
-//     String<Dna> genome= "TTATTAAGCGTATAGCCCTATAAATATAA";
-//     Index<String<Dna>, IndexEsa<> > esaIndex(genome); 
-//     Finder<Index<String<Dna>, IndexEsa<> > > esaFinder(esaIndex);
-//     
-//    
-//    while (find(esaFinder, "TATAA")){
-//      cout << position(esaFinder) << endl;
-//    }
-//    
-//    CharString texttext="tobeornottobe";
-//    Index<CharString, IndexEsa<> > esaFinder2(texttext);
-//    
-//    Iterator<Index<CharString>, TopDown<ParentLinks<> >  >::Type it(esaFinder2);
-//    
-// 
-//     do {
-//       do {
-// 	do{
-// 	  cout << representative(it) << endl;
-// 	} while (goDown(it));
-//      }while (goRight(it));
-//   }while (goUp(it)&&goRight(it));
-//    
-Index<DnaString, IndexQGram< GappedShape<3> > >
-      index("CATGATTACATA");
-      
-GappedShape<3> shape;
-hash(shape, "AT-A");
-for (unsigned i=0;i<length(getOccurences(index,shape));++i)
-    std::cout << getOccurences(index, indexShape(index))[i] << std::endl;
+    // Definition of the used types.
+    typedef String<Dna,Alloc<> > TSequence;
+    typedef String<Dna,Journaled<Alloc<>,SortedArray,Alloc<> > > TJournal;
+    typedef StringSet< TJournal, Owner<JournaledSet> > TJournaledSet;
+    // Open the stream to the file containing the sequences.
+    String<char> seqDatabasePath = "/home/gabriel/Downloads/sequences.fasta";
+    std::ifstream databaseFile(toCString(seqDatabasePath), std::ios_base::in);
+    if(!databaseFile.good())
+    {
+        std::cerr << "Cannot open file <" << seqDatabasePath << ">!" << std::endl;
+    }
+    // Reading each sequence and journal them.
+    // [D] Construct Journaled Set and call loadAndJoin
 
-return 0;
+    databaseFile.close();
+    return 0;
 }
\ Kein Zeilenumbruch am Dateiende.

diff -u -r -N -x '*.o' -x Thumbs.db -x .DS_Store -x CMakeCache.txt -x misc/seqan_instrumentation/userdata/id.txt -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/userdata/id.txt -x misc/seqan_instrumentation/userdata/lmlucd3w6tzrgr57_stats.txt -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/userdata/lmlucd3w6tzrgr57_stats.txt -x .svn -x bin -x build -x util -x misc -x docs -x docs2 -x extras -x core -x misc/seqan_instrumentation/bin -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/bin -x misc/seqan_instrumentation/last_revision_copy -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/last_revision_copy -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/last_revision_copy -x misc/seqan_instrumentation/userdata -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/userdata -x misc/seqan_instrumentation/userdata -x /Users/grunert/Development/seqan-trunk/misc/seqan_instrumentation/userdata ./misc/seqan_instrumentation/last_revision_copy/sandbox/grunert/apps/first_app/first_app.cpp ./sandbox/grunert/apps/first_app/first_app.cpp
--- ./misc/seqan_instrumentation/last_revision_copy/sandbox/grunert/apps/first_app/first_app.cpp	2012-09-04 16:33:38.000000000 +0200
+++ ./sandbox/grunert/apps/first_app/first_app.cpp	2012-09-04 17:04:42.000000000 +0200
@@ -11,44 +11,39 @@
     std::cout << "  genome : " << genomeFragment << std::endl;
     std::cout << "  read   : " << read << std::endl;
 }
-
 int main(int, char const **)
 {
     // Build reads and genomes
     DnaString chr1 = "TATAATATTGCTATCGCGATATCGCTAGCTAGCTACGGATTATGCGCTCTGCGATATATCGCGCTAGATGTGCAGCTCGATCGAATGCACGTGTGTGCGATCGATTAGCGTCGATCATCGATCTATATTAGCGCGCGGTATCGGACGATCATATTAGCGGTCTAGCATTTAG";
-    
     // Build List containing all reads
-    typedef String<DnaString> DnaList;
-    DnaList readList;
+    typedef String<DnaString> TDnaList;
+    TDnaList readList;
     resize(readList, 4);
     readList[0] = "TTGCTATCGCGATATCGCTAGCTAGCTACGGATTATGCGCTCTGCGATATATCGCGCT";
     readList[1] = "TCGATTAGCGTCGATCATCGATCTATATTAGCGCGCGGTATCGGACGATCATATTAGCGGTCTAGCATT";
     readList[2] = "AGCCTGCGTACGTTGCAGTGCGTGCGTAGACTGTTGCAAGCCGGGGGTTCATGTGCGCTGAAGCACACATGCACA";
     readList[3] = "CGTGCACTGCTGACGTCGTGGTTGTCACATCGTCGTGCGTGCGTACTGCTGCTGACA";
-    
     // Append a second chromosome sequence fragment to chr1
     DnaString chr2 = "AGCCTGCGTACGTTGCAGTGCGTGCGTAGACTGTTGCAAGCCGGGGGTTCATGTGCGCTGAAGCACACATGCACACGTCTCTGTGTTCCGACGTGTGTCACGTGCACTGCTGACGTCGTGGTTGTCACATCGTCGTGCGTGCGTACTGCTGCTGACACATGCTGCTG";
     append(chr1, chr2);
-    
     // Print readlist
     std::cout << " \n Read list: " << std::endl;
     for(unsigned i = 0; i < length(readList); ++i)
         std::cout << readList[i] << std::endl;
-    
     // Assume we have mapped the 4 reads to chr1 (and chr2) and now have the mapping start positions (no gaps).
-    // Store the start position in a String: 7, 100, 172, 272
+    // Store the start position in a String alignPosList: 7, 100, 172, 272
     String<unsigned> alignPosList;
     resize(alignPosList, 4);
     alignPosList[0] = 7;
     alignPosList[1] = 100;
     alignPosList[2] = 172;
     alignPosList[3] = 272;
-    
     // Print alignments using Segment
     std::cout << " \n Print alignment using Segment: " << std::endl;
     for(unsigned i = 0; i < length(readList); ++i)
     {
-        // Begin and end position of a given alignment between the read and the genome
+        // Temporary copy of begin and end position (beginPosition) from alignPosList
+        // of a given alignment between the read and the genome
         unsigned beginPosition = alignPosList[i];
         unsigned endPosition = beginPosition + length(readList[i]);
         // Build infix
@@ -56,19 +51,61 @@
         // Call of our function to print the simple alignment
         printAlign(genomeFragment, readList[i]);
     }
-    
     // Iterators :)
     // Print alignments using Iterators: Do the same as above, but use Iterators to iterate over the read list.
-    // First, use Standard Iterators: Build two iterators {{{it}}} and {{{itEnd}}} to traverse {{{readList}}}.
-    
-    Iterator<DnaList>::Type it = begin(readList);
-    Iterator<DnaList, Standard>::Type itEnd = end(readList); //same Iterator as above
+    // First, use Standard Iterators.
+    Iterator<TDnaList>::Type it = begin(readList);
+    Iterator<TDnaList, Standard>::Type itEnd = end(readList); //same Iterator as above
     
     std::cout << " \n Print alignment using Standard Iterators: " << std::endl;
     for(; it != itEnd; goNext(it))
     {
-        std::cout << *it;
+        // Get the right index for alignPosList
+        int i = position(it, readList);
+        // Temporary copy of begin and end position (beginPosition) from alignPosList
+        // of a given alignment between the read and the genome
+        unsigned beginPosition = alignPosList[i];
+        unsigned endPosition = beginPosition + length(value(it));
+        // Build Infix
+        Infix<DnaString>::Type genomeFragment = infix(chr1, beginPosition, endPosition);
+        // Call of our function to print the simple alignment
+        printAlign(genomeFragment, value(it));
     }
+    // Now, use Rooted Iterators.
+    Iterator<TDnaList, Rooted>::Type it2 = begin(readList);
+    std::cout << " \n Print alignment using Rooted Iterators: " << std::endl;
+    for(; !atEnd(it2); goNext(it2))
+    {
+        int i = position(it2);
+        // Temporary copy of begin and end position (beginPosition) from alignPosList
+        // of a given alignment between the read and the genome
+        unsigned beginPosition = alignPosList[i];
+        unsigned endPosition = beginPosition + length(value(it2));
+        // Build Infix
+        Infix<DnaString>::Type genomeFragment = infix(chr1, beginPosition, endPosition);
+        // Call of our function to print the simple alignment
+        printAlign(genomeFragment, value(it2));
+    }
+    
+    
+    //StringSet
+    
+    StringSet<DnaString> stringSet;
+    
+    goBegin(it2);
+    for(; !atEnd(it2); goNext(it2))
+    {
+        appendValue(stringSet, value(it2));
+        Iterator<StringSet<DnaString>, Rooted>::Type it3 = begin(stringSet);
+        for(; !atEnd(it3); goNext(it3))
+        {
+            std::cout << value(it);
+        }
+        
+    }
+    
+    
+    
     
     return 1;
 }
